
G431RB-MX25L6433F-stldr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000003d4  20000004  20000004  00010004  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .init_array   00000004  200003d8  200003d8  000103d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .fini_array   00000004  200003dc  200003dc  000103dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         0000000c  200003e0  200003e0  000103e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000084  200003ec  200003ec  000103ec  2**2
                  ALLOC
  5 .text         00002b20  20000470  20000470  00010470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .Dev_Info     000000c8  20002f90  20002f90  00022f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .rodata       00000010  20003058  20003058  00013058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 ._user_heap_stack 00000600  20003068  20003068  00013068  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00023058  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007e6e  00000000  00000000  00023088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001994  00000000  00000000  0002aef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000860  00000000  00000000  0002c890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0001c496  00000000  00000000  0002d0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00009e7c  00000000  00000000  00049586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    000aee8d  00000000  00000000  00053402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0010228f  2**0
                  CONTENTS, READONLY
 17 .debug_ranges 00000760  00000000  00000000  001022e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00001f4c  00000000  00000000  00102a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

20000470 <__do_global_dtors_aux>:
20000470:	b510      	push	{r4, lr}
20000472:	4c05      	ldr	r4, [pc, #20]	; (20000488 <__do_global_dtors_aux+0x18>)
20000474:	7823      	ldrb	r3, [r4, #0]
20000476:	b933      	cbnz	r3, 20000486 <__do_global_dtors_aux+0x16>
20000478:	4b04      	ldr	r3, [pc, #16]	; (2000048c <__do_global_dtors_aux+0x1c>)
2000047a:	b113      	cbz	r3, 20000482 <__do_global_dtors_aux+0x12>
2000047c:	4804      	ldr	r0, [pc, #16]	; (20000490 <__do_global_dtors_aux+0x20>)
2000047e:	f3af 8000 	nop.w
20000482:	2301      	movs	r3, #1
20000484:	7023      	strb	r3, [r4, #0]
20000486:	bd10      	pop	{r4, pc}
20000488:	200003ec 	.word	0x200003ec
2000048c:	00000000 	.word	0x00000000
20000490:	20002f78 	.word	0x20002f78

20000494 <frame_dummy>:
20000494:	b508      	push	{r3, lr}
20000496:	4b03      	ldr	r3, [pc, #12]	; (200004a4 <frame_dummy+0x10>)
20000498:	b11b      	cbz	r3, 200004a2 <frame_dummy+0xe>
2000049a:	4903      	ldr	r1, [pc, #12]	; (200004a8 <frame_dummy+0x14>)
2000049c:	4803      	ldr	r0, [pc, #12]	; (200004ac <frame_dummy+0x18>)
2000049e:	f3af 8000 	nop.w
200004a2:	bd08      	pop	{r3, pc}
200004a4:	00000000 	.word	0x00000000
200004a8:	200003f0 	.word	0x200003f0
200004ac:	20002f78 	.word	0x20002f78

200004b0 <Init>:
 * @param  None
 * @retval  LOADER_OK = 1   : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int Init(void)
{
200004b0:	b580      	push	{r7, lr}
200004b2:	b082      	sub	sp, #8
200004b4:	af00      	add	r7, sp, #0
	*(uint32_t*)0xE000EDF0 = 0xA05F0000;
200004b6:	4b11      	ldr	r3, [pc, #68]	; (200004fc <Init+0x4c>)
200004b8:	4a11      	ldr	r2, [pc, #68]	; (20000500 <Init+0x50>)
200004ba:	601a      	str	r2, [r3, #0]

	SystemInit();
200004bc:	f000 fd0a 	bl	20000ed4 <SystemInit>
	 *
	 * change VTOR setting for other devices
	 * SCB->VTOR = 0x20000000 | 0x200;
	 *
	 * */
	SCB->VTOR = 0x20000000 | 0x200;
200004c0:	4b10      	ldr	r3, [pc, #64]	; (20000504 <Init+0x54>)
200004c2:	4a11      	ldr	r2, [pc, #68]	; (20000508 <Init+0x58>)
200004c4:	609a      	str	r2, [r3, #8]
200004c6:	2300      	movs	r3, #0
200004c8:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200004ca:	683b      	ldr	r3, [r7, #0]
200004cc:	f383 8810 	msr	PRIMASK, r3
}
200004d0:	bf00      	nop

	__set_PRIMASK(0);	//enable interrupts

	HAL_DeInit();
200004d2:	f000 fd53 	bl	20000f7c <HAL_DeInit>
	HAL_Init();
200004d6:	f000 fd38 	bl	20000f4a <HAL_Init>

	/* Configure the system clock */
	SystemClock_Config();
200004da:	f000 fa26 	bl	2000092a <SystemClock_Config>

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
200004de:	f000 f9d9 	bl	20000894 <MX_GPIO_Init>
	MX_SPI2_Init();
200004e2:	f000 fa73 	bl	200009cc <MX_SPI2_Init>
200004e6:	2301      	movs	r3, #1
200004e8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200004ea:	687b      	ldr	r3, [r7, #4]
200004ec:	f383 8810 	msr	PRIMASK, r3
}
200004f0:	bf00      	nop

	__set_PRIMASK(1);	//disable interrupts

	return LOADER_OK;
200004f2:	2301      	movs	r3, #1
}
200004f4:	4618      	mov	r0, r3
200004f6:	3708      	adds	r7, #8
200004f8:	46bd      	mov	sp, r7
200004fa:	bd80      	pop	{r7, pc}
200004fc:	e000edf0 	.word	0xe000edf0
20000500:	a05f0000 	.word	0xa05f0000
20000504:	e000ed00 	.word	0xe000ed00
20000508:	20000200 	.word	0x20000200

2000050c <Read>:
  *      R0             : "1" 			: Operation succeeded
  * 			  "0" 			: Operation failure
  * Note: Mandatory for all types except SRAM and PSRAM
  */
int Read (uint32_t Address, uint32_t Size, uint8_t* buffer)
{
2000050c:	b580      	push	{r7, lr}
2000050e:	b084      	sub	sp, #16
20000510:	af00      	add	r7, sp, #0
20000512:	60f8      	str	r0, [r7, #12]
20000514:	60b9      	str	r1, [r7, #8]
20000516:	607a      	str	r2, [r7, #4]
	sFLASH_ReadBuffer(buffer, Address, Size);
20000518:	68ba      	ldr	r2, [r7, #8]
2000051a:	68f9      	ldr	r1, [r7, #12]
2000051c:	6878      	ldr	r0, [r7, #4]
2000051e:	f000 fb69 	bl	20000bf4 <sFLASH_ReadBuffer>
	return 1;
20000522:	2301      	movs	r3, #1
}
20000524:	4618      	mov	r0, r3
20000526:	3710      	adds	r7, #16
20000528:	46bd      	mov	sp, r7
2000052a:	bd80      	pop	{r7, pc}

2000052c <Write>:
 * @param   buffer : pointer to data buffer
 * @retval  LOADER_OK = 1       : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int Write(uint32_t Address, uint32_t Size, uint8_t* buffer)
{
2000052c:	b580      	push	{r7, lr}
2000052e:	b084      	sub	sp, #16
20000530:	af00      	add	r7, sp, #0
20000532:	60f8      	str	r0, [r7, #12]
20000534:	60b9      	str	r1, [r7, #8]
20000536:	607a      	str	r2, [r7, #4]
	sFLASH_WriteBuffer(buffer, Address, Size);
20000538:	68ba      	ldr	r2, [r7, #8]
2000053a:	68f9      	ldr	r1, [r7, #12]
2000053c:	6878      	ldr	r0, [r7, #4]
2000053e:	f000 fb91 	bl	20000c64 <sFLASH_WriteBuffer>
	return LOADER_OK;
20000542:	2301      	movs	r3, #1
}
20000544:	4618      	mov	r0, r3
20000546:	3710      	adds	r7, #16
20000548:	46bd      	mov	sp, r7
2000054a:	bd80      	pop	{r7, pc}

2000054c <SectorErase>:
 * @param   EraseEndAddress   :  erase end address
 * @retval  LOADER_OK = 1       : Operation succeeded
 * @retval  LOADER_FAIL = 0 : Operation failed
 */
int SectorErase(uint32_t EraseStartAddress, uint32_t EraseEndAddress)
{
2000054c:	b580      	push	{r7, lr}
2000054e:	b082      	sub	sp, #8
20000550:	af00      	add	r7, sp, #0
20000552:	6078      	str	r0, [r7, #4]
20000554:	6039      	str	r1, [r7, #0]
	EraseStartAddress = EraseStartAddress -  EraseStartAddress % sFLASH_SPI_SECTOR_SIZE;
20000556:	687b      	ldr	r3, [r7, #4]
20000558:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
2000055c:	f023 030f 	bic.w	r3, r3, #15
20000560:	607b      	str	r3, [r7, #4]
	while (EraseEndAddress>=EraseStartAddress)
20000562:	e006      	b.n	20000572 <SectorErase+0x26>
	{
		sFLASH_EraseSector(EraseStartAddress);
20000564:	6878      	ldr	r0, [r7, #4]
20000566:	f000 fab3 	bl	20000ad0 <sFLASH_EraseSector>
		EraseStartAddress += sFLASH_SPI_SECTOR_SIZE;
2000056a:	687b      	ldr	r3, [r7, #4]
2000056c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
20000570:	607b      	str	r3, [r7, #4]
	while (EraseEndAddress>=EraseStartAddress)
20000572:	683a      	ldr	r2, [r7, #0]
20000574:	687b      	ldr	r3, [r7, #4]
20000576:	429a      	cmp	r2, r3
20000578:	d2f4      	bcs.n	20000564 <SectorErase+0x18>
	}

	return LOADER_OK;
2000057a:	2301      	movs	r3, #1
}
2000057c:	4618      	mov	r0, r3
2000057e:	3708      	adds	r7, #8
20000580:	46bd      	mov	sp, r7
20000582:	bd80      	pop	{r7, pc}

20000584 <MassErase>:
 * outputs   :
 *     none
 * Note: Optional for all types of device
 */
int MassErase(void)
{
20000584:	b580      	push	{r7, lr}
20000586:	af00      	add	r7, sp, #0
	sFLASH_EraseChip();
20000588:	f000 fad4 	bl	20000b34 <sFLASH_EraseChip>
    return LOADER_OK;
2000058c:	2301      	movs	r3, #1
}
2000058e:	4618      	mov	r0, r3
20000590:	bd80      	pop	{r7, pc}

20000592 <CheckSum>:
 * outputs   :
 *     R0             : Checksum value
 * Note: Optional for all types of device
 */
uint32_t CheckSum(uint32_t StartAddress, uint32_t Size, uint32_t InitVal)
{
20000592:	b580      	push	{r7, lr}
20000594:	b088      	sub	sp, #32
20000596:	af00      	add	r7, sp, #0
20000598:	60f8      	str	r0, [r7, #12]
2000059a:	60b9      	str	r1, [r7, #8]
2000059c:	607a      	str	r2, [r7, #4]
	uint8_t missalignementAddress = StartAddress%4;
2000059e:	68fb      	ldr	r3, [r7, #12]
200005a0:	b2db      	uxtb	r3, r3
200005a2:	f003 0303 	and.w	r3, r3, #3
200005a6:	77fb      	strb	r3, [r7, #31]
	uint8_t missalignementSize = Size ;
200005a8:	68bb      	ldr	r3, [r7, #8]
200005aa:	77bb      	strb	r3, [r7, #30]
	int cnt;
	uint32_t Val;
	uint8_t value;

	StartAddress-=StartAddress%4;
200005ac:	68fb      	ldr	r3, [r7, #12]
200005ae:	f023 0303 	bic.w	r3, r3, #3
200005b2:	60fb      	str	r3, [r7, #12]
	Size += (Size%4==0)?0:4-(Size%4);
200005b4:	68bb      	ldr	r3, [r7, #8]
200005b6:	f003 0303 	and.w	r3, r3, #3
200005ba:	2b00      	cmp	r3, #0
200005bc:	d005      	beq.n	200005ca <CheckSum+0x38>
200005be:	68bb      	ldr	r3, [r7, #8]
200005c0:	f003 0303 	and.w	r3, r3, #3
200005c4:	f1c3 0304 	rsb	r3, r3, #4
200005c8:	e000      	b.n	200005cc <CheckSum+0x3a>
200005ca:	2300      	movs	r3, #0
200005cc:	68ba      	ldr	r2, [r7, #8]
200005ce:	4413      	add	r3, r2
200005d0:	60bb      	str	r3, [r7, #8]

	for(cnt=0; cnt<Size ; cnt+=4)
200005d2:	2300      	movs	r3, #0
200005d4:	61bb      	str	r3, [r7, #24]
200005d6:	e0e3      	b.n	200007a0 <CheckSum+0x20e>
	{
		sFLASH_ReadBuffer(&value, StartAddress ,1);
200005d8:	f107 0313 	add.w	r3, r7, #19
200005dc:	2201      	movs	r2, #1
200005de:	68f9      	ldr	r1, [r7, #12]
200005e0:	4618      	mov	r0, r3
200005e2:	f000 fb07 	bl	20000bf4 <sFLASH_ReadBuffer>
		Val = value;
200005e6:	7cfb      	ldrb	r3, [r7, #19]
200005e8:	617b      	str	r3, [r7, #20]
		sFLASH_ReadBuffer(&value, StartAddress + 1,1);
200005ea:	68fb      	ldr	r3, [r7, #12]
200005ec:	1c59      	adds	r1, r3, #1
200005ee:	f107 0313 	add.w	r3, r7, #19
200005f2:	2201      	movs	r2, #1
200005f4:	4618      	mov	r0, r3
200005f6:	f000 fafd 	bl	20000bf4 <sFLASH_ReadBuffer>
		Val+= value<<8;
200005fa:	7cfb      	ldrb	r3, [r7, #19]
200005fc:	021b      	lsls	r3, r3, #8
200005fe:	461a      	mov	r2, r3
20000600:	697b      	ldr	r3, [r7, #20]
20000602:	4413      	add	r3, r2
20000604:	617b      	str	r3, [r7, #20]
		sFLASH_ReadBuffer(&value, StartAddress + 2,1);
20000606:	68fb      	ldr	r3, [r7, #12]
20000608:	1c99      	adds	r1, r3, #2
2000060a:	f107 0313 	add.w	r3, r7, #19
2000060e:	2201      	movs	r2, #1
20000610:	4618      	mov	r0, r3
20000612:	f000 faef 	bl	20000bf4 <sFLASH_ReadBuffer>
		Val+= value<<16;
20000616:	7cfb      	ldrb	r3, [r7, #19]
20000618:	041b      	lsls	r3, r3, #16
2000061a:	461a      	mov	r2, r3
2000061c:	697b      	ldr	r3, [r7, #20]
2000061e:	4413      	add	r3, r2
20000620:	617b      	str	r3, [r7, #20]
		sFLASH_ReadBuffer(&value, StartAddress + 3,1);
20000622:	68fb      	ldr	r3, [r7, #12]
20000624:	1cd9      	adds	r1, r3, #3
20000626:	f107 0313 	add.w	r3, r7, #19
2000062a:	2201      	movs	r2, #1
2000062c:	4618      	mov	r0, r3
2000062e:	f000 fae1 	bl	20000bf4 <sFLASH_ReadBuffer>
		Val+= value<<24;
20000632:	7cfb      	ldrb	r3, [r7, #19]
20000634:	061b      	lsls	r3, r3, #24
20000636:	461a      	mov	r2, r3
20000638:	697b      	ldr	r3, [r7, #20]
2000063a:	4413      	add	r3, r2
2000063c:	617b      	str	r3, [r7, #20]
		if(missalignementAddress)
2000063e:	7ffb      	ldrb	r3, [r7, #31]
20000640:	2b00      	cmp	r3, #0
20000642:	d040      	beq.n	200006c6 <CheckSum+0x134>
		{
			switch (missalignementAddress)
20000644:	7ffb      	ldrb	r3, [r7, #31]
20000646:	2b03      	cmp	r3, #3
20000648:	d032      	beq.n	200006b0 <CheckSum+0x11e>
2000064a:	2b03      	cmp	r3, #3
2000064c:	f300 80a2 	bgt.w	20000794 <CheckSum+0x202>
20000650:	2b01      	cmp	r3, #1
20000652:	d002      	beq.n	2000065a <CheckSum+0xc8>
20000654:	2b02      	cmp	r3, #2
20000656:	d019      	beq.n	2000068c <CheckSum+0xfa>
20000658:	e09c      	b.n	20000794 <CheckSum+0x202>
			{
				case 1:
					InitVal += (uint8_t) (Val>>8 & 0xff);
2000065a:	697b      	ldr	r3, [r7, #20]
2000065c:	0a1b      	lsrs	r3, r3, #8
2000065e:	b2db      	uxtb	r3, r3
20000660:	461a      	mov	r2, r3
20000662:	687b      	ldr	r3, [r7, #4]
20000664:	4413      	add	r3, r2
20000666:	607b      	str	r3, [r7, #4]
					InitVal += (uint8_t) (Val>>16 & 0xff);
20000668:	697b      	ldr	r3, [r7, #20]
2000066a:	0c1b      	lsrs	r3, r3, #16
2000066c:	b2db      	uxtb	r3, r3
2000066e:	461a      	mov	r2, r3
20000670:	687b      	ldr	r3, [r7, #4]
20000672:	4413      	add	r3, r2
20000674:	607b      	str	r3, [r7, #4]
					InitVal += (uint8_t) (Val>>24 & 0xff);
20000676:	697b      	ldr	r3, [r7, #20]
20000678:	0e1b      	lsrs	r3, r3, #24
2000067a:	b2db      	uxtb	r3, r3
2000067c:	461a      	mov	r2, r3
2000067e:	687b      	ldr	r3, [r7, #4]
20000680:	4413      	add	r3, r2
20000682:	607b      	str	r3, [r7, #4]
					missalignementAddress-=1;
20000684:	7ffb      	ldrb	r3, [r7, #31]
20000686:	3b01      	subs	r3, #1
20000688:	77fb      	strb	r3, [r7, #31]
				break;
2000068a:	e083      	b.n	20000794 <CheckSum+0x202>
				case 2:
					InitVal += (uint8_t) (Val>>16 & 0xff);
2000068c:	697b      	ldr	r3, [r7, #20]
2000068e:	0c1b      	lsrs	r3, r3, #16
20000690:	b2db      	uxtb	r3, r3
20000692:	461a      	mov	r2, r3
20000694:	687b      	ldr	r3, [r7, #4]
20000696:	4413      	add	r3, r2
20000698:	607b      	str	r3, [r7, #4]
					InitVal += (uint8_t) (Val>>24 & 0xff);
2000069a:	697b      	ldr	r3, [r7, #20]
2000069c:	0e1b      	lsrs	r3, r3, #24
2000069e:	b2db      	uxtb	r3, r3
200006a0:	461a      	mov	r2, r3
200006a2:	687b      	ldr	r3, [r7, #4]
200006a4:	4413      	add	r3, r2
200006a6:	607b      	str	r3, [r7, #4]
					missalignementAddress-=2;
200006a8:	7ffb      	ldrb	r3, [r7, #31]
200006aa:	3b02      	subs	r3, #2
200006ac:	77fb      	strb	r3, [r7, #31]
				break;
200006ae:	e071      	b.n	20000794 <CheckSum+0x202>
				case 3:
					InitVal += (uint8_t) (Val>>24 & 0xff);
200006b0:	697b      	ldr	r3, [r7, #20]
200006b2:	0e1b      	lsrs	r3, r3, #24
200006b4:	b2db      	uxtb	r3, r3
200006b6:	461a      	mov	r2, r3
200006b8:	687b      	ldr	r3, [r7, #4]
200006ba:	4413      	add	r3, r2
200006bc:	607b      	str	r3, [r7, #4]
					missalignementAddress-=3;
200006be:	7ffb      	ldrb	r3, [r7, #31]
200006c0:	3b03      	subs	r3, #3
200006c2:	77fb      	strb	r3, [r7, #31]
				break;
200006c4:	e066      	b.n	20000794 <CheckSum+0x202>
			}
		}
		else if((Size-missalignementSize)%4 && (Size-cnt) <=4)
200006c6:	7fbb      	ldrb	r3, [r7, #30]
200006c8:	68ba      	ldr	r2, [r7, #8]
200006ca:	1ad3      	subs	r3, r2, r3
200006cc:	f003 0303 	and.w	r3, r3, #3
200006d0:	2b00      	cmp	r3, #0
200006d2:	d044      	beq.n	2000075e <CheckSum+0x1cc>
200006d4:	69bb      	ldr	r3, [r7, #24]
200006d6:	68ba      	ldr	r2, [r7, #8]
200006d8:	1ad3      	subs	r3, r2, r3
200006da:	2b04      	cmp	r3, #4
200006dc:	d83f      	bhi.n	2000075e <CheckSum+0x1cc>
		{
			switch (Size-missalignementSize)
200006de:	7fbb      	ldrb	r3, [r7, #30]
200006e0:	68ba      	ldr	r2, [r7, #8]
200006e2:	1ad3      	subs	r3, r2, r3
200006e4:	2b03      	cmp	r3, #3
200006e6:	d02f      	beq.n	20000748 <CheckSum+0x1b6>
200006e8:	2b03      	cmp	r3, #3
200006ea:	d853      	bhi.n	20000794 <CheckSum+0x202>
200006ec:	2b01      	cmp	r3, #1
200006ee:	d002      	beq.n	200006f6 <CheckSum+0x164>
200006f0:	2b02      	cmp	r3, #2
200006f2:	d018      	beq.n	20000726 <CheckSum+0x194>
200006f4:	e04e      	b.n	20000794 <CheckSum+0x202>
			{
			case 1:
				InitVal += (uint8_t) Val;
200006f6:	697b      	ldr	r3, [r7, #20]
200006f8:	b2db      	uxtb	r3, r3
200006fa:	461a      	mov	r2, r3
200006fc:	687b      	ldr	r3, [r7, #4]
200006fe:	4413      	add	r3, r2
20000700:	607b      	str	r3, [r7, #4]
				InitVal += (uint8_t) (Val>>8 & 0xff);
20000702:	697b      	ldr	r3, [r7, #20]
20000704:	0a1b      	lsrs	r3, r3, #8
20000706:	b2db      	uxtb	r3, r3
20000708:	461a      	mov	r2, r3
2000070a:	687b      	ldr	r3, [r7, #4]
2000070c:	4413      	add	r3, r2
2000070e:	607b      	str	r3, [r7, #4]
				InitVal += (uint8_t) (Val>>16 & 0xff);
20000710:	697b      	ldr	r3, [r7, #20]
20000712:	0c1b      	lsrs	r3, r3, #16
20000714:	b2db      	uxtb	r3, r3
20000716:	461a      	mov	r2, r3
20000718:	687b      	ldr	r3, [r7, #4]
2000071a:	4413      	add	r3, r2
2000071c:	607b      	str	r3, [r7, #4]
				missalignementSize-=1;
2000071e:	7fbb      	ldrb	r3, [r7, #30]
20000720:	3b01      	subs	r3, #1
20000722:	77bb      	strb	r3, [r7, #30]
			break;
20000724:	e01a      	b.n	2000075c <CheckSum+0x1ca>
			case 2:
				InitVal += (uint8_t) Val;
20000726:	697b      	ldr	r3, [r7, #20]
20000728:	b2db      	uxtb	r3, r3
2000072a:	461a      	mov	r2, r3
2000072c:	687b      	ldr	r3, [r7, #4]
2000072e:	4413      	add	r3, r2
20000730:	607b      	str	r3, [r7, #4]
				InitVal += (uint8_t) (Val>>8 & 0xff);
20000732:	697b      	ldr	r3, [r7, #20]
20000734:	0a1b      	lsrs	r3, r3, #8
20000736:	b2db      	uxtb	r3, r3
20000738:	461a      	mov	r2, r3
2000073a:	687b      	ldr	r3, [r7, #4]
2000073c:	4413      	add	r3, r2
2000073e:	607b      	str	r3, [r7, #4]
				missalignementSize-=2;
20000740:	7fbb      	ldrb	r3, [r7, #30]
20000742:	3b02      	subs	r3, #2
20000744:	77bb      	strb	r3, [r7, #30]
			break;
20000746:	e009      	b.n	2000075c <CheckSum+0x1ca>
			case 3:
				InitVal += (uint8_t) Val;
20000748:	697b      	ldr	r3, [r7, #20]
2000074a:	b2db      	uxtb	r3, r3
2000074c:	461a      	mov	r2, r3
2000074e:	687b      	ldr	r3, [r7, #4]
20000750:	4413      	add	r3, r2
20000752:	607b      	str	r3, [r7, #4]
				missalignementSize-=3;
20000754:	7fbb      	ldrb	r3, [r7, #30]
20000756:	3b03      	subs	r3, #3
20000758:	77bb      	strb	r3, [r7, #30]
				break;
2000075a:	bf00      	nop
			switch (Size-missalignementSize)
2000075c:	e01a      	b.n	20000794 <CheckSum+0x202>
			}
		}
		else
		{
			InitVal += (uint8_t) Val;
2000075e:	697b      	ldr	r3, [r7, #20]
20000760:	b2db      	uxtb	r3, r3
20000762:	461a      	mov	r2, r3
20000764:	687b      	ldr	r3, [r7, #4]
20000766:	4413      	add	r3, r2
20000768:	607b      	str	r3, [r7, #4]
			InitVal += (uint8_t) (Val>>8 & 0xff);
2000076a:	697b      	ldr	r3, [r7, #20]
2000076c:	0a1b      	lsrs	r3, r3, #8
2000076e:	b2db      	uxtb	r3, r3
20000770:	461a      	mov	r2, r3
20000772:	687b      	ldr	r3, [r7, #4]
20000774:	4413      	add	r3, r2
20000776:	607b      	str	r3, [r7, #4]
			InitVal += (uint8_t) (Val>>16 & 0xff);
20000778:	697b      	ldr	r3, [r7, #20]
2000077a:	0c1b      	lsrs	r3, r3, #16
2000077c:	b2db      	uxtb	r3, r3
2000077e:	461a      	mov	r2, r3
20000780:	687b      	ldr	r3, [r7, #4]
20000782:	4413      	add	r3, r2
20000784:	607b      	str	r3, [r7, #4]
			InitVal += (uint8_t) (Val>>24 & 0xff);
20000786:	697b      	ldr	r3, [r7, #20]
20000788:	0e1b      	lsrs	r3, r3, #24
2000078a:	b2db      	uxtb	r3, r3
2000078c:	461a      	mov	r2, r3
2000078e:	687b      	ldr	r3, [r7, #4]
20000790:	4413      	add	r3, r2
20000792:	607b      	str	r3, [r7, #4]
		}
		StartAddress+=4;
20000794:	68fb      	ldr	r3, [r7, #12]
20000796:	3304      	adds	r3, #4
20000798:	60fb      	str	r3, [r7, #12]
	for(cnt=0; cnt<Size ; cnt+=4)
2000079a:	69bb      	ldr	r3, [r7, #24]
2000079c:	3304      	adds	r3, #4
2000079e:	61bb      	str	r3, [r7, #24]
200007a0:	69bb      	ldr	r3, [r7, #24]
200007a2:	68ba      	ldr	r2, [r7, #8]
200007a4:	429a      	cmp	r2, r3
200007a6:	f63f af17 	bhi.w	200005d8 <CheckSum+0x46>
	}

	return (InitVal);
200007aa:	687b      	ldr	r3, [r7, #4]
}
200007ac:	4618      	mov	r0, r3
200007ae:	3720      	adds	r7, #32
200007b0:	46bd      	mov	sp, r7
200007b2:	bd80      	pop	{r7, pc}

200007b4 <Verify>:
 *     R0             : Operation failed (address of failure)
 *     R1             : Checksum value
 * Note: Optional for all types of device
 */
uint64_t Verify(uint32_t MemoryAddr, uint32_t RAMBufferAddr, uint32_t Size, uint32_t missalignement)
{
200007b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
200007b8:	b08e      	sub	sp, #56	; 0x38
200007ba:	af00      	add	r7, sp, #0
200007bc:	61f8      	str	r0, [r7, #28]
200007be:	61b9      	str	r1, [r7, #24]
200007c0:	617a      	str	r2, [r7, #20]
200007c2:	613b      	str	r3, [r7, #16]
	uint32_t InitVal = 0;
200007c4:	2300      	movs	r3, #0
200007c6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t VerifiedData = 0;
200007c8:	2300      	movs	r3, #0
200007ca:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t TmpBuffer = 0x00;
200007cc:	2300      	movs	r3, #0
200007ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint64_t checksum;
	Size*=4;
200007d2:	697b      	ldr	r3, [r7, #20]
200007d4:	009b      	lsls	r3, r3, #2
200007d6:	617b      	str	r3, [r7, #20]

	checksum = CheckSum((uint32_t)MemoryAddr + (missalignement & 0xf), Size - ((missalignement >> 16) & 0xF), InitVal);
200007d8:	693b      	ldr	r3, [r7, #16]
200007da:	f003 020f 	and.w	r2, r3, #15
200007de:	69fb      	ldr	r3, [r7, #28]
200007e0:	18d0      	adds	r0, r2, r3
200007e2:	693b      	ldr	r3, [r7, #16]
200007e4:	0c1b      	lsrs	r3, r3, #16
200007e6:	f003 030f 	and.w	r3, r3, #15
200007ea:	697a      	ldr	r2, [r7, #20]
200007ec:	1ad3      	subs	r3, r2, r3
200007ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
200007f0:	4619      	mov	r1, r3
200007f2:	f7ff fece 	bl	20000592 <CheckSum>
200007f6:	4603      	mov	r3, r0
200007f8:	2200      	movs	r2, #0
200007fa:	603b      	str	r3, [r7, #0]
200007fc:	607a      	str	r2, [r7, #4]
200007fe:	e9d7 2300 	ldrd	r2, r3, [r7]
20000802:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	while (Size>VerifiedData)
20000806:	e030      	b.n	2000086a <Verify+0xb6>
	{
		sFLASH_ReadBuffer(&TmpBuffer, MemoryAddr+VerifiedData, 1);
20000808:	69fa      	ldr	r2, [r7, #28]
2000080a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000080c:	18d1      	adds	r1, r2, r3
2000080e:	f107 0327 	add.w	r3, r7, #39	; 0x27
20000812:	2201      	movs	r2, #1
20000814:	4618      	mov	r0, r3
20000816:	f000 f9ed 	bl	20000bf4 <sFLASH_ReadBuffer>

		if (TmpBuffer != *((uint8_t*)RAMBufferAddr+VerifiedData))
2000081a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
2000081c:	69bb      	ldr	r3, [r7, #24]
2000081e:	4413      	add	r3, r2
20000820:	781a      	ldrb	r2, [r3, #0]
20000822:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
20000826:	429a      	cmp	r2, r3
20000828:	d01c      	beq.n	20000864 <Verify+0xb0>
			return ((checksum<<32) + MemoryAddr+VerifiedData);
2000082a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
2000082e:	f04f 0200 	mov.w	r2, #0
20000832:	f04f 0300 	mov.w	r3, #0
20000836:	0003      	movs	r3, r0
20000838:	2200      	movs	r2, #0
2000083a:	69f9      	ldr	r1, [r7, #28]
2000083c:	2000      	movs	r0, #0
2000083e:	468a      	mov	sl, r1
20000840:	4683      	mov	fp, r0
20000842:	eb12 080a 	adds.w	r8, r2, sl
20000846:	eb43 090b 	adc.w	r9, r3, fp
2000084a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000084c:	2200      	movs	r2, #0
2000084e:	60bb      	str	r3, [r7, #8]
20000850:	60fa      	str	r2, [r7, #12]
20000852:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
20000856:	460b      	mov	r3, r1
20000858:	eb18 0403 	adds.w	r4, r8, r3
2000085c:	4613      	mov	r3, r2
2000085e:	eb49 0503 	adc.w	r5, r9, r3
20000862:	e00e      	b.n	20000882 <Verify+0xce>

		VerifiedData++;
20000864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
20000866:	3301      	adds	r3, #1
20000868:	637b      	str	r3, [r7, #52]	; 0x34
	while (Size>VerifiedData)
2000086a:	697a      	ldr	r2, [r7, #20]
2000086c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
2000086e:	429a      	cmp	r2, r3
20000870:	d8ca      	bhi.n	20000808 <Verify+0x54>
	}

	return (checksum<<32);
20000872:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
20000876:	f04f 0400 	mov.w	r4, #0
2000087a:	f04f 0500 	mov.w	r5, #0
2000087e:	0015      	movs	r5, r2
20000880:	2400      	movs	r4, #0
}
20000882:	4622      	mov	r2, r4
20000884:	462b      	mov	r3, r5
20000886:	4610      	mov	r0, r2
20000888:	4619      	mov	r1, r3
2000088a:	3738      	adds	r7, #56	; 0x38
2000088c:	46bd      	mov	sp, r7
2000088e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

20000894 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
20000894:	b580      	push	{r7, lr}
20000896:	b088      	sub	sp, #32
20000898:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
2000089a:	f107 030c 	add.w	r3, r7, #12
2000089e:	2200      	movs	r2, #0
200008a0:	601a      	str	r2, [r3, #0]
200008a2:	605a      	str	r2, [r3, #4]
200008a4:	609a      	str	r2, [r3, #8]
200008a6:	60da      	str	r2, [r3, #12]
200008a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
200008aa:	4b19      	ldr	r3, [pc, #100]	; (20000910 <MX_GPIO_Init+0x7c>)
200008ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200008ae:	4a18      	ldr	r2, [pc, #96]	; (20000910 <MX_GPIO_Init+0x7c>)
200008b0:	f043 0302 	orr.w	r3, r3, #2
200008b4:	64d3      	str	r3, [r2, #76]	; 0x4c
200008b6:	4b16      	ldr	r3, [pc, #88]	; (20000910 <MX_GPIO_Init+0x7c>)
200008b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200008ba:	f003 0302 	and.w	r3, r3, #2
200008be:	60bb      	str	r3, [r7, #8]
200008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
200008c2:	4b13      	ldr	r3, [pc, #76]	; (20000910 <MX_GPIO_Init+0x7c>)
200008c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200008c6:	4a12      	ldr	r2, [pc, #72]	; (20000910 <MX_GPIO_Init+0x7c>)
200008c8:	f043 0301 	orr.w	r3, r3, #1
200008cc:	64d3      	str	r3, [r2, #76]	; 0x4c
200008ce:	4b10      	ldr	r3, [pc, #64]	; (20000910 <MX_GPIO_Init+0x7c>)
200008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
200008d2:	f003 0301 	and.w	r3, r3, #1
200008d6:	607b      	str	r3, [r7, #4]
200008d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_SET);
200008da:	2201      	movs	r2, #1
200008dc:	f44f 7180 	mov.w	r1, #256	; 0x100
200008e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
200008e4:	f000 fe3c 	bl	20001560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
200008e8:	f44f 7380 	mov.w	r3, #256	; 0x100
200008ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
200008ee:	2301      	movs	r3, #1
200008f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
200008f2:	2300      	movs	r3, #0
200008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
200008f6:	2303      	movs	r3, #3
200008f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
200008fa:	f107 030c 	add.w	r3, r7, #12
200008fe:	4619      	mov	r1, r3
20000900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
20000904:	f000 fcaa 	bl	2000125c <HAL_GPIO_Init>

}
20000908:	bf00      	nop
2000090a:	3720      	adds	r7, #32
2000090c:	46bd      	mov	sp, r7
2000090e:	bd80      	pop	{r7, pc}
20000910:	40021000 	.word	0x40021000

20000914 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
20000914:	b580      	push	{r7, lr}
20000916:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
20000918:	f000 fb17 	bl	20000f4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
2000091c:	f000 f805 	bl	2000092a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
20000920:	f7ff ffb8 	bl	20000894 <MX_GPIO_Init>
  MX_SPI2_Init();
20000924:	f000 f852 	bl	200009cc <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
20000928:	e7fe      	b.n	20000928 <main+0x14>

2000092a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
2000092a:	b580      	push	{r7, lr}
2000092c:	b094      	sub	sp, #80	; 0x50
2000092e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
20000930:	f107 0318 	add.w	r3, r7, #24
20000934:	2238      	movs	r2, #56	; 0x38
20000936:	2100      	movs	r1, #0
20000938:	4618      	mov	r0, r3
2000093a:	f002 fb15 	bl	20002f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
2000093e:	1d3b      	adds	r3, r7, #4
20000940:	2200      	movs	r2, #0
20000942:	601a      	str	r2, [r3, #0]
20000944:	605a      	str	r2, [r3, #4]
20000946:	609a      	str	r2, [r3, #8]
20000948:	60da      	str	r2, [r3, #12]
2000094a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
2000094c:	f44f 7000 	mov.w	r0, #512	; 0x200
20000950:	f000 fe1e 	bl	20001590 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
20000954:	2302      	movs	r3, #2
20000956:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
20000958:	f44f 7380 	mov.w	r3, #256	; 0x100
2000095c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
2000095e:	2340      	movs	r3, #64	; 0x40
20000960:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
20000962:	2302      	movs	r3, #2
20000964:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
20000966:	2302      	movs	r3, #2
20000968:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
2000096a:	2301      	movs	r3, #1
2000096c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 15;
2000096e:	230f      	movs	r3, #15
20000970:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
20000972:	2302      	movs	r3, #2
20000974:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
20000976:	2302      	movs	r3, #2
20000978:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
2000097a:	2302      	movs	r3, #2
2000097c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
2000097e:	f107 0318 	add.w	r3, r7, #24
20000982:	4618      	mov	r0, r3
20000984:	f000 feb8 	bl	200016f8 <HAL_RCC_OscConfig>
20000988:	4603      	mov	r3, r0
2000098a:	2b00      	cmp	r3, #0
2000098c:	d001      	beq.n	20000992 <SystemClock_Config+0x68>
  {
    Error_Handler();
2000098e:	f000 f818 	bl	200009c2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
20000992:	230f      	movs	r3, #15
20000994:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
20000996:	2303      	movs	r3, #3
20000998:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
2000099a:	2300      	movs	r3, #0
2000099c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
2000099e:	2300      	movs	r3, #0
200009a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
200009a2:	2300      	movs	r3, #0
200009a4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
200009a6:	1d3b      	adds	r3, r7, #4
200009a8:	2103      	movs	r1, #3
200009aa:	4618      	mov	r0, r3
200009ac:	f001 f9bc 	bl	20001d28 <HAL_RCC_ClockConfig>
200009b0:	4603      	mov	r3, r0
200009b2:	2b00      	cmp	r3, #0
200009b4:	d001      	beq.n	200009ba <SystemClock_Config+0x90>
  {
    Error_Handler();
200009b6:	f000 f804 	bl	200009c2 <Error_Handler>
  }
}
200009ba:	bf00      	nop
200009bc:	3750      	adds	r7, #80	; 0x50
200009be:	46bd      	mov	sp, r7
200009c0:	bd80      	pop	{r7, pc}

200009c2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
200009c2:	b480      	push	{r7}
200009c4:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
200009c6:	b672      	cpsid	i
}
200009c8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
200009ca:	e7fe      	b.n	200009ca <Error_Handler+0x8>

200009cc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
200009cc:	b580      	push	{r7, lr}
200009ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
200009d0:	4b1b      	ldr	r3, [pc, #108]	; (20000a40 <MX_SPI2_Init+0x74>)
200009d2:	4a1c      	ldr	r2, [pc, #112]	; (20000a44 <MX_SPI2_Init+0x78>)
200009d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
200009d6:	4b1a      	ldr	r3, [pc, #104]	; (20000a40 <MX_SPI2_Init+0x74>)
200009d8:	f44f 7282 	mov.w	r2, #260	; 0x104
200009dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
200009de:	4b18      	ldr	r3, [pc, #96]	; (20000a40 <MX_SPI2_Init+0x74>)
200009e0:	2200      	movs	r2, #0
200009e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
200009e4:	4b16      	ldr	r3, [pc, #88]	; (20000a40 <MX_SPI2_Init+0x74>)
200009e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
200009ea:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
200009ec:	4b14      	ldr	r3, [pc, #80]	; (20000a40 <MX_SPI2_Init+0x74>)
200009ee:	2200      	movs	r2, #0
200009f0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
200009f2:	4b13      	ldr	r3, [pc, #76]	; (20000a40 <MX_SPI2_Init+0x74>)
200009f4:	2200      	movs	r2, #0
200009f6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
200009f8:	4b11      	ldr	r3, [pc, #68]	; (20000a40 <MX_SPI2_Init+0x74>)
200009fa:	f44f 7200 	mov.w	r2, #512	; 0x200
200009fe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
20000a00:	4b0f      	ldr	r3, [pc, #60]	; (20000a40 <MX_SPI2_Init+0x74>)
20000a02:	2208      	movs	r2, #8
20000a04:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
20000a06:	4b0e      	ldr	r3, [pc, #56]	; (20000a40 <MX_SPI2_Init+0x74>)
20000a08:	2200      	movs	r2, #0
20000a0a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
20000a0c:	4b0c      	ldr	r3, [pc, #48]	; (20000a40 <MX_SPI2_Init+0x74>)
20000a0e:	2200      	movs	r2, #0
20000a10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20000a12:	4b0b      	ldr	r3, [pc, #44]	; (20000a40 <MX_SPI2_Init+0x74>)
20000a14:	2200      	movs	r2, #0
20000a16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
20000a18:	4b09      	ldr	r3, [pc, #36]	; (20000a40 <MX_SPI2_Init+0x74>)
20000a1a:	2207      	movs	r2, #7
20000a1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
20000a1e:	4b08      	ldr	r3, [pc, #32]	; (20000a40 <MX_SPI2_Init+0x74>)
20000a20:	2200      	movs	r2, #0
20000a22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
20000a24:	4b06      	ldr	r3, [pc, #24]	; (20000a40 <MX_SPI2_Init+0x74>)
20000a26:	2208      	movs	r2, #8
20000a28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
20000a2a:	4805      	ldr	r0, [pc, #20]	; (20000a40 <MX_SPI2_Init+0x74>)
20000a2c:	f001 fb60 	bl	200020f0 <HAL_SPI_Init>
20000a30:	4603      	mov	r3, r0
20000a32:	2b00      	cmp	r3, #0
20000a34:	d001      	beq.n	20000a3a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
20000a36:	f7ff ffc4 	bl	200009c2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
20000a3a:	bf00      	nop
20000a3c:	bd80      	pop	{r7, pc}
20000a3e:	bf00      	nop
20000a40:	20000408 	.word	0x20000408
20000a44:	40003800 	.word	0x40003800

20000a48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
20000a48:	b580      	push	{r7, lr}
20000a4a:	b08a      	sub	sp, #40	; 0x28
20000a4c:	af00      	add	r7, sp, #0
20000a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
20000a50:	f107 0314 	add.w	r3, r7, #20
20000a54:	2200      	movs	r2, #0
20000a56:	601a      	str	r2, [r3, #0]
20000a58:	605a      	str	r2, [r3, #4]
20000a5a:	609a      	str	r2, [r3, #8]
20000a5c:	60da      	str	r2, [r3, #12]
20000a5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
20000a60:	687b      	ldr	r3, [r7, #4]
20000a62:	681b      	ldr	r3, [r3, #0]
20000a64:	4a17      	ldr	r2, [pc, #92]	; (20000ac4 <HAL_SPI_MspInit+0x7c>)
20000a66:	4293      	cmp	r3, r2
20000a68:	d128      	bne.n	20000abc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
20000a6a:	4b17      	ldr	r3, [pc, #92]	; (20000ac8 <HAL_SPI_MspInit+0x80>)
20000a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
20000a6e:	4a16      	ldr	r2, [pc, #88]	; (20000ac8 <HAL_SPI_MspInit+0x80>)
20000a70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
20000a74:	6593      	str	r3, [r2, #88]	; 0x58
20000a76:	4b14      	ldr	r3, [pc, #80]	; (20000ac8 <HAL_SPI_MspInit+0x80>)
20000a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
20000a7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
20000a7e:	613b      	str	r3, [r7, #16]
20000a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
20000a82:	4b11      	ldr	r3, [pc, #68]	; (20000ac8 <HAL_SPI_MspInit+0x80>)
20000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20000a86:	4a10      	ldr	r2, [pc, #64]	; (20000ac8 <HAL_SPI_MspInit+0x80>)
20000a88:	f043 0302 	orr.w	r3, r3, #2
20000a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
20000a8e:	4b0e      	ldr	r3, [pc, #56]	; (20000ac8 <HAL_SPI_MspInit+0x80>)
20000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
20000a92:	f003 0302 	and.w	r3, r3, #2
20000a96:	60fb      	str	r3, [r7, #12]
20000a98:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = FLASH_SCK_Pin|FLASH_MISO_Pin|FLASH_MOSI_Pin;
20000a9a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
20000a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
20000aa0:	2302      	movs	r3, #2
20000aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
20000aa4:	2302      	movs	r3, #2
20000aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
20000aa8:	2303      	movs	r3, #3
20000aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
20000aac:	2305      	movs	r3, #5
20000aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
20000ab0:	f107 0314 	add.w	r3, r7, #20
20000ab4:	4619      	mov	r1, r3
20000ab6:	4805      	ldr	r0, [pc, #20]	; (20000acc <HAL_SPI_MspInit+0x84>)
20000ab8:	f000 fbd0 	bl	2000125c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
20000abc:	bf00      	nop
20000abe:	3728      	adds	r7, #40	; 0x28
20000ac0:	46bd      	mov	sp, r7
20000ac2:	bd80      	pop	{r7, pc}
20000ac4:	40003800 	.word	0x40003800
20000ac8:	40021000 	.word	0x40021000
20000acc:	48000400 	.word	0x48000400

20000ad0 <sFLASH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
20000ad0:	b580      	push	{r7, lr}
20000ad2:	b084      	sub	sp, #16
20000ad4:	af00      	add	r7, sp, #0
20000ad6:	6078      	str	r0, [r7, #4]
	uint8_t txData[4];

	txData[0] = FLASH_CMD_SE;
20000ad8:	2320      	movs	r3, #32
20000ada:	733b      	strb	r3, [r7, #12]
	txData[1] = (SectorAddr & 0xFF0000) >> 16;	/* high nibble address byte to write to */
20000adc:	687b      	ldr	r3, [r7, #4]
20000ade:	0c1b      	lsrs	r3, r3, #16
20000ae0:	b2db      	uxtb	r3, r3
20000ae2:	737b      	strb	r3, [r7, #13]
	txData[2] = (SectorAddr & 0xFF00) >> 8;		/* medium nibble address byte to write to */
20000ae4:	687b      	ldr	r3, [r7, #4]
20000ae6:	0a1b      	lsrs	r3, r3, #8
20000ae8:	b2db      	uxtb	r3, r3
20000aea:	73bb      	strb	r3, [r7, #14]
	txData[3] = SectorAddr & 0xFF;				/* low nibble address byte to write to */
20000aec:	687b      	ldr	r3, [r7, #4]
20000aee:	b2db      	uxtb	r3, r3
20000af0:	73fb      	strb	r3, [r7, #15]

	/* Send write enable instruction */
	sFLASH_WriteEnable();
20000af2:	f000 f955 	bl	20000da0 <sFLASH_WriteEnable>

	/* Select the FLASH: Chip Select low */
	sFLASH_CS_LOW();
20000af6:	2200      	movs	r2, #0
20000af8:	f44f 7180 	mov.w	r1, #256	; 0x100
20000afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
20000b00:	f000 fd2e 	bl	20001560 <HAL_GPIO_WritePin>

	/* Send Sector Erase instruction */
	HAL_SPI_Transmit(&hspi2, txData, sizeof(txData), HAL_MAX_DELAY);
20000b04:	f107 010c 	add.w	r1, r7, #12
20000b08:	f04f 33ff 	mov.w	r3, #4294967295
20000b0c:	2204      	movs	r2, #4
20000b0e:	4808      	ldr	r0, [pc, #32]	; (20000b30 <sFLASH_EraseSector+0x60>)
20000b10:	f001 fb99 	bl	20002246 <HAL_SPI_Transmit>

	/* Deselect the FLASH: Chip Select high */
	sFLASH_CS_HIGH();
20000b14:	2201      	movs	r2, #1
20000b16:	f44f 7180 	mov.w	r1, #256	; 0x100
20000b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
20000b1e:	f000 fd1f 	bl	20001560 <HAL_GPIO_WritePin>

	/*!< Wait the end of Flash writing */
	sFLASH_WaitForWriteEnd();
20000b22:	f000 f95d 	bl	20000de0 <sFLASH_WaitForWriteEnd>
}
20000b26:	bf00      	nop
20000b28:	3710      	adds	r7, #16
20000b2a:	46bd      	mov	sp, r7
20000b2c:	bd80      	pop	{r7, pc}
20000b2e:	bf00      	nop
20000b30:	20000408 	.word	0x20000408

20000b34 <sFLASH_EraseChip>:
  * @brief  Erases the entire FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_EraseChip(void)
{
20000b34:	b580      	push	{r7, lr}
20000b36:	b082      	sub	sp, #8
20000b38:	af00      	add	r7, sp, #0
	uint8_t txData[1];

	txData[0] = FLASH_CMD_CE;
20000b3a:	2360      	movs	r3, #96	; 0x60
20000b3c:	713b      	strb	r3, [r7, #4]

	/* Send write enable instruction */
	sFLASH_WriteEnable();
20000b3e:	f000 f92f 	bl	20000da0 <sFLASH_WriteEnable>

	/* Select the FLASH: Chip Select low */
	sFLASH_CS_LOW();
20000b42:	2200      	movs	r2, #0
20000b44:	f44f 7180 	mov.w	r1, #256	; 0x100
20000b48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
20000b4c:	f000 fd08 	bl	20001560 <HAL_GPIO_WritePin>

	/* Send Bulk Erase instruction  */
	HAL_SPI_Transmit(&hspi2, txData, sizeof(txData), HAL_MAX_DELAY);
20000b50:	1d39      	adds	r1, r7, #4
20000b52:	f04f 33ff 	mov.w	r3, #4294967295
20000b56:	2201      	movs	r2, #1
20000b58:	4807      	ldr	r0, [pc, #28]	; (20000b78 <sFLASH_EraseChip+0x44>)
20000b5a:	f001 fb74 	bl	20002246 <HAL_SPI_Transmit>

	/* Deselect the FLASH: Chip Select high */
	sFLASH_CS_HIGH();
20000b5e:	2201      	movs	r2, #1
20000b60:	f44f 7180 	mov.w	r1, #256	; 0x100
20000b64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
20000b68:	f000 fcfa 	bl	20001560 <HAL_GPIO_WritePin>

	/* Wait the end of Flash writing */
	sFLASH_WaitForWriteEnd();
20000b6c:	f000 f938 	bl	20000de0 <sFLASH_WaitForWriteEnd>
}
20000b70:	bf00      	nop
20000b72:	3708      	adds	r7, #8
20000b74:	46bd      	mov	sp, r7
20000b76:	bd80      	pop	{r7, pc}
20000b78:	20000408 	.word	0x20000408

20000b7c <sFLASH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint32_t NumByteToWrite)
{
20000b7c:	b580      	push	{r7, lr}
20000b7e:	b086      	sub	sp, #24
20000b80:	af00      	add	r7, sp, #0
20000b82:	60f8      	str	r0, [r7, #12]
20000b84:	60b9      	str	r1, [r7, #8]
20000b86:	607a      	str	r2, [r7, #4]
	uint8_t txData[4];

	txData[0] = FLASH_CMD_PP;
20000b88:	2302      	movs	r3, #2
20000b8a:	753b      	strb	r3, [r7, #20]
	txData[1] = (WriteAddr & 0xFF0000) >> 16;	/* high nibble address byte to write to */
20000b8c:	68bb      	ldr	r3, [r7, #8]
20000b8e:	0c1b      	lsrs	r3, r3, #16
20000b90:	b2db      	uxtb	r3, r3
20000b92:	757b      	strb	r3, [r7, #21]
	txData[2] = (WriteAddr & 0xFF00) >> 8;		/* medium nibble address byte to write to */
20000b94:	68bb      	ldr	r3, [r7, #8]
20000b96:	0a1b      	lsrs	r3, r3, #8
20000b98:	b2db      	uxtb	r3, r3
20000b9a:	75bb      	strb	r3, [r7, #22]
	txData[3] = WriteAddr & 0xFF;				/* low nibble address byte to write to */
20000b9c:	68bb      	ldr	r3, [r7, #8]
20000b9e:	b2db      	uxtb	r3, r3
20000ba0:	75fb      	strb	r3, [r7, #23]

	/* Enable the write access to the FLASH */
	sFLASH_WriteEnable();
20000ba2:	f000 f8fd 	bl	20000da0 <sFLASH_WriteEnable>

	/* Select the FLASH: Chip Select low */
	sFLASH_CS_LOW();
20000ba6:	2200      	movs	r2, #0
20000ba8:	f44f 7180 	mov.w	r1, #256	; 0x100
20000bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
20000bb0:	f000 fcd6 	bl	20001560 <HAL_GPIO_WritePin>

	/* Send "Write to Memory " instruction */
	HAL_SPI_Transmit(&hspi2, txData, sizeof(txData), HAL_MAX_DELAY);
20000bb4:	f107 0114 	add.w	r1, r7, #20
20000bb8:	f04f 33ff 	mov.w	r3, #4294967295
20000bbc:	2204      	movs	r2, #4
20000bbe:	480c      	ldr	r0, [pc, #48]	; (20000bf0 <sFLASH_WritePage+0x74>)
20000bc0:	f001 fb41 	bl	20002246 <HAL_SPI_Transmit>

	/* Send data */
	HAL_SPI_Transmit(&hspi2, pBuffer, NumByteToWrite, HAL_MAX_DELAY);
20000bc4:	687b      	ldr	r3, [r7, #4]
20000bc6:	b29a      	uxth	r2, r3
20000bc8:	f04f 33ff 	mov.w	r3, #4294967295
20000bcc:	68f9      	ldr	r1, [r7, #12]
20000bce:	4808      	ldr	r0, [pc, #32]	; (20000bf0 <sFLASH_WritePage+0x74>)
20000bd0:	f001 fb39 	bl	20002246 <HAL_SPI_Transmit>

	/* Deselect the FLASH: Chip Select high */
	sFLASH_CS_HIGH();
20000bd4:	2201      	movs	r2, #1
20000bd6:	f44f 7180 	mov.w	r1, #256	; 0x100
20000bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
20000bde:	f000 fcbf 	bl	20001560 <HAL_GPIO_WritePin>

	/* Wait the end of Flash writing */
	sFLASH_WaitForWriteEnd();
20000be2:	f000 f8fd 	bl	20000de0 <sFLASH_WaitForWriteEnd>
}
20000be6:	bf00      	nop
20000be8:	3718      	adds	r7, #24
20000bea:	46bd      	mov	sp, r7
20000bec:	bd80      	pop	{r7, pc}
20000bee:	bf00      	nop
20000bf0:	20000408 	.word	0x20000408

20000bf4 <sFLASH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint32_t NumByteToRead)
{
20000bf4:	b580      	push	{r7, lr}
20000bf6:	b086      	sub	sp, #24
20000bf8:	af00      	add	r7, sp, #0
20000bfa:	60f8      	str	r0, [r7, #12]
20000bfc:	60b9      	str	r1, [r7, #8]
20000bfe:	607a      	str	r2, [r7, #4]
	uint8_t txData[4];

	txData[0] = FLASH_CMD_READ;
20000c00:	2303      	movs	r3, #3
20000c02:	753b      	strb	r3, [r7, #20]
	txData[1] = (ReadAddr & 0xFF0000) >> 16;	/* high nibble address byte to write to */
20000c04:	68bb      	ldr	r3, [r7, #8]
20000c06:	0c1b      	lsrs	r3, r3, #16
20000c08:	b2db      	uxtb	r3, r3
20000c0a:	757b      	strb	r3, [r7, #21]
	txData[2] = (ReadAddr & 0xFF00) >> 8;		/* medium nibble address byte to write to */
20000c0c:	68bb      	ldr	r3, [r7, #8]
20000c0e:	0a1b      	lsrs	r3, r3, #8
20000c10:	b2db      	uxtb	r3, r3
20000c12:	75bb      	strb	r3, [r7, #22]
	txData[3] = ReadAddr & 0xFF;				/* low nibble address byte to write to */
20000c14:	68bb      	ldr	r3, [r7, #8]
20000c16:	b2db      	uxtb	r3, r3
20000c18:	75fb      	strb	r3, [r7, #23]

	/* Select the FLASH: Chip Select low */
	sFLASH_CS_LOW();
20000c1a:	2200      	movs	r2, #0
20000c1c:	f44f 7180 	mov.w	r1, #256	; 0x100
20000c20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
20000c24:	f000 fc9c 	bl	20001560 <HAL_GPIO_WritePin>

	/* Send "Read from Memory " instruction */
	HAL_SPI_Transmit(&hspi2, txData, sizeof(txData), HAL_MAX_DELAY);
20000c28:	f107 0114 	add.w	r1, r7, #20
20000c2c:	f04f 33ff 	mov.w	r3, #4294967295
20000c30:	2204      	movs	r2, #4
20000c32:	480b      	ldr	r0, [pc, #44]	; (20000c60 <sFLASH_ReadBuffer+0x6c>)
20000c34:	f001 fb07 	bl	20002246 <HAL_SPI_Transmit>

	/* Read data from the FLASH */
	HAL_SPI_Receive(&hspi2, pBuffer, NumByteToRead, HAL_MAX_DELAY);
20000c38:	687b      	ldr	r3, [r7, #4]
20000c3a:	b29a      	uxth	r2, r3
20000c3c:	f04f 33ff 	mov.w	r3, #4294967295
20000c40:	68f9      	ldr	r1, [r7, #12]
20000c42:	4807      	ldr	r0, [pc, #28]	; (20000c60 <sFLASH_ReadBuffer+0x6c>)
20000c44:	f001 fc6d 	bl	20002522 <HAL_SPI_Receive>

	/* Deselect the FLASH: Chip Select high */
	sFLASH_CS_HIGH();
20000c48:	2201      	movs	r2, #1
20000c4a:	f44f 7180 	mov.w	r1, #256	; 0x100
20000c4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
20000c52:	f000 fc85 	bl	20001560 <HAL_GPIO_WritePin>
}
20000c56:	bf00      	nop
20000c58:	3718      	adds	r7, #24
20000c5a:	46bd      	mov	sp, r7
20000c5c:	bd80      	pop	{r7, pc}
20000c5e:	bf00      	nop
20000c60:	20000408 	.word	0x20000408

20000c64 <sFLASH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint32_t NumByteToWrite)
{
20000c64:	b580      	push	{r7, lr}
20000c66:	b08a      	sub	sp, #40	; 0x28
20000c68:	af00      	add	r7, sp, #0
20000c6a:	60f8      	str	r0, [r7, #12]
20000c6c:	60b9      	str	r1, [r7, #8]
20000c6e:	607a      	str	r2, [r7, #4]
	uint32_t NumOfPage = 0;
20000c70:	2300      	movs	r3, #0
20000c72:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t NumOfSingle = 0;
20000c74:	2300      	movs	r3, #0
20000c76:	623b      	str	r3, [r7, #32]
	uint32_t Addr = 0;
20000c78:	2300      	movs	r3, #0
20000c7a:	61fb      	str	r3, [r7, #28]
	uint32_t count = 0;
20000c7c:	2300      	movs	r3, #0
20000c7e:	61bb      	str	r3, [r7, #24]
	uint32_t temp = 0;
20000c80:	2300      	movs	r3, #0
20000c82:	617b      	str	r3, [r7, #20]

	Addr = WriteAddr % sFLASH_SPI_PAGE_SIZE;
20000c84:	68bb      	ldr	r3, [r7, #8]
20000c86:	b2db      	uxtb	r3, r3
20000c88:	61fb      	str	r3, [r7, #28]
	count = sFLASH_SPI_PAGE_SIZE - Addr;
20000c8a:	69fb      	ldr	r3, [r7, #28]
20000c8c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
20000c90:	61bb      	str	r3, [r7, #24]
	NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGE_SIZE;
20000c92:	687b      	ldr	r3, [r7, #4]
20000c94:	0a1b      	lsrs	r3, r3, #8
20000c96:	627b      	str	r3, [r7, #36]	; 0x24
	NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGE_SIZE;
20000c98:	687b      	ldr	r3, [r7, #4]
20000c9a:	b2db      	uxtb	r3, r3
20000c9c:	623b      	str	r3, [r7, #32]

	if (Addr == 0) /* WriteAddr is sFLASH_PAGESIZE aligned  */
20000c9e:	69fb      	ldr	r3, [r7, #28]
20000ca0:	2b00      	cmp	r3, #0
20000ca2:	d121      	bne.n	20000ce8 <sFLASH_WriteBuffer+0x84>
	{
		if (NumOfPage == 0) /* NumByteToWrite < sFLASH_PAGESIZE */
20000ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000ca6:	2b00      	cmp	r3, #0
20000ca8:	d113      	bne.n	20000cd2 <sFLASH_WriteBuffer+0x6e>
		{
			sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
20000caa:	687a      	ldr	r2, [r7, #4]
20000cac:	68b9      	ldr	r1, [r7, #8]
20000cae:	68f8      	ldr	r0, [r7, #12]
20000cb0:	f7ff ff64 	bl	20000b7c <sFLASH_WritePage>
			{
				sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
			}
		}
	}
}
20000cb4:	e06f      	b.n	20000d96 <sFLASH_WriteBuffer+0x132>
				sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGE_SIZE);
20000cb6:	f44f 7280 	mov.w	r2, #256	; 0x100
20000cba:	68b9      	ldr	r1, [r7, #8]
20000cbc:	68f8      	ldr	r0, [r7, #12]
20000cbe:	f7ff ff5d 	bl	20000b7c <sFLASH_WritePage>
				WriteAddr +=  sFLASH_SPI_PAGE_SIZE;
20000cc2:	68bb      	ldr	r3, [r7, #8]
20000cc4:	f503 7380 	add.w	r3, r3, #256	; 0x100
20000cc8:	60bb      	str	r3, [r7, #8]
				pBuffer += sFLASH_SPI_PAGE_SIZE;
20000cca:	68fb      	ldr	r3, [r7, #12]
20000ccc:	f503 7380 	add.w	r3, r3, #256	; 0x100
20000cd0:	60fb      	str	r3, [r7, #12]
			while (NumOfPage--)
20000cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000cd4:	1e5a      	subs	r2, r3, #1
20000cd6:	627a      	str	r2, [r7, #36]	; 0x24
20000cd8:	2b00      	cmp	r3, #0
20000cda:	d1ec      	bne.n	20000cb6 <sFLASH_WriteBuffer+0x52>
			sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
20000cdc:	6a3a      	ldr	r2, [r7, #32]
20000cde:	68b9      	ldr	r1, [r7, #8]
20000ce0:	68f8      	ldr	r0, [r7, #12]
20000ce2:	f7ff ff4b 	bl	20000b7c <sFLASH_WritePage>
}
20000ce6:	e056      	b.n	20000d96 <sFLASH_WriteBuffer+0x132>
		if (NumOfPage == 0) /* NumByteToWrite < sFLASH_PAGESIZE */
20000ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000cea:	2b00      	cmp	r3, #0
20000cec:	d120      	bne.n	20000d30 <sFLASH_WriteBuffer+0xcc>
			if (NumOfSingle > count) /* (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
20000cee:	6a3a      	ldr	r2, [r7, #32]
20000cf0:	69bb      	ldr	r3, [r7, #24]
20000cf2:	429a      	cmp	r2, r3
20000cf4:	d916      	bls.n	20000d24 <sFLASH_WriteBuffer+0xc0>
				temp = NumOfSingle - count;
20000cf6:	6a3a      	ldr	r2, [r7, #32]
20000cf8:	69bb      	ldr	r3, [r7, #24]
20000cfa:	1ad3      	subs	r3, r2, r3
20000cfc:	617b      	str	r3, [r7, #20]
				sFLASH_WritePage(pBuffer, WriteAddr, count);
20000cfe:	69ba      	ldr	r2, [r7, #24]
20000d00:	68b9      	ldr	r1, [r7, #8]
20000d02:	68f8      	ldr	r0, [r7, #12]
20000d04:	f7ff ff3a 	bl	20000b7c <sFLASH_WritePage>
				WriteAddr +=  count;
20000d08:	68ba      	ldr	r2, [r7, #8]
20000d0a:	69bb      	ldr	r3, [r7, #24]
20000d0c:	4413      	add	r3, r2
20000d0e:	60bb      	str	r3, [r7, #8]
				pBuffer += count;
20000d10:	68fa      	ldr	r2, [r7, #12]
20000d12:	69bb      	ldr	r3, [r7, #24]
20000d14:	4413      	add	r3, r2
20000d16:	60fb      	str	r3, [r7, #12]
				sFLASH_WritePage(pBuffer, WriteAddr, temp);
20000d18:	697a      	ldr	r2, [r7, #20]
20000d1a:	68b9      	ldr	r1, [r7, #8]
20000d1c:	68f8      	ldr	r0, [r7, #12]
20000d1e:	f7ff ff2d 	bl	20000b7c <sFLASH_WritePage>
}
20000d22:	e038      	b.n	20000d96 <sFLASH_WriteBuffer+0x132>
				sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
20000d24:	687a      	ldr	r2, [r7, #4]
20000d26:	68b9      	ldr	r1, [r7, #8]
20000d28:	68f8      	ldr	r0, [r7, #12]
20000d2a:	f7ff ff27 	bl	20000b7c <sFLASH_WritePage>
}
20000d2e:	e032      	b.n	20000d96 <sFLASH_WriteBuffer+0x132>
			NumByteToWrite -= count;
20000d30:	687a      	ldr	r2, [r7, #4]
20000d32:	69bb      	ldr	r3, [r7, #24]
20000d34:	1ad3      	subs	r3, r2, r3
20000d36:	607b      	str	r3, [r7, #4]
			NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGE_SIZE;
20000d38:	687b      	ldr	r3, [r7, #4]
20000d3a:	0a1b      	lsrs	r3, r3, #8
20000d3c:	627b      	str	r3, [r7, #36]	; 0x24
			NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGE_SIZE;
20000d3e:	687b      	ldr	r3, [r7, #4]
20000d40:	b2db      	uxtb	r3, r3
20000d42:	623b      	str	r3, [r7, #32]
			sFLASH_WritePage(pBuffer, WriteAddr, count);
20000d44:	69ba      	ldr	r2, [r7, #24]
20000d46:	68b9      	ldr	r1, [r7, #8]
20000d48:	68f8      	ldr	r0, [r7, #12]
20000d4a:	f7ff ff17 	bl	20000b7c <sFLASH_WritePage>
			WriteAddr +=  count;
20000d4e:	68ba      	ldr	r2, [r7, #8]
20000d50:	69bb      	ldr	r3, [r7, #24]
20000d52:	4413      	add	r3, r2
20000d54:	60bb      	str	r3, [r7, #8]
			pBuffer += count;
20000d56:	68fa      	ldr	r2, [r7, #12]
20000d58:	69bb      	ldr	r3, [r7, #24]
20000d5a:	4413      	add	r3, r2
20000d5c:	60fb      	str	r3, [r7, #12]
			while (NumOfPage--)
20000d5e:	e00d      	b.n	20000d7c <sFLASH_WriteBuffer+0x118>
				sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGE_SIZE);
20000d60:	f44f 7280 	mov.w	r2, #256	; 0x100
20000d64:	68b9      	ldr	r1, [r7, #8]
20000d66:	68f8      	ldr	r0, [r7, #12]
20000d68:	f7ff ff08 	bl	20000b7c <sFLASH_WritePage>
				WriteAddr +=  sFLASH_SPI_PAGE_SIZE;
20000d6c:	68bb      	ldr	r3, [r7, #8]
20000d6e:	f503 7380 	add.w	r3, r3, #256	; 0x100
20000d72:	60bb      	str	r3, [r7, #8]
				pBuffer += sFLASH_SPI_PAGE_SIZE;
20000d74:	68fb      	ldr	r3, [r7, #12]
20000d76:	f503 7380 	add.w	r3, r3, #256	; 0x100
20000d7a:	60fb      	str	r3, [r7, #12]
			while (NumOfPage--)
20000d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20000d7e:	1e5a      	subs	r2, r3, #1
20000d80:	627a      	str	r2, [r7, #36]	; 0x24
20000d82:	2b00      	cmp	r3, #0
20000d84:	d1ec      	bne.n	20000d60 <sFLASH_WriteBuffer+0xfc>
			if (NumOfSingle != 0)
20000d86:	6a3b      	ldr	r3, [r7, #32]
20000d88:	2b00      	cmp	r3, #0
20000d8a:	d004      	beq.n	20000d96 <sFLASH_WriteBuffer+0x132>
				sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
20000d8c:	6a3a      	ldr	r2, [r7, #32]
20000d8e:	68b9      	ldr	r1, [r7, #8]
20000d90:	68f8      	ldr	r0, [r7, #12]
20000d92:	f7ff fef3 	bl	20000b7c <sFLASH_WritePage>
}
20000d96:	bf00      	nop
20000d98:	3728      	adds	r7, #40	; 0x28
20000d9a:	46bd      	mov	sp, r7
20000d9c:	bd80      	pop	{r7, pc}
	...

20000da0 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
20000da0:	b580      	push	{r7, lr}
20000da2:	b082      	sub	sp, #8
20000da4:	af00      	add	r7, sp, #0
	uint8_t txData[1];

	txData[0] = FLASH_CMD_WREN;
20000da6:	2306      	movs	r3, #6
20000da8:	713b      	strb	r3, [r7, #4]

	/* Select the FLASH: Chip Select low */
	sFLASH_CS_LOW();
20000daa:	2200      	movs	r2, #0
20000dac:	f44f 7180 	mov.w	r1, #256	; 0x100
20000db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
20000db4:	f000 fbd4 	bl	20001560 <HAL_GPIO_WritePin>

	/* Send "Write Enable" instruction */
	HAL_SPI_Transmit(&hspi2, txData, sizeof(txData), HAL_MAX_DELAY);
20000db8:	1d39      	adds	r1, r7, #4
20000dba:	f04f 33ff 	mov.w	r3, #4294967295
20000dbe:	2201      	movs	r2, #1
20000dc0:	4806      	ldr	r0, [pc, #24]	; (20000ddc <sFLASH_WriteEnable+0x3c>)
20000dc2:	f001 fa40 	bl	20002246 <HAL_SPI_Transmit>

	/* Deselect the FLASH: Chip Select high */
	sFLASH_CS_HIGH();
20000dc6:	2201      	movs	r2, #1
20000dc8:	f44f 7180 	mov.w	r1, #256	; 0x100
20000dcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
20000dd0:	f000 fbc6 	bl	20001560 <HAL_GPIO_WritePin>
}
20000dd4:	bf00      	nop
20000dd6:	3708      	adds	r7, #8
20000dd8:	46bd      	mov	sp, r7
20000dda:	bd80      	pop	{r7, pc}
20000ddc:	20000408 	.word	0x20000408

20000de0 <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write operation has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
20000de0:	b580      	push	{r7, lr}
20000de2:	b082      	sub	sp, #8
20000de4:	af00      	add	r7, sp, #0
	uint8_t txData[1];
	uint8_t rxData[1];

	txData[0] = FLASH_CMD_RDSR;
20000de6:	2305      	movs	r3, #5
20000de8:	713b      	strb	r3, [r7, #4]

	/* Select the FLASH: Chip Select low */
	sFLASH_CS_LOW();
20000dea:	2200      	movs	r2, #0
20000dec:	f44f 7180 	mov.w	r1, #256	; 0x100
20000df0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
20000df4:	f000 fbb4 	bl	20001560 <HAL_GPIO_WritePin>

	/* Send "Read Status Register" instruction */
	HAL_SPI_Transmit(&hspi2, txData, sizeof(txData), HAL_MAX_DELAY);
20000df8:	1d39      	adds	r1, r7, #4
20000dfa:	f04f 33ff 	mov.w	r3, #4294967295
20000dfe:	2201      	movs	r2, #1
20000e00:	480c      	ldr	r0, [pc, #48]	; (20000e34 <sFLASH_WaitForWriteEnd+0x54>)
20000e02:	f001 fa20 	bl	20002246 <HAL_SPI_Transmit>

	/* Loop as long as the memory is busy with a write cycle */
	do
	{
		/* Receive "Read Status Register" value */
		HAL_SPI_Receive(&hspi2, rxData, sizeof(rxData), HAL_MAX_DELAY);
20000e06:	4639      	mov	r1, r7
20000e08:	f04f 33ff 	mov.w	r3, #4294967295
20000e0c:	2201      	movs	r2, #1
20000e0e:	4809      	ldr	r0, [pc, #36]	; (20000e34 <sFLASH_WaitForWriteEnd+0x54>)
20000e10:	f001 fb87 	bl	20002522 <HAL_SPI_Receive>
	}
	while ((rxData[0] & FLASH_WIP_MASK) == FLASH_WIP_MASK); /* Write in progress */
20000e14:	783b      	ldrb	r3, [r7, #0]
20000e16:	f003 0301 	and.w	r3, r3, #1
20000e1a:	2b00      	cmp	r3, #0
20000e1c:	d1f3      	bne.n	20000e06 <sFLASH_WaitForWriteEnd+0x26>

	/* Deselect the FLASH: Chip Select high */
	sFLASH_CS_HIGH();
20000e1e:	2201      	movs	r2, #1
20000e20:	f44f 7180 	mov.w	r1, #256	; 0x100
20000e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
20000e28:	f000 fb9a 	bl	20001560 <HAL_GPIO_WritePin>
}
20000e2c:	bf00      	nop
20000e2e:	3708      	adds	r7, #8
20000e30:	46bd      	mov	sp, r7
20000e32:	bd80      	pop	{r7, pc}
20000e34:	20000408 	.word	0x20000408

20000e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
20000e38:	b580      	push	{r7, lr}
20000e3a:	b082      	sub	sp, #8
20000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
20000e3e:	4b0f      	ldr	r3, [pc, #60]	; (20000e7c <HAL_MspInit+0x44>)
20000e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
20000e42:	4a0e      	ldr	r2, [pc, #56]	; (20000e7c <HAL_MspInit+0x44>)
20000e44:	f043 0301 	orr.w	r3, r3, #1
20000e48:	6613      	str	r3, [r2, #96]	; 0x60
20000e4a:	4b0c      	ldr	r3, [pc, #48]	; (20000e7c <HAL_MspInit+0x44>)
20000e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
20000e4e:	f003 0301 	and.w	r3, r3, #1
20000e52:	607b      	str	r3, [r7, #4]
20000e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
20000e56:	4b09      	ldr	r3, [pc, #36]	; (20000e7c <HAL_MspInit+0x44>)
20000e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
20000e5a:	4a08      	ldr	r2, [pc, #32]	; (20000e7c <HAL_MspInit+0x44>)
20000e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
20000e60:	6593      	str	r3, [r2, #88]	; 0x58
20000e62:	4b06      	ldr	r3, [pc, #24]	; (20000e7c <HAL_MspInit+0x44>)
20000e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
20000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
20000e6a:	603b      	str	r3, [r7, #0]
20000e6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
20000e6e:	f000 fc33 	bl	200016d8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
20000e72:	bf00      	nop
20000e74:	3708      	adds	r7, #8
20000e76:	46bd      	mov	sp, r7
20000e78:	bd80      	pop	{r7, pc}
20000e7a:	bf00      	nop
20000e7c:	40021000 	.word	0x40021000

20000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
20000e80:	b480      	push	{r7}
20000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
20000e84:	e7fe      	b.n	20000e84 <NMI_Handler+0x4>

20000e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
20000e86:	b480      	push	{r7}
20000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
20000e8a:	e7fe      	b.n	20000e8a <HardFault_Handler+0x4>

20000e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
20000e8c:	b480      	push	{r7}
20000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
20000e90:	e7fe      	b.n	20000e90 <MemManage_Handler+0x4>

20000e92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
20000e92:	b480      	push	{r7}
20000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
20000e96:	e7fe      	b.n	20000e96 <BusFault_Handler+0x4>

20000e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
20000e98:	b480      	push	{r7}
20000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
20000e9c:	e7fe      	b.n	20000e9c <UsageFault_Handler+0x4>

20000e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
20000e9e:	b480      	push	{r7}
20000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
20000ea2:	bf00      	nop
20000ea4:	46bd      	mov	sp, r7
20000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
20000eaa:	4770      	bx	lr

20000eac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
20000eac:	b480      	push	{r7}
20000eae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
20000eb0:	bf00      	nop
20000eb2:	46bd      	mov	sp, r7
20000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
20000eb8:	4770      	bx	lr

20000eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
20000eba:	b480      	push	{r7}
20000ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
20000ebe:	bf00      	nop
20000ec0:	46bd      	mov	sp, r7
20000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
20000ec6:	4770      	bx	lr

20000ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
20000ec8:	b580      	push	{r7, lr}
20000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
20000ecc:	f000 f8c4 	bl	20001058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
20000ed0:	bf00      	nop
20000ed2:	bd80      	pop	{r7, pc}

20000ed4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
20000ed4:	b480      	push	{r7}
20000ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
20000ed8:	4b06      	ldr	r3, [pc, #24]	; (20000ef4 <SystemInit+0x20>)
20000eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
20000ede:	4a05      	ldr	r2, [pc, #20]	; (20000ef4 <SystemInit+0x20>)
20000ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
20000ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
20000ee8:	bf00      	nop
20000eea:	46bd      	mov	sp, r7
20000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
20000ef0:	4770      	bx	lr
20000ef2:	bf00      	nop
20000ef4:	e000ed00 	.word	0xe000ed00

20000ef8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
20000ef8:	480d      	ldr	r0, [pc, #52]	; (20000f30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
20000efa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
20000efc:	480d      	ldr	r0, [pc, #52]	; (20000f34 <LoopForever+0x6>)
  ldr r1, =_edata
20000efe:	490e      	ldr	r1, [pc, #56]	; (20000f38 <LoopForever+0xa>)
  ldr r2, =_sidata
20000f00:	4a0e      	ldr	r2, [pc, #56]	; (20000f3c <LoopForever+0xe>)
  movs r3, #0
20000f02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
20000f04:	e002      	b.n	20000f0c <LoopCopyDataInit>

20000f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
20000f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
20000f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
20000f0a:	3304      	adds	r3, #4

20000f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
20000f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
20000f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
20000f10:	d3f9      	bcc.n	20000f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
20000f12:	4a0b      	ldr	r2, [pc, #44]	; (20000f40 <LoopForever+0x12>)
  ldr r4, =_ebss
20000f14:	4c0b      	ldr	r4, [pc, #44]	; (20000f44 <LoopForever+0x16>)
  movs r3, #0
20000f16:	2300      	movs	r3, #0
  b LoopFillZerobss
20000f18:	e001      	b.n	20000f1e <LoopFillZerobss>

20000f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
20000f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
20000f1c:	3204      	adds	r2, #4

20000f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
20000f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
20000f20:	d3fb      	bcc.n	20000f1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
20000f22:	f7ff ffd7 	bl	20000ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
20000f26:	f001 fffb 	bl	20002f20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
20000f2a:	f7ff fcf3 	bl	20000914 <main>

20000f2e <LoopForever>:

LoopForever:
    b LoopForever
20000f2e:	e7fe      	b.n	20000f2e <LoopForever>
  ldr   r0, =_estack
20000f30:	20008000 	.word	0x20008000
  ldr r0, =_sdata
20000f34:	200003e0 	.word	0x200003e0
  ldr r1, =_edata
20000f38:	200003ec 	.word	0x200003ec
  ldr r2, =_sidata
20000f3c:	200003e0 	.word	0x200003e0
  ldr r2, =_sbss
20000f40:	200003ec 	.word	0x200003ec
  ldr r4, =_ebss
20000f44:	20000470 	.word	0x20000470

20000f48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
20000f48:	e7fe      	b.n	20000f48 <ADC1_2_IRQHandler>

20000f4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
20000f4a:	b580      	push	{r7, lr}
20000f4c:	b082      	sub	sp, #8
20000f4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
20000f50:	2300      	movs	r3, #0
20000f52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
20000f54:	2003      	movs	r0, #3
20000f56:	f000 f94f 	bl	200011f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
20000f5a:	2000      	movs	r0, #0
20000f5c:	f000 f842 	bl	20000fe4 <HAL_InitTick>
20000f60:	4603      	mov	r3, r0
20000f62:	2b00      	cmp	r3, #0
20000f64:	d002      	beq.n	20000f6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
20000f66:	2301      	movs	r3, #1
20000f68:	71fb      	strb	r3, [r7, #7]
20000f6a:	e001      	b.n	20000f70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
20000f6c:	f7ff ff64 	bl	20000e38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
20000f70:	79fb      	ldrb	r3, [r7, #7]

}
20000f72:	4618      	mov	r0, r3
20000f74:	3708      	adds	r7, #8
20000f76:	46bd      	mov	sp, r7
20000f78:	bd80      	pop	{r7, pc}
	...

20000f7c <HAL_DeInit>:
  * @brief  This function de-initializes common part of the HAL and stops the source of time base.
  * @note   This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
20000f7c:	b580      	push	{r7, lr}
20000f7e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
20000f80:	4b13      	ldr	r3, [pc, #76]	; (20000fd0 <HAL_DeInit+0x54>)
20000f82:	f04f 32ff 	mov.w	r2, #4294967295
20000f86:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_RCC_APB1_RELEASE_RESET();
20000f88:	4b11      	ldr	r3, [pc, #68]	; (20000fd0 <HAL_DeInit+0x54>)
20000f8a:	2200      	movs	r2, #0
20000f8c:	639a      	str	r2, [r3, #56]	; 0x38

  __HAL_RCC_APB2_FORCE_RESET();
20000f8e:	4b10      	ldr	r3, [pc, #64]	; (20000fd0 <HAL_DeInit+0x54>)
20000f90:	f04f 32ff 	mov.w	r2, #4294967295
20000f94:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_RCC_APB2_RELEASE_RESET();
20000f96:	4b0e      	ldr	r3, [pc, #56]	; (20000fd0 <HAL_DeInit+0x54>)
20000f98:	2200      	movs	r2, #0
20000f9a:	641a      	str	r2, [r3, #64]	; 0x40

  __HAL_RCC_AHB1_FORCE_RESET();
20000f9c:	4b0c      	ldr	r3, [pc, #48]	; (20000fd0 <HAL_DeInit+0x54>)
20000f9e:	f04f 32ff 	mov.w	r2, #4294967295
20000fa2:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB1_RELEASE_RESET();
20000fa4:	4b0a      	ldr	r3, [pc, #40]	; (20000fd0 <HAL_DeInit+0x54>)
20000fa6:	2200      	movs	r2, #0
20000fa8:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_AHB2_FORCE_RESET();
20000faa:	4b09      	ldr	r3, [pc, #36]	; (20000fd0 <HAL_DeInit+0x54>)
20000fac:	f04f 32ff 	mov.w	r2, #4294967295
20000fb0:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_AHB2_RELEASE_RESET();
20000fb2:	4b07      	ldr	r3, [pc, #28]	; (20000fd0 <HAL_DeInit+0x54>)
20000fb4:	2200      	movs	r2, #0
20000fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_AHB3_FORCE_RESET();
20000fb8:	4b05      	ldr	r3, [pc, #20]	; (20000fd0 <HAL_DeInit+0x54>)
20000fba:	f04f 32ff 	mov.w	r2, #4294967295
20000fbe:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_AHB3_RELEASE_RESET();
20000fc0:	4b03      	ldr	r3, [pc, #12]	; (20000fd0 <HAL_DeInit+0x54>)
20000fc2:	2200      	movs	r2, #0
20000fc4:	631a      	str	r2, [r3, #48]	; 0x30

  /* De-Init the low level hardware */
  HAL_MspDeInit();
20000fc6:	f000 f805 	bl	20000fd4 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
20000fca:	2300      	movs	r3, #0
}
20000fcc:	4618      	mov	r0, r3
20000fce:	bd80      	pop	{r7, pc}
20000fd0:	40021000 	.word	0x40021000

20000fd4 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
20000fd4:	b480      	push	{r7}
20000fd6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
20000fd8:	bf00      	nop
20000fda:	46bd      	mov	sp, r7
20000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
20000fe0:	4770      	bx	lr
	...

20000fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
20000fe4:	b580      	push	{r7, lr}
20000fe6:	b084      	sub	sp, #16
20000fe8:	af00      	add	r7, sp, #0
20000fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
20000fec:	2300      	movs	r3, #0
20000fee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
20000ff0:	4b16      	ldr	r3, [pc, #88]	; (2000104c <HAL_InitTick+0x68>)
20000ff2:	681b      	ldr	r3, [r3, #0]
20000ff4:	2b00      	cmp	r3, #0
20000ff6:	d022      	beq.n	2000103e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
20000ff8:	4b15      	ldr	r3, [pc, #84]	; (20001050 <HAL_InitTick+0x6c>)
20000ffa:	681a      	ldr	r2, [r3, #0]
20000ffc:	4b13      	ldr	r3, [pc, #76]	; (2000104c <HAL_InitTick+0x68>)
20000ffe:	681b      	ldr	r3, [r3, #0]
20001000:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
20001004:	fbb1 f3f3 	udiv	r3, r1, r3
20001008:	fbb2 f3f3 	udiv	r3, r2, r3
2000100c:	4618      	mov	r0, r3
2000100e:	f000 f918 	bl	20001242 <HAL_SYSTICK_Config>
20001012:	4603      	mov	r3, r0
20001014:	2b00      	cmp	r3, #0
20001016:	d10f      	bne.n	20001038 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
20001018:	687b      	ldr	r3, [r7, #4]
2000101a:	2b0f      	cmp	r3, #15
2000101c:	d809      	bhi.n	20001032 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
2000101e:	2200      	movs	r2, #0
20001020:	6879      	ldr	r1, [r7, #4]
20001022:	f04f 30ff 	mov.w	r0, #4294967295
20001026:	f000 f8f2 	bl	2000120e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
2000102a:	4a0a      	ldr	r2, [pc, #40]	; (20001054 <HAL_InitTick+0x70>)
2000102c:	687b      	ldr	r3, [r7, #4]
2000102e:	6013      	str	r3, [r2, #0]
20001030:	e007      	b.n	20001042 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
20001032:	2301      	movs	r3, #1
20001034:	73fb      	strb	r3, [r7, #15]
20001036:	e004      	b.n	20001042 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
20001038:	2301      	movs	r3, #1
2000103a:	73fb      	strb	r3, [r7, #15]
2000103c:	e001      	b.n	20001042 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
2000103e:	2301      	movs	r3, #1
20001040:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
20001042:	7bfb      	ldrb	r3, [r7, #15]
}
20001044:	4618      	mov	r0, r3
20001046:	3710      	adds	r7, #16
20001048:	46bd      	mov	sp, r7
2000104a:	bd80      	pop	{r7, pc}
2000104c:	200003e8 	.word	0x200003e8
20001050:	200003e0 	.word	0x200003e0
20001054:	200003e4 	.word	0x200003e4

20001058 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
20001058:	b480      	push	{r7}
2000105a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
2000105c:	4b05      	ldr	r3, [pc, #20]	; (20001074 <HAL_IncTick+0x1c>)
2000105e:	681a      	ldr	r2, [r3, #0]
20001060:	4b05      	ldr	r3, [pc, #20]	; (20001078 <HAL_IncTick+0x20>)
20001062:	681b      	ldr	r3, [r3, #0]
20001064:	4413      	add	r3, r2
20001066:	4a03      	ldr	r2, [pc, #12]	; (20001074 <HAL_IncTick+0x1c>)
20001068:	6013      	str	r3, [r2, #0]
}
2000106a:	bf00      	nop
2000106c:	46bd      	mov	sp, r7
2000106e:	f85d 7b04 	ldr.w	r7, [sp], #4
20001072:	4770      	bx	lr
20001074:	2000046c 	.word	0x2000046c
20001078:	200003e8 	.word	0x200003e8

2000107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
2000107c:	b480      	push	{r7}
2000107e:	af00      	add	r7, sp, #0
  return uwTick;
20001080:	4b03      	ldr	r3, [pc, #12]	; (20001090 <HAL_GetTick+0x14>)
20001082:	681b      	ldr	r3, [r3, #0]
}
20001084:	4618      	mov	r0, r3
20001086:	46bd      	mov	sp, r7
20001088:	f85d 7b04 	ldr.w	r7, [sp], #4
2000108c:	4770      	bx	lr
2000108e:	bf00      	nop
20001090:	2000046c 	.word	0x2000046c

20001094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
20001094:	b480      	push	{r7}
20001096:	b085      	sub	sp, #20
20001098:	af00      	add	r7, sp, #0
2000109a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
2000109c:	687b      	ldr	r3, [r7, #4]
2000109e:	f003 0307 	and.w	r3, r3, #7
200010a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
200010a4:	4b0c      	ldr	r3, [pc, #48]	; (200010d8 <__NVIC_SetPriorityGrouping+0x44>)
200010a6:	68db      	ldr	r3, [r3, #12]
200010a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
200010aa:	68ba      	ldr	r2, [r7, #8]
200010ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
200010b0:	4013      	ands	r3, r2
200010b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
200010b4:	68fb      	ldr	r3, [r7, #12]
200010b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
200010b8:	68bb      	ldr	r3, [r7, #8]
200010ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
200010bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
200010c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
200010c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
200010c6:	4a04      	ldr	r2, [pc, #16]	; (200010d8 <__NVIC_SetPriorityGrouping+0x44>)
200010c8:	68bb      	ldr	r3, [r7, #8]
200010ca:	60d3      	str	r3, [r2, #12]
}
200010cc:	bf00      	nop
200010ce:	3714      	adds	r7, #20
200010d0:	46bd      	mov	sp, r7
200010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
200010d6:	4770      	bx	lr
200010d8:	e000ed00 	.word	0xe000ed00

200010dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
200010dc:	b480      	push	{r7}
200010de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
200010e0:	4b04      	ldr	r3, [pc, #16]	; (200010f4 <__NVIC_GetPriorityGrouping+0x18>)
200010e2:	68db      	ldr	r3, [r3, #12]
200010e4:	0a1b      	lsrs	r3, r3, #8
200010e6:	f003 0307 	and.w	r3, r3, #7
}
200010ea:	4618      	mov	r0, r3
200010ec:	46bd      	mov	sp, r7
200010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
200010f2:	4770      	bx	lr
200010f4:	e000ed00 	.word	0xe000ed00

200010f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
200010f8:	b480      	push	{r7}
200010fa:	b083      	sub	sp, #12
200010fc:	af00      	add	r7, sp, #0
200010fe:	4603      	mov	r3, r0
20001100:	6039      	str	r1, [r7, #0]
20001102:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
20001104:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001108:	2b00      	cmp	r3, #0
2000110a:	db0a      	blt.n	20001122 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
2000110c:	683b      	ldr	r3, [r7, #0]
2000110e:	b2da      	uxtb	r2, r3
20001110:	490c      	ldr	r1, [pc, #48]	; (20001144 <__NVIC_SetPriority+0x4c>)
20001112:	f997 3007 	ldrsb.w	r3, [r7, #7]
20001116:	0112      	lsls	r2, r2, #4
20001118:	b2d2      	uxtb	r2, r2
2000111a:	440b      	add	r3, r1
2000111c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
20001120:	e00a      	b.n	20001138 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
20001122:	683b      	ldr	r3, [r7, #0]
20001124:	b2da      	uxtb	r2, r3
20001126:	4908      	ldr	r1, [pc, #32]	; (20001148 <__NVIC_SetPriority+0x50>)
20001128:	79fb      	ldrb	r3, [r7, #7]
2000112a:	f003 030f 	and.w	r3, r3, #15
2000112e:	3b04      	subs	r3, #4
20001130:	0112      	lsls	r2, r2, #4
20001132:	b2d2      	uxtb	r2, r2
20001134:	440b      	add	r3, r1
20001136:	761a      	strb	r2, [r3, #24]
}
20001138:	bf00      	nop
2000113a:	370c      	adds	r7, #12
2000113c:	46bd      	mov	sp, r7
2000113e:	f85d 7b04 	ldr.w	r7, [sp], #4
20001142:	4770      	bx	lr
20001144:	e000e100 	.word	0xe000e100
20001148:	e000ed00 	.word	0xe000ed00

2000114c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
2000114c:	b480      	push	{r7}
2000114e:	b089      	sub	sp, #36	; 0x24
20001150:	af00      	add	r7, sp, #0
20001152:	60f8      	str	r0, [r7, #12]
20001154:	60b9      	str	r1, [r7, #8]
20001156:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
20001158:	68fb      	ldr	r3, [r7, #12]
2000115a:	f003 0307 	and.w	r3, r3, #7
2000115e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
20001160:	69fb      	ldr	r3, [r7, #28]
20001162:	f1c3 0307 	rsb	r3, r3, #7
20001166:	2b04      	cmp	r3, #4
20001168:	bf28      	it	cs
2000116a:	2304      	movcs	r3, #4
2000116c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
2000116e:	69fb      	ldr	r3, [r7, #28]
20001170:	3304      	adds	r3, #4
20001172:	2b06      	cmp	r3, #6
20001174:	d902      	bls.n	2000117c <NVIC_EncodePriority+0x30>
20001176:	69fb      	ldr	r3, [r7, #28]
20001178:	3b03      	subs	r3, #3
2000117a:	e000      	b.n	2000117e <NVIC_EncodePriority+0x32>
2000117c:	2300      	movs	r3, #0
2000117e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
20001180:	f04f 32ff 	mov.w	r2, #4294967295
20001184:	69bb      	ldr	r3, [r7, #24]
20001186:	fa02 f303 	lsl.w	r3, r2, r3
2000118a:	43da      	mvns	r2, r3
2000118c:	68bb      	ldr	r3, [r7, #8]
2000118e:	401a      	ands	r2, r3
20001190:	697b      	ldr	r3, [r7, #20]
20001192:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
20001194:	f04f 31ff 	mov.w	r1, #4294967295
20001198:	697b      	ldr	r3, [r7, #20]
2000119a:	fa01 f303 	lsl.w	r3, r1, r3
2000119e:	43d9      	mvns	r1, r3
200011a0:	687b      	ldr	r3, [r7, #4]
200011a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
200011a4:	4313      	orrs	r3, r2
         );
}
200011a6:	4618      	mov	r0, r3
200011a8:	3724      	adds	r7, #36	; 0x24
200011aa:	46bd      	mov	sp, r7
200011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
200011b0:	4770      	bx	lr
	...

200011b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
200011b4:	b580      	push	{r7, lr}
200011b6:	b082      	sub	sp, #8
200011b8:	af00      	add	r7, sp, #0
200011ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
200011bc:	687b      	ldr	r3, [r7, #4]
200011be:	3b01      	subs	r3, #1
200011c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
200011c4:	d301      	bcc.n	200011ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
200011c6:	2301      	movs	r3, #1
200011c8:	e00f      	b.n	200011ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
200011ca:	4a0a      	ldr	r2, [pc, #40]	; (200011f4 <SysTick_Config+0x40>)
200011cc:	687b      	ldr	r3, [r7, #4]
200011ce:	3b01      	subs	r3, #1
200011d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
200011d2:	210f      	movs	r1, #15
200011d4:	f04f 30ff 	mov.w	r0, #4294967295
200011d8:	f7ff ff8e 	bl	200010f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
200011dc:	4b05      	ldr	r3, [pc, #20]	; (200011f4 <SysTick_Config+0x40>)
200011de:	2200      	movs	r2, #0
200011e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
200011e2:	4b04      	ldr	r3, [pc, #16]	; (200011f4 <SysTick_Config+0x40>)
200011e4:	2207      	movs	r2, #7
200011e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
200011e8:	2300      	movs	r3, #0
}
200011ea:	4618      	mov	r0, r3
200011ec:	3708      	adds	r7, #8
200011ee:	46bd      	mov	sp, r7
200011f0:	bd80      	pop	{r7, pc}
200011f2:	bf00      	nop
200011f4:	e000e010 	.word	0xe000e010

200011f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
200011f8:	b580      	push	{r7, lr}
200011fa:	b082      	sub	sp, #8
200011fc:	af00      	add	r7, sp, #0
200011fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
20001200:	6878      	ldr	r0, [r7, #4]
20001202:	f7ff ff47 	bl	20001094 <__NVIC_SetPriorityGrouping>
}
20001206:	bf00      	nop
20001208:	3708      	adds	r7, #8
2000120a:	46bd      	mov	sp, r7
2000120c:	bd80      	pop	{r7, pc}

2000120e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
2000120e:	b580      	push	{r7, lr}
20001210:	b086      	sub	sp, #24
20001212:	af00      	add	r7, sp, #0
20001214:	4603      	mov	r3, r0
20001216:	60b9      	str	r1, [r7, #8]
20001218:	607a      	str	r2, [r7, #4]
2000121a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
2000121c:	f7ff ff5e 	bl	200010dc <__NVIC_GetPriorityGrouping>
20001220:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
20001222:	687a      	ldr	r2, [r7, #4]
20001224:	68b9      	ldr	r1, [r7, #8]
20001226:	6978      	ldr	r0, [r7, #20]
20001228:	f7ff ff90 	bl	2000114c <NVIC_EncodePriority>
2000122c:	4602      	mov	r2, r0
2000122e:	f997 300f 	ldrsb.w	r3, [r7, #15]
20001232:	4611      	mov	r1, r2
20001234:	4618      	mov	r0, r3
20001236:	f7ff ff5f 	bl	200010f8 <__NVIC_SetPriority>
}
2000123a:	bf00      	nop
2000123c:	3718      	adds	r7, #24
2000123e:	46bd      	mov	sp, r7
20001240:	bd80      	pop	{r7, pc}

20001242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
20001242:	b580      	push	{r7, lr}
20001244:	b082      	sub	sp, #8
20001246:	af00      	add	r7, sp, #0
20001248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
2000124a:	6878      	ldr	r0, [r7, #4]
2000124c:	f7ff ffb2 	bl	200011b4 <SysTick_Config>
20001250:	4603      	mov	r3, r0
}
20001252:	4618      	mov	r0, r3
20001254:	3708      	adds	r7, #8
20001256:	46bd      	mov	sp, r7
20001258:	bd80      	pop	{r7, pc}
	...

2000125c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
2000125c:	b480      	push	{r7}
2000125e:	b087      	sub	sp, #28
20001260:	af00      	add	r7, sp, #0
20001262:	6078      	str	r0, [r7, #4]
20001264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
20001266:	2300      	movs	r3, #0
20001268:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
2000126a:	e15a      	b.n	20001522 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
2000126c:	683b      	ldr	r3, [r7, #0]
2000126e:	681a      	ldr	r2, [r3, #0]
20001270:	2101      	movs	r1, #1
20001272:	697b      	ldr	r3, [r7, #20]
20001274:	fa01 f303 	lsl.w	r3, r1, r3
20001278:	4013      	ands	r3, r2
2000127a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
2000127c:	68fb      	ldr	r3, [r7, #12]
2000127e:	2b00      	cmp	r3, #0
20001280:	f000 814c 	beq.w	2000151c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
20001284:	683b      	ldr	r3, [r7, #0]
20001286:	685b      	ldr	r3, [r3, #4]
20001288:	f003 0303 	and.w	r3, r3, #3
2000128c:	2b01      	cmp	r3, #1
2000128e:	d005      	beq.n	2000129c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
20001290:	683b      	ldr	r3, [r7, #0]
20001292:	685b      	ldr	r3, [r3, #4]
20001294:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
20001298:	2b02      	cmp	r3, #2
2000129a:	d130      	bne.n	200012fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
2000129c:	687b      	ldr	r3, [r7, #4]
2000129e:	689b      	ldr	r3, [r3, #8]
200012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
200012a2:	697b      	ldr	r3, [r7, #20]
200012a4:	005b      	lsls	r3, r3, #1
200012a6:	2203      	movs	r2, #3
200012a8:	fa02 f303 	lsl.w	r3, r2, r3
200012ac:	43db      	mvns	r3, r3
200012ae:	693a      	ldr	r2, [r7, #16]
200012b0:	4013      	ands	r3, r2
200012b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
200012b4:	683b      	ldr	r3, [r7, #0]
200012b6:	68da      	ldr	r2, [r3, #12]
200012b8:	697b      	ldr	r3, [r7, #20]
200012ba:	005b      	lsls	r3, r3, #1
200012bc:	fa02 f303 	lsl.w	r3, r2, r3
200012c0:	693a      	ldr	r2, [r7, #16]
200012c2:	4313      	orrs	r3, r2
200012c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
200012c6:	687b      	ldr	r3, [r7, #4]
200012c8:	693a      	ldr	r2, [r7, #16]
200012ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
200012cc:	687b      	ldr	r3, [r7, #4]
200012ce:	685b      	ldr	r3, [r3, #4]
200012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
200012d2:	2201      	movs	r2, #1
200012d4:	697b      	ldr	r3, [r7, #20]
200012d6:	fa02 f303 	lsl.w	r3, r2, r3
200012da:	43db      	mvns	r3, r3
200012dc:	693a      	ldr	r2, [r7, #16]
200012de:	4013      	ands	r3, r2
200012e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
200012e2:	683b      	ldr	r3, [r7, #0]
200012e4:	685b      	ldr	r3, [r3, #4]
200012e6:	091b      	lsrs	r3, r3, #4
200012e8:	f003 0201 	and.w	r2, r3, #1
200012ec:	697b      	ldr	r3, [r7, #20]
200012ee:	fa02 f303 	lsl.w	r3, r2, r3
200012f2:	693a      	ldr	r2, [r7, #16]
200012f4:	4313      	orrs	r3, r2
200012f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
200012f8:	687b      	ldr	r3, [r7, #4]
200012fa:	693a      	ldr	r2, [r7, #16]
200012fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
200012fe:	683b      	ldr	r3, [r7, #0]
20001300:	685b      	ldr	r3, [r3, #4]
20001302:	f003 0303 	and.w	r3, r3, #3
20001306:	2b03      	cmp	r3, #3
20001308:	d017      	beq.n	2000133a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
2000130a:	687b      	ldr	r3, [r7, #4]
2000130c:	68db      	ldr	r3, [r3, #12]
2000130e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
20001310:	697b      	ldr	r3, [r7, #20]
20001312:	005b      	lsls	r3, r3, #1
20001314:	2203      	movs	r2, #3
20001316:	fa02 f303 	lsl.w	r3, r2, r3
2000131a:	43db      	mvns	r3, r3
2000131c:	693a      	ldr	r2, [r7, #16]
2000131e:	4013      	ands	r3, r2
20001320:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
20001322:	683b      	ldr	r3, [r7, #0]
20001324:	689a      	ldr	r2, [r3, #8]
20001326:	697b      	ldr	r3, [r7, #20]
20001328:	005b      	lsls	r3, r3, #1
2000132a:	fa02 f303 	lsl.w	r3, r2, r3
2000132e:	693a      	ldr	r2, [r7, #16]
20001330:	4313      	orrs	r3, r2
20001332:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
20001334:	687b      	ldr	r3, [r7, #4]
20001336:	693a      	ldr	r2, [r7, #16]
20001338:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
2000133a:	683b      	ldr	r3, [r7, #0]
2000133c:	685b      	ldr	r3, [r3, #4]
2000133e:	f003 0303 	and.w	r3, r3, #3
20001342:	2b02      	cmp	r3, #2
20001344:	d123      	bne.n	2000138e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
20001346:	697b      	ldr	r3, [r7, #20]
20001348:	08da      	lsrs	r2, r3, #3
2000134a:	687b      	ldr	r3, [r7, #4]
2000134c:	3208      	adds	r2, #8
2000134e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
20001352:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
20001354:	697b      	ldr	r3, [r7, #20]
20001356:	f003 0307 	and.w	r3, r3, #7
2000135a:	009b      	lsls	r3, r3, #2
2000135c:	220f      	movs	r2, #15
2000135e:	fa02 f303 	lsl.w	r3, r2, r3
20001362:	43db      	mvns	r3, r3
20001364:	693a      	ldr	r2, [r7, #16]
20001366:	4013      	ands	r3, r2
20001368:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
2000136a:	683b      	ldr	r3, [r7, #0]
2000136c:	691a      	ldr	r2, [r3, #16]
2000136e:	697b      	ldr	r3, [r7, #20]
20001370:	f003 0307 	and.w	r3, r3, #7
20001374:	009b      	lsls	r3, r3, #2
20001376:	fa02 f303 	lsl.w	r3, r2, r3
2000137a:	693a      	ldr	r2, [r7, #16]
2000137c:	4313      	orrs	r3, r2
2000137e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
20001380:	697b      	ldr	r3, [r7, #20]
20001382:	08da      	lsrs	r2, r3, #3
20001384:	687b      	ldr	r3, [r7, #4]
20001386:	3208      	adds	r2, #8
20001388:	6939      	ldr	r1, [r7, #16]
2000138a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
2000138e:	687b      	ldr	r3, [r7, #4]
20001390:	681b      	ldr	r3, [r3, #0]
20001392:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
20001394:	697b      	ldr	r3, [r7, #20]
20001396:	005b      	lsls	r3, r3, #1
20001398:	2203      	movs	r2, #3
2000139a:	fa02 f303 	lsl.w	r3, r2, r3
2000139e:	43db      	mvns	r3, r3
200013a0:	693a      	ldr	r2, [r7, #16]
200013a2:	4013      	ands	r3, r2
200013a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
200013a6:	683b      	ldr	r3, [r7, #0]
200013a8:	685b      	ldr	r3, [r3, #4]
200013aa:	f003 0203 	and.w	r2, r3, #3
200013ae:	697b      	ldr	r3, [r7, #20]
200013b0:	005b      	lsls	r3, r3, #1
200013b2:	fa02 f303 	lsl.w	r3, r2, r3
200013b6:	693a      	ldr	r2, [r7, #16]
200013b8:	4313      	orrs	r3, r2
200013ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
200013bc:	687b      	ldr	r3, [r7, #4]
200013be:	693a      	ldr	r2, [r7, #16]
200013c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
200013c2:	683b      	ldr	r3, [r7, #0]
200013c4:	685b      	ldr	r3, [r3, #4]
200013c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
200013ca:	2b00      	cmp	r3, #0
200013cc:	f000 80a6 	beq.w	2000151c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
200013d0:	4b5b      	ldr	r3, [pc, #364]	; (20001540 <HAL_GPIO_Init+0x2e4>)
200013d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
200013d4:	4a5a      	ldr	r2, [pc, #360]	; (20001540 <HAL_GPIO_Init+0x2e4>)
200013d6:	f043 0301 	orr.w	r3, r3, #1
200013da:	6613      	str	r3, [r2, #96]	; 0x60
200013dc:	4b58      	ldr	r3, [pc, #352]	; (20001540 <HAL_GPIO_Init+0x2e4>)
200013de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
200013e0:	f003 0301 	and.w	r3, r3, #1
200013e4:	60bb      	str	r3, [r7, #8]
200013e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
200013e8:	4a56      	ldr	r2, [pc, #344]	; (20001544 <HAL_GPIO_Init+0x2e8>)
200013ea:	697b      	ldr	r3, [r7, #20]
200013ec:	089b      	lsrs	r3, r3, #2
200013ee:	3302      	adds	r3, #2
200013f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
200013f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
200013f6:	697b      	ldr	r3, [r7, #20]
200013f8:	f003 0303 	and.w	r3, r3, #3
200013fc:	009b      	lsls	r3, r3, #2
200013fe:	220f      	movs	r2, #15
20001400:	fa02 f303 	lsl.w	r3, r2, r3
20001404:	43db      	mvns	r3, r3
20001406:	693a      	ldr	r2, [r7, #16]
20001408:	4013      	ands	r3, r2
2000140a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
2000140c:	687b      	ldr	r3, [r7, #4]
2000140e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
20001412:	d01f      	beq.n	20001454 <HAL_GPIO_Init+0x1f8>
20001414:	687b      	ldr	r3, [r7, #4]
20001416:	4a4c      	ldr	r2, [pc, #304]	; (20001548 <HAL_GPIO_Init+0x2ec>)
20001418:	4293      	cmp	r3, r2
2000141a:	d019      	beq.n	20001450 <HAL_GPIO_Init+0x1f4>
2000141c:	687b      	ldr	r3, [r7, #4]
2000141e:	4a4b      	ldr	r2, [pc, #300]	; (2000154c <HAL_GPIO_Init+0x2f0>)
20001420:	4293      	cmp	r3, r2
20001422:	d013      	beq.n	2000144c <HAL_GPIO_Init+0x1f0>
20001424:	687b      	ldr	r3, [r7, #4]
20001426:	4a4a      	ldr	r2, [pc, #296]	; (20001550 <HAL_GPIO_Init+0x2f4>)
20001428:	4293      	cmp	r3, r2
2000142a:	d00d      	beq.n	20001448 <HAL_GPIO_Init+0x1ec>
2000142c:	687b      	ldr	r3, [r7, #4]
2000142e:	4a49      	ldr	r2, [pc, #292]	; (20001554 <HAL_GPIO_Init+0x2f8>)
20001430:	4293      	cmp	r3, r2
20001432:	d007      	beq.n	20001444 <HAL_GPIO_Init+0x1e8>
20001434:	687b      	ldr	r3, [r7, #4]
20001436:	4a48      	ldr	r2, [pc, #288]	; (20001558 <HAL_GPIO_Init+0x2fc>)
20001438:	4293      	cmp	r3, r2
2000143a:	d101      	bne.n	20001440 <HAL_GPIO_Init+0x1e4>
2000143c:	2305      	movs	r3, #5
2000143e:	e00a      	b.n	20001456 <HAL_GPIO_Init+0x1fa>
20001440:	2306      	movs	r3, #6
20001442:	e008      	b.n	20001456 <HAL_GPIO_Init+0x1fa>
20001444:	2304      	movs	r3, #4
20001446:	e006      	b.n	20001456 <HAL_GPIO_Init+0x1fa>
20001448:	2303      	movs	r3, #3
2000144a:	e004      	b.n	20001456 <HAL_GPIO_Init+0x1fa>
2000144c:	2302      	movs	r3, #2
2000144e:	e002      	b.n	20001456 <HAL_GPIO_Init+0x1fa>
20001450:	2301      	movs	r3, #1
20001452:	e000      	b.n	20001456 <HAL_GPIO_Init+0x1fa>
20001454:	2300      	movs	r3, #0
20001456:	697a      	ldr	r2, [r7, #20]
20001458:	f002 0203 	and.w	r2, r2, #3
2000145c:	0092      	lsls	r2, r2, #2
2000145e:	4093      	lsls	r3, r2
20001460:	693a      	ldr	r2, [r7, #16]
20001462:	4313      	orrs	r3, r2
20001464:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
20001466:	4937      	ldr	r1, [pc, #220]	; (20001544 <HAL_GPIO_Init+0x2e8>)
20001468:	697b      	ldr	r3, [r7, #20]
2000146a:	089b      	lsrs	r3, r3, #2
2000146c:	3302      	adds	r3, #2
2000146e:	693a      	ldr	r2, [r7, #16]
20001470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
20001474:	4b39      	ldr	r3, [pc, #228]	; (2000155c <HAL_GPIO_Init+0x300>)
20001476:	689b      	ldr	r3, [r3, #8]
20001478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
2000147a:	68fb      	ldr	r3, [r7, #12]
2000147c:	43db      	mvns	r3, r3
2000147e:	693a      	ldr	r2, [r7, #16]
20001480:	4013      	ands	r3, r2
20001482:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
20001484:	683b      	ldr	r3, [r7, #0]
20001486:	685b      	ldr	r3, [r3, #4]
20001488:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
2000148c:	2b00      	cmp	r3, #0
2000148e:	d003      	beq.n	20001498 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
20001490:	693a      	ldr	r2, [r7, #16]
20001492:	68fb      	ldr	r3, [r7, #12]
20001494:	4313      	orrs	r3, r2
20001496:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
20001498:	4a30      	ldr	r2, [pc, #192]	; (2000155c <HAL_GPIO_Init+0x300>)
2000149a:	693b      	ldr	r3, [r7, #16]
2000149c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
2000149e:	4b2f      	ldr	r3, [pc, #188]	; (2000155c <HAL_GPIO_Init+0x300>)
200014a0:	68db      	ldr	r3, [r3, #12]
200014a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
200014a4:	68fb      	ldr	r3, [r7, #12]
200014a6:	43db      	mvns	r3, r3
200014a8:	693a      	ldr	r2, [r7, #16]
200014aa:	4013      	ands	r3, r2
200014ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
200014ae:	683b      	ldr	r3, [r7, #0]
200014b0:	685b      	ldr	r3, [r3, #4]
200014b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
200014b6:	2b00      	cmp	r3, #0
200014b8:	d003      	beq.n	200014c2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
200014ba:	693a      	ldr	r2, [r7, #16]
200014bc:	68fb      	ldr	r3, [r7, #12]
200014be:	4313      	orrs	r3, r2
200014c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
200014c2:	4a26      	ldr	r2, [pc, #152]	; (2000155c <HAL_GPIO_Init+0x300>)
200014c4:	693b      	ldr	r3, [r7, #16]
200014c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
200014c8:	4b24      	ldr	r3, [pc, #144]	; (2000155c <HAL_GPIO_Init+0x300>)
200014ca:	685b      	ldr	r3, [r3, #4]
200014cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
200014ce:	68fb      	ldr	r3, [r7, #12]
200014d0:	43db      	mvns	r3, r3
200014d2:	693a      	ldr	r2, [r7, #16]
200014d4:	4013      	ands	r3, r2
200014d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
200014d8:	683b      	ldr	r3, [r7, #0]
200014da:	685b      	ldr	r3, [r3, #4]
200014dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
200014e0:	2b00      	cmp	r3, #0
200014e2:	d003      	beq.n	200014ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
200014e4:	693a      	ldr	r2, [r7, #16]
200014e6:	68fb      	ldr	r3, [r7, #12]
200014e8:	4313      	orrs	r3, r2
200014ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
200014ec:	4a1b      	ldr	r2, [pc, #108]	; (2000155c <HAL_GPIO_Init+0x300>)
200014ee:	693b      	ldr	r3, [r7, #16]
200014f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
200014f2:	4b1a      	ldr	r3, [pc, #104]	; (2000155c <HAL_GPIO_Init+0x300>)
200014f4:	681b      	ldr	r3, [r3, #0]
200014f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
200014f8:	68fb      	ldr	r3, [r7, #12]
200014fa:	43db      	mvns	r3, r3
200014fc:	693a      	ldr	r2, [r7, #16]
200014fe:	4013      	ands	r3, r2
20001500:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
20001502:	683b      	ldr	r3, [r7, #0]
20001504:	685b      	ldr	r3, [r3, #4]
20001506:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
2000150a:	2b00      	cmp	r3, #0
2000150c:	d003      	beq.n	20001516 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
2000150e:	693a      	ldr	r2, [r7, #16]
20001510:	68fb      	ldr	r3, [r7, #12]
20001512:	4313      	orrs	r3, r2
20001514:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
20001516:	4a11      	ldr	r2, [pc, #68]	; (2000155c <HAL_GPIO_Init+0x300>)
20001518:	693b      	ldr	r3, [r7, #16]
2000151a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
2000151c:	697b      	ldr	r3, [r7, #20]
2000151e:	3301      	adds	r3, #1
20001520:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
20001522:	683b      	ldr	r3, [r7, #0]
20001524:	681a      	ldr	r2, [r3, #0]
20001526:	697b      	ldr	r3, [r7, #20]
20001528:	fa22 f303 	lsr.w	r3, r2, r3
2000152c:	2b00      	cmp	r3, #0
2000152e:	f47f ae9d 	bne.w	2000126c <HAL_GPIO_Init+0x10>
  }
}
20001532:	bf00      	nop
20001534:	bf00      	nop
20001536:	371c      	adds	r7, #28
20001538:	46bd      	mov	sp, r7
2000153a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000153e:	4770      	bx	lr
20001540:	40021000 	.word	0x40021000
20001544:	40010000 	.word	0x40010000
20001548:	48000400 	.word	0x48000400
2000154c:	48000800 	.word	0x48000800
20001550:	48000c00 	.word	0x48000c00
20001554:	48001000 	.word	0x48001000
20001558:	48001400 	.word	0x48001400
2000155c:	40010400 	.word	0x40010400

20001560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
20001560:	b480      	push	{r7}
20001562:	b083      	sub	sp, #12
20001564:	af00      	add	r7, sp, #0
20001566:	6078      	str	r0, [r7, #4]
20001568:	460b      	mov	r3, r1
2000156a:	807b      	strh	r3, [r7, #2]
2000156c:	4613      	mov	r3, r2
2000156e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
20001570:	787b      	ldrb	r3, [r7, #1]
20001572:	2b00      	cmp	r3, #0
20001574:	d003      	beq.n	2000157e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
20001576:	887a      	ldrh	r2, [r7, #2]
20001578:	687b      	ldr	r3, [r7, #4]
2000157a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
2000157c:	e002      	b.n	20001584 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
2000157e:	887a      	ldrh	r2, [r7, #2]
20001580:	687b      	ldr	r3, [r7, #4]
20001582:	629a      	str	r2, [r3, #40]	; 0x28
}
20001584:	bf00      	nop
20001586:	370c      	adds	r7, #12
20001588:	46bd      	mov	sp, r7
2000158a:	f85d 7b04 	ldr.w	r7, [sp], #4
2000158e:	4770      	bx	lr

20001590 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
20001590:	b480      	push	{r7}
20001592:	b085      	sub	sp, #20
20001594:	af00      	add	r7, sp, #0
20001596:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
20001598:	687b      	ldr	r3, [r7, #4]
2000159a:	2b00      	cmp	r3, #0
2000159c:	d141      	bne.n	20001622 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
2000159e:	4b4b      	ldr	r3, [pc, #300]	; (200016cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
200015a0:	681b      	ldr	r3, [r3, #0]
200015a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
200015a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
200015aa:	d131      	bne.n	20001610 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
200015ac:	4b47      	ldr	r3, [pc, #284]	; (200016cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
200015ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
200015b2:	4a46      	ldr	r2, [pc, #280]	; (200016cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
200015b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
200015b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
200015bc:	4b43      	ldr	r3, [pc, #268]	; (200016cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
200015be:	681b      	ldr	r3, [r3, #0]
200015c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
200015c4:	4a41      	ldr	r2, [pc, #260]	; (200016cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
200015c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
200015ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
200015cc:	4b40      	ldr	r3, [pc, #256]	; (200016d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
200015ce:	681b      	ldr	r3, [r3, #0]
200015d0:	2232      	movs	r2, #50	; 0x32
200015d2:	fb02 f303 	mul.w	r3, r2, r3
200015d6:	4a3f      	ldr	r2, [pc, #252]	; (200016d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
200015d8:	fba2 2303 	umull	r2, r3, r2, r3
200015dc:	0c9b      	lsrs	r3, r3, #18
200015de:	3301      	adds	r3, #1
200015e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
200015e2:	e002      	b.n	200015ea <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
200015e4:	68fb      	ldr	r3, [r7, #12]
200015e6:	3b01      	subs	r3, #1
200015e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
200015ea:	4b38      	ldr	r3, [pc, #224]	; (200016cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
200015ec:	695b      	ldr	r3, [r3, #20]
200015ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
200015f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
200015f6:	d102      	bne.n	200015fe <HAL_PWREx_ControlVoltageScaling+0x6e>
200015f8:	68fb      	ldr	r3, [r7, #12]
200015fa:	2b00      	cmp	r3, #0
200015fc:	d1f2      	bne.n	200015e4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
200015fe:	4b33      	ldr	r3, [pc, #204]	; (200016cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
20001600:	695b      	ldr	r3, [r3, #20]
20001602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
20001606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
2000160a:	d158      	bne.n	200016be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
2000160c:	2303      	movs	r3, #3
2000160e:	e057      	b.n	200016c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
20001610:	4b2e      	ldr	r3, [pc, #184]	; (200016cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
20001612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
20001616:	4a2d      	ldr	r2, [pc, #180]	; (200016cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
20001618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
2000161c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
20001620:	e04d      	b.n	200016be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
20001622:	687b      	ldr	r3, [r7, #4]
20001624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
20001628:	d141      	bne.n	200016ae <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
2000162a:	4b28      	ldr	r3, [pc, #160]	; (200016cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
2000162c:	681b      	ldr	r3, [r3, #0]
2000162e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
20001632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
20001636:	d131      	bne.n	2000169c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
20001638:	4b24      	ldr	r3, [pc, #144]	; (200016cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
2000163a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
2000163e:	4a23      	ldr	r2, [pc, #140]	; (200016cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
20001640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20001644:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
20001648:	4b20      	ldr	r3, [pc, #128]	; (200016cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
2000164a:	681b      	ldr	r3, [r3, #0]
2000164c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
20001650:	4a1e      	ldr	r2, [pc, #120]	; (200016cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
20001652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
20001656:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
20001658:	4b1d      	ldr	r3, [pc, #116]	; (200016d0 <HAL_PWREx_ControlVoltageScaling+0x140>)
2000165a:	681b      	ldr	r3, [r3, #0]
2000165c:	2232      	movs	r2, #50	; 0x32
2000165e:	fb02 f303 	mul.w	r3, r2, r3
20001662:	4a1c      	ldr	r2, [pc, #112]	; (200016d4 <HAL_PWREx_ControlVoltageScaling+0x144>)
20001664:	fba2 2303 	umull	r2, r3, r2, r3
20001668:	0c9b      	lsrs	r3, r3, #18
2000166a:	3301      	adds	r3, #1
2000166c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
2000166e:	e002      	b.n	20001676 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
20001670:	68fb      	ldr	r3, [r7, #12]
20001672:	3b01      	subs	r3, #1
20001674:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
20001676:	4b15      	ldr	r3, [pc, #84]	; (200016cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
20001678:	695b      	ldr	r3, [r3, #20]
2000167a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
2000167e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
20001682:	d102      	bne.n	2000168a <HAL_PWREx_ControlVoltageScaling+0xfa>
20001684:	68fb      	ldr	r3, [r7, #12]
20001686:	2b00      	cmp	r3, #0
20001688:	d1f2      	bne.n	20001670 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
2000168a:	4b10      	ldr	r3, [pc, #64]	; (200016cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
2000168c:	695b      	ldr	r3, [r3, #20]
2000168e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
20001692:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
20001696:	d112      	bne.n	200016be <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
20001698:	2303      	movs	r3, #3
2000169a:	e011      	b.n	200016c0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
2000169c:	4b0b      	ldr	r3, [pc, #44]	; (200016cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
2000169e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
200016a2:	4a0a      	ldr	r2, [pc, #40]	; (200016cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
200016a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
200016a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
200016ac:	e007      	b.n	200016be <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
200016ae:	4b07      	ldr	r3, [pc, #28]	; (200016cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
200016b0:	681b      	ldr	r3, [r3, #0]
200016b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
200016b6:	4a05      	ldr	r2, [pc, #20]	; (200016cc <HAL_PWREx_ControlVoltageScaling+0x13c>)
200016b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
200016bc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
200016be:	2300      	movs	r3, #0
}
200016c0:	4618      	mov	r0, r3
200016c2:	3714      	adds	r7, #20
200016c4:	46bd      	mov	sp, r7
200016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
200016ca:	4770      	bx	lr
200016cc:	40007000 	.word	0x40007000
200016d0:	200003e0 	.word	0x200003e0
200016d4:	431bde83 	.word	0x431bde83

200016d8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
200016d8:	b480      	push	{r7}
200016da:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
200016dc:	4b05      	ldr	r3, [pc, #20]	; (200016f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
200016de:	689b      	ldr	r3, [r3, #8]
200016e0:	4a04      	ldr	r2, [pc, #16]	; (200016f4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
200016e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
200016e6:	6093      	str	r3, [r2, #8]
}
200016e8:	bf00      	nop
200016ea:	46bd      	mov	sp, r7
200016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
200016f0:	4770      	bx	lr
200016f2:	bf00      	nop
200016f4:	40007000 	.word	0x40007000

200016f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
200016f8:	b580      	push	{r7, lr}
200016fa:	b088      	sub	sp, #32
200016fc:	af00      	add	r7, sp, #0
200016fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
20001700:	687b      	ldr	r3, [r7, #4]
20001702:	2b00      	cmp	r3, #0
20001704:	d101      	bne.n	2000170a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
20001706:	2301      	movs	r3, #1
20001708:	e306      	b.n	20001d18 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
2000170a:	687b      	ldr	r3, [r7, #4]
2000170c:	681b      	ldr	r3, [r3, #0]
2000170e:	f003 0301 	and.w	r3, r3, #1
20001712:	2b00      	cmp	r3, #0
20001714:	d075      	beq.n	20001802 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
20001716:	4b97      	ldr	r3, [pc, #604]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
20001718:	689b      	ldr	r3, [r3, #8]
2000171a:	f003 030c 	and.w	r3, r3, #12
2000171e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
20001720:	4b94      	ldr	r3, [pc, #592]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
20001722:	68db      	ldr	r3, [r3, #12]
20001724:	f003 0303 	and.w	r3, r3, #3
20001728:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
2000172a:	69bb      	ldr	r3, [r7, #24]
2000172c:	2b0c      	cmp	r3, #12
2000172e:	d102      	bne.n	20001736 <HAL_RCC_OscConfig+0x3e>
20001730:	697b      	ldr	r3, [r7, #20]
20001732:	2b03      	cmp	r3, #3
20001734:	d002      	beq.n	2000173c <HAL_RCC_OscConfig+0x44>
20001736:	69bb      	ldr	r3, [r7, #24]
20001738:	2b08      	cmp	r3, #8
2000173a:	d10b      	bne.n	20001754 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
2000173c:	4b8d      	ldr	r3, [pc, #564]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
2000173e:	681b      	ldr	r3, [r3, #0]
20001740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20001744:	2b00      	cmp	r3, #0
20001746:	d05b      	beq.n	20001800 <HAL_RCC_OscConfig+0x108>
20001748:	687b      	ldr	r3, [r7, #4]
2000174a:	685b      	ldr	r3, [r3, #4]
2000174c:	2b00      	cmp	r3, #0
2000174e:	d157      	bne.n	20001800 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
20001750:	2301      	movs	r3, #1
20001752:	e2e1      	b.n	20001d18 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
20001754:	687b      	ldr	r3, [r7, #4]
20001756:	685b      	ldr	r3, [r3, #4]
20001758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
2000175c:	d106      	bne.n	2000176c <HAL_RCC_OscConfig+0x74>
2000175e:	4b85      	ldr	r3, [pc, #532]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
20001760:	681b      	ldr	r3, [r3, #0]
20001762:	4a84      	ldr	r2, [pc, #528]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
20001764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
20001768:	6013      	str	r3, [r2, #0]
2000176a:	e01d      	b.n	200017a8 <HAL_RCC_OscConfig+0xb0>
2000176c:	687b      	ldr	r3, [r7, #4]
2000176e:	685b      	ldr	r3, [r3, #4]
20001770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
20001774:	d10c      	bne.n	20001790 <HAL_RCC_OscConfig+0x98>
20001776:	4b7f      	ldr	r3, [pc, #508]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
20001778:	681b      	ldr	r3, [r3, #0]
2000177a:	4a7e      	ldr	r2, [pc, #504]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
2000177c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
20001780:	6013      	str	r3, [r2, #0]
20001782:	4b7c      	ldr	r3, [pc, #496]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
20001784:	681b      	ldr	r3, [r3, #0]
20001786:	4a7b      	ldr	r2, [pc, #492]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
20001788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
2000178c:	6013      	str	r3, [r2, #0]
2000178e:	e00b      	b.n	200017a8 <HAL_RCC_OscConfig+0xb0>
20001790:	4b78      	ldr	r3, [pc, #480]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
20001792:	681b      	ldr	r3, [r3, #0]
20001794:	4a77      	ldr	r2, [pc, #476]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
20001796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
2000179a:	6013      	str	r3, [r2, #0]
2000179c:	4b75      	ldr	r3, [pc, #468]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
2000179e:	681b      	ldr	r3, [r3, #0]
200017a0:	4a74      	ldr	r2, [pc, #464]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
200017a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
200017a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
200017a8:	687b      	ldr	r3, [r7, #4]
200017aa:	685b      	ldr	r3, [r3, #4]
200017ac:	2b00      	cmp	r3, #0
200017ae:	d013      	beq.n	200017d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
200017b0:	f7ff fc64 	bl	2000107c <HAL_GetTick>
200017b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
200017b6:	e008      	b.n	200017ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
200017b8:	f7ff fc60 	bl	2000107c <HAL_GetTick>
200017bc:	4602      	mov	r2, r0
200017be:	693b      	ldr	r3, [r7, #16]
200017c0:	1ad3      	subs	r3, r2, r3
200017c2:	2b64      	cmp	r3, #100	; 0x64
200017c4:	d901      	bls.n	200017ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
200017c6:	2303      	movs	r3, #3
200017c8:	e2a6      	b.n	20001d18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
200017ca:	4b6a      	ldr	r3, [pc, #424]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
200017cc:	681b      	ldr	r3, [r3, #0]
200017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
200017d2:	2b00      	cmp	r3, #0
200017d4:	d0f0      	beq.n	200017b8 <HAL_RCC_OscConfig+0xc0>
200017d6:	e014      	b.n	20001802 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
200017d8:	f7ff fc50 	bl	2000107c <HAL_GetTick>
200017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
200017de:	e008      	b.n	200017f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
200017e0:	f7ff fc4c 	bl	2000107c <HAL_GetTick>
200017e4:	4602      	mov	r2, r0
200017e6:	693b      	ldr	r3, [r7, #16]
200017e8:	1ad3      	subs	r3, r2, r3
200017ea:	2b64      	cmp	r3, #100	; 0x64
200017ec:	d901      	bls.n	200017f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
200017ee:	2303      	movs	r3, #3
200017f0:	e292      	b.n	20001d18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
200017f2:	4b60      	ldr	r3, [pc, #384]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
200017f4:	681b      	ldr	r3, [r3, #0]
200017f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
200017fa:	2b00      	cmp	r3, #0
200017fc:	d1f0      	bne.n	200017e0 <HAL_RCC_OscConfig+0xe8>
200017fe:	e000      	b.n	20001802 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
20001800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
20001802:	687b      	ldr	r3, [r7, #4]
20001804:	681b      	ldr	r3, [r3, #0]
20001806:	f003 0302 	and.w	r3, r3, #2
2000180a:	2b00      	cmp	r3, #0
2000180c:	d075      	beq.n	200018fa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
2000180e:	4b59      	ldr	r3, [pc, #356]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
20001810:	689b      	ldr	r3, [r3, #8]
20001812:	f003 030c 	and.w	r3, r3, #12
20001816:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
20001818:	4b56      	ldr	r3, [pc, #344]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
2000181a:	68db      	ldr	r3, [r3, #12]
2000181c:	f003 0303 	and.w	r3, r3, #3
20001820:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
20001822:	69bb      	ldr	r3, [r7, #24]
20001824:	2b0c      	cmp	r3, #12
20001826:	d102      	bne.n	2000182e <HAL_RCC_OscConfig+0x136>
20001828:	697b      	ldr	r3, [r7, #20]
2000182a:	2b02      	cmp	r3, #2
2000182c:	d002      	beq.n	20001834 <HAL_RCC_OscConfig+0x13c>
2000182e:	69bb      	ldr	r3, [r7, #24]
20001830:	2b04      	cmp	r3, #4
20001832:	d11f      	bne.n	20001874 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
20001834:	4b4f      	ldr	r3, [pc, #316]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
20001836:	681b      	ldr	r3, [r3, #0]
20001838:	f403 6380 	and.w	r3, r3, #1024	; 0x400
2000183c:	2b00      	cmp	r3, #0
2000183e:	d005      	beq.n	2000184c <HAL_RCC_OscConfig+0x154>
20001840:	687b      	ldr	r3, [r7, #4]
20001842:	68db      	ldr	r3, [r3, #12]
20001844:	2b00      	cmp	r3, #0
20001846:	d101      	bne.n	2000184c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
20001848:	2301      	movs	r3, #1
2000184a:	e265      	b.n	20001d18 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
2000184c:	4b49      	ldr	r3, [pc, #292]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
2000184e:	685b      	ldr	r3, [r3, #4]
20001850:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
20001854:	687b      	ldr	r3, [r7, #4]
20001856:	691b      	ldr	r3, [r3, #16]
20001858:	061b      	lsls	r3, r3, #24
2000185a:	4946      	ldr	r1, [pc, #280]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
2000185c:	4313      	orrs	r3, r2
2000185e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
20001860:	4b45      	ldr	r3, [pc, #276]	; (20001978 <HAL_RCC_OscConfig+0x280>)
20001862:	681b      	ldr	r3, [r3, #0]
20001864:	4618      	mov	r0, r3
20001866:	f7ff fbbd 	bl	20000fe4 <HAL_InitTick>
2000186a:	4603      	mov	r3, r0
2000186c:	2b00      	cmp	r3, #0
2000186e:	d043      	beq.n	200018f8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
20001870:	2301      	movs	r3, #1
20001872:	e251      	b.n	20001d18 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
20001874:	687b      	ldr	r3, [r7, #4]
20001876:	68db      	ldr	r3, [r3, #12]
20001878:	2b00      	cmp	r3, #0
2000187a:	d023      	beq.n	200018c4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
2000187c:	4b3d      	ldr	r3, [pc, #244]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
2000187e:	681b      	ldr	r3, [r3, #0]
20001880:	4a3c      	ldr	r2, [pc, #240]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
20001882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
20001886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20001888:	f7ff fbf8 	bl	2000107c <HAL_GetTick>
2000188c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
2000188e:	e008      	b.n	200018a2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
20001890:	f7ff fbf4 	bl	2000107c <HAL_GetTick>
20001894:	4602      	mov	r2, r0
20001896:	693b      	ldr	r3, [r7, #16]
20001898:	1ad3      	subs	r3, r2, r3
2000189a:	2b02      	cmp	r3, #2
2000189c:	d901      	bls.n	200018a2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
2000189e:	2303      	movs	r3, #3
200018a0:	e23a      	b.n	20001d18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
200018a2:	4b34      	ldr	r3, [pc, #208]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
200018a4:	681b      	ldr	r3, [r3, #0]
200018a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
200018aa:	2b00      	cmp	r3, #0
200018ac:	d0f0      	beq.n	20001890 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
200018ae:	4b31      	ldr	r3, [pc, #196]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
200018b0:	685b      	ldr	r3, [r3, #4]
200018b2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
200018b6:	687b      	ldr	r3, [r7, #4]
200018b8:	691b      	ldr	r3, [r3, #16]
200018ba:	061b      	lsls	r3, r3, #24
200018bc:	492d      	ldr	r1, [pc, #180]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
200018be:	4313      	orrs	r3, r2
200018c0:	604b      	str	r3, [r1, #4]
200018c2:	e01a      	b.n	200018fa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
200018c4:	4b2b      	ldr	r3, [pc, #172]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
200018c6:	681b      	ldr	r3, [r3, #0]
200018c8:	4a2a      	ldr	r2, [pc, #168]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
200018ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
200018ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
200018d0:	f7ff fbd4 	bl	2000107c <HAL_GetTick>
200018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
200018d6:	e008      	b.n	200018ea <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
200018d8:	f7ff fbd0 	bl	2000107c <HAL_GetTick>
200018dc:	4602      	mov	r2, r0
200018de:	693b      	ldr	r3, [r7, #16]
200018e0:	1ad3      	subs	r3, r2, r3
200018e2:	2b02      	cmp	r3, #2
200018e4:	d901      	bls.n	200018ea <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
200018e6:	2303      	movs	r3, #3
200018e8:	e216      	b.n	20001d18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
200018ea:	4b22      	ldr	r3, [pc, #136]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
200018ec:	681b      	ldr	r3, [r3, #0]
200018ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
200018f2:	2b00      	cmp	r3, #0
200018f4:	d1f0      	bne.n	200018d8 <HAL_RCC_OscConfig+0x1e0>
200018f6:	e000      	b.n	200018fa <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
200018f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
200018fa:	687b      	ldr	r3, [r7, #4]
200018fc:	681b      	ldr	r3, [r3, #0]
200018fe:	f003 0308 	and.w	r3, r3, #8
20001902:	2b00      	cmp	r3, #0
20001904:	d041      	beq.n	2000198a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
20001906:	687b      	ldr	r3, [r7, #4]
20001908:	695b      	ldr	r3, [r3, #20]
2000190a:	2b00      	cmp	r3, #0
2000190c:	d01c      	beq.n	20001948 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
2000190e:	4b19      	ldr	r3, [pc, #100]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
20001910:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
20001914:	4a17      	ldr	r2, [pc, #92]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
20001916:	f043 0301 	orr.w	r3, r3, #1
2000191a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
2000191e:	f7ff fbad 	bl	2000107c <HAL_GetTick>
20001922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
20001924:	e008      	b.n	20001938 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
20001926:	f7ff fba9 	bl	2000107c <HAL_GetTick>
2000192a:	4602      	mov	r2, r0
2000192c:	693b      	ldr	r3, [r7, #16]
2000192e:	1ad3      	subs	r3, r2, r3
20001930:	2b02      	cmp	r3, #2
20001932:	d901      	bls.n	20001938 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
20001934:	2303      	movs	r3, #3
20001936:	e1ef      	b.n	20001d18 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
20001938:	4b0e      	ldr	r3, [pc, #56]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
2000193a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2000193e:	f003 0302 	and.w	r3, r3, #2
20001942:	2b00      	cmp	r3, #0
20001944:	d0ef      	beq.n	20001926 <HAL_RCC_OscConfig+0x22e>
20001946:	e020      	b.n	2000198a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
20001948:	4b0a      	ldr	r3, [pc, #40]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
2000194a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
2000194e:	4a09      	ldr	r2, [pc, #36]	; (20001974 <HAL_RCC_OscConfig+0x27c>)
20001950:	f023 0301 	bic.w	r3, r3, #1
20001954:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20001958:	f7ff fb90 	bl	2000107c <HAL_GetTick>
2000195c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
2000195e:	e00d      	b.n	2000197c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
20001960:	f7ff fb8c 	bl	2000107c <HAL_GetTick>
20001964:	4602      	mov	r2, r0
20001966:	693b      	ldr	r3, [r7, #16]
20001968:	1ad3      	subs	r3, r2, r3
2000196a:	2b02      	cmp	r3, #2
2000196c:	d906      	bls.n	2000197c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
2000196e:	2303      	movs	r3, #3
20001970:	e1d2      	b.n	20001d18 <HAL_RCC_OscConfig+0x620>
20001972:	bf00      	nop
20001974:	40021000 	.word	0x40021000
20001978:	200003e4 	.word	0x200003e4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
2000197c:	4b8c      	ldr	r3, [pc, #560]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
2000197e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
20001982:	f003 0302 	and.w	r3, r3, #2
20001986:	2b00      	cmp	r3, #0
20001988:	d1ea      	bne.n	20001960 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
2000198a:	687b      	ldr	r3, [r7, #4]
2000198c:	681b      	ldr	r3, [r3, #0]
2000198e:	f003 0304 	and.w	r3, r3, #4
20001992:	2b00      	cmp	r3, #0
20001994:	f000 80a6 	beq.w	20001ae4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
20001998:	2300      	movs	r3, #0
2000199a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
2000199c:	4b84      	ldr	r3, [pc, #528]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
2000199e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
200019a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
200019a4:	2b00      	cmp	r3, #0
200019a6:	d101      	bne.n	200019ac <HAL_RCC_OscConfig+0x2b4>
200019a8:	2301      	movs	r3, #1
200019aa:	e000      	b.n	200019ae <HAL_RCC_OscConfig+0x2b6>
200019ac:	2300      	movs	r3, #0
200019ae:	2b00      	cmp	r3, #0
200019b0:	d00d      	beq.n	200019ce <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
200019b2:	4b7f      	ldr	r3, [pc, #508]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
200019b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
200019b6:	4a7e      	ldr	r2, [pc, #504]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
200019b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
200019bc:	6593      	str	r3, [r2, #88]	; 0x58
200019be:	4b7c      	ldr	r3, [pc, #496]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
200019c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
200019c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
200019c6:	60fb      	str	r3, [r7, #12]
200019c8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
200019ca:	2301      	movs	r3, #1
200019cc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
200019ce:	4b79      	ldr	r3, [pc, #484]	; (20001bb4 <HAL_RCC_OscConfig+0x4bc>)
200019d0:	681b      	ldr	r3, [r3, #0]
200019d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
200019d6:	2b00      	cmp	r3, #0
200019d8:	d118      	bne.n	20001a0c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
200019da:	4b76      	ldr	r3, [pc, #472]	; (20001bb4 <HAL_RCC_OscConfig+0x4bc>)
200019dc:	681b      	ldr	r3, [r3, #0]
200019de:	4a75      	ldr	r2, [pc, #468]	; (20001bb4 <HAL_RCC_OscConfig+0x4bc>)
200019e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
200019e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
200019e6:	f7ff fb49 	bl	2000107c <HAL_GetTick>
200019ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
200019ec:	e008      	b.n	20001a00 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
200019ee:	f7ff fb45 	bl	2000107c <HAL_GetTick>
200019f2:	4602      	mov	r2, r0
200019f4:	693b      	ldr	r3, [r7, #16]
200019f6:	1ad3      	subs	r3, r2, r3
200019f8:	2b02      	cmp	r3, #2
200019fa:	d901      	bls.n	20001a00 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
200019fc:	2303      	movs	r3, #3
200019fe:	e18b      	b.n	20001d18 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
20001a00:	4b6c      	ldr	r3, [pc, #432]	; (20001bb4 <HAL_RCC_OscConfig+0x4bc>)
20001a02:	681b      	ldr	r3, [r3, #0]
20001a04:	f403 7380 	and.w	r3, r3, #256	; 0x100
20001a08:	2b00      	cmp	r3, #0
20001a0a:	d0f0      	beq.n	200019ee <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
20001a0c:	687b      	ldr	r3, [r7, #4]
20001a0e:	689b      	ldr	r3, [r3, #8]
20001a10:	2b01      	cmp	r3, #1
20001a12:	d108      	bne.n	20001a26 <HAL_RCC_OscConfig+0x32e>
20001a14:	4b66      	ldr	r3, [pc, #408]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
20001a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
20001a1a:	4a65      	ldr	r2, [pc, #404]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
20001a1c:	f043 0301 	orr.w	r3, r3, #1
20001a20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
20001a24:	e024      	b.n	20001a70 <HAL_RCC_OscConfig+0x378>
20001a26:	687b      	ldr	r3, [r7, #4]
20001a28:	689b      	ldr	r3, [r3, #8]
20001a2a:	2b05      	cmp	r3, #5
20001a2c:	d110      	bne.n	20001a50 <HAL_RCC_OscConfig+0x358>
20001a2e:	4b60      	ldr	r3, [pc, #384]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
20001a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
20001a34:	4a5e      	ldr	r2, [pc, #376]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
20001a36:	f043 0304 	orr.w	r3, r3, #4
20001a3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
20001a3e:	4b5c      	ldr	r3, [pc, #368]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
20001a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
20001a44:	4a5a      	ldr	r2, [pc, #360]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
20001a46:	f043 0301 	orr.w	r3, r3, #1
20001a4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
20001a4e:	e00f      	b.n	20001a70 <HAL_RCC_OscConfig+0x378>
20001a50:	4b57      	ldr	r3, [pc, #348]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
20001a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
20001a56:	4a56      	ldr	r2, [pc, #344]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
20001a58:	f023 0301 	bic.w	r3, r3, #1
20001a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
20001a60:	4b53      	ldr	r3, [pc, #332]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
20001a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
20001a66:	4a52      	ldr	r2, [pc, #328]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
20001a68:	f023 0304 	bic.w	r3, r3, #4
20001a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
20001a70:	687b      	ldr	r3, [r7, #4]
20001a72:	689b      	ldr	r3, [r3, #8]
20001a74:	2b00      	cmp	r3, #0
20001a76:	d016      	beq.n	20001aa6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20001a78:	f7ff fb00 	bl	2000107c <HAL_GetTick>
20001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
20001a7e:	e00a      	b.n	20001a96 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
20001a80:	f7ff fafc 	bl	2000107c <HAL_GetTick>
20001a84:	4602      	mov	r2, r0
20001a86:	693b      	ldr	r3, [r7, #16]
20001a88:	1ad3      	subs	r3, r2, r3
20001a8a:	f241 3288 	movw	r2, #5000	; 0x1388
20001a8e:	4293      	cmp	r3, r2
20001a90:	d901      	bls.n	20001a96 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
20001a92:	2303      	movs	r3, #3
20001a94:	e140      	b.n	20001d18 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
20001a96:	4b46      	ldr	r3, [pc, #280]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
20001a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
20001a9c:	f003 0302 	and.w	r3, r3, #2
20001aa0:	2b00      	cmp	r3, #0
20001aa2:	d0ed      	beq.n	20001a80 <HAL_RCC_OscConfig+0x388>
20001aa4:	e015      	b.n	20001ad2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20001aa6:	f7ff fae9 	bl	2000107c <HAL_GetTick>
20001aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
20001aac:	e00a      	b.n	20001ac4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
20001aae:	f7ff fae5 	bl	2000107c <HAL_GetTick>
20001ab2:	4602      	mov	r2, r0
20001ab4:	693b      	ldr	r3, [r7, #16]
20001ab6:	1ad3      	subs	r3, r2, r3
20001ab8:	f241 3288 	movw	r2, #5000	; 0x1388
20001abc:	4293      	cmp	r3, r2
20001abe:	d901      	bls.n	20001ac4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
20001ac0:	2303      	movs	r3, #3
20001ac2:	e129      	b.n	20001d18 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
20001ac4:	4b3a      	ldr	r3, [pc, #232]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
20001ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
20001aca:	f003 0302 	and.w	r3, r3, #2
20001ace:	2b00      	cmp	r3, #0
20001ad0:	d1ed      	bne.n	20001aae <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
20001ad2:	7ffb      	ldrb	r3, [r7, #31]
20001ad4:	2b01      	cmp	r3, #1
20001ad6:	d105      	bne.n	20001ae4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
20001ad8:	4b35      	ldr	r3, [pc, #212]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
20001ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
20001adc:	4a34      	ldr	r2, [pc, #208]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
20001ade:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
20001ae2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
20001ae4:	687b      	ldr	r3, [r7, #4]
20001ae6:	681b      	ldr	r3, [r3, #0]
20001ae8:	f003 0320 	and.w	r3, r3, #32
20001aec:	2b00      	cmp	r3, #0
20001aee:	d03c      	beq.n	20001b6a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
20001af0:	687b      	ldr	r3, [r7, #4]
20001af2:	699b      	ldr	r3, [r3, #24]
20001af4:	2b00      	cmp	r3, #0
20001af6:	d01c      	beq.n	20001b32 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
20001af8:	4b2d      	ldr	r3, [pc, #180]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
20001afa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
20001afe:	4a2c      	ldr	r2, [pc, #176]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
20001b00:	f043 0301 	orr.w	r3, r3, #1
20001b04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20001b08:	f7ff fab8 	bl	2000107c <HAL_GetTick>
20001b0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
20001b0e:	e008      	b.n	20001b22 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
20001b10:	f7ff fab4 	bl	2000107c <HAL_GetTick>
20001b14:	4602      	mov	r2, r0
20001b16:	693b      	ldr	r3, [r7, #16]
20001b18:	1ad3      	subs	r3, r2, r3
20001b1a:	2b02      	cmp	r3, #2
20001b1c:	d901      	bls.n	20001b22 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
20001b1e:	2303      	movs	r3, #3
20001b20:	e0fa      	b.n	20001d18 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
20001b22:	4b23      	ldr	r3, [pc, #140]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
20001b24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
20001b28:	f003 0302 	and.w	r3, r3, #2
20001b2c:	2b00      	cmp	r3, #0
20001b2e:	d0ef      	beq.n	20001b10 <HAL_RCC_OscConfig+0x418>
20001b30:	e01b      	b.n	20001b6a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
20001b32:	4b1f      	ldr	r3, [pc, #124]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
20001b34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
20001b38:	4a1d      	ldr	r2, [pc, #116]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
20001b3a:	f023 0301 	bic.w	r3, r3, #1
20001b3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
20001b42:	f7ff fa9b 	bl	2000107c <HAL_GetTick>
20001b46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
20001b48:	e008      	b.n	20001b5c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
20001b4a:	f7ff fa97 	bl	2000107c <HAL_GetTick>
20001b4e:	4602      	mov	r2, r0
20001b50:	693b      	ldr	r3, [r7, #16]
20001b52:	1ad3      	subs	r3, r2, r3
20001b54:	2b02      	cmp	r3, #2
20001b56:	d901      	bls.n	20001b5c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
20001b58:	2303      	movs	r3, #3
20001b5a:	e0dd      	b.n	20001d18 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
20001b5c:	4b14      	ldr	r3, [pc, #80]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
20001b5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
20001b62:	f003 0302 	and.w	r3, r3, #2
20001b66:	2b00      	cmp	r3, #0
20001b68:	d1ef      	bne.n	20001b4a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
20001b6a:	687b      	ldr	r3, [r7, #4]
20001b6c:	69db      	ldr	r3, [r3, #28]
20001b6e:	2b00      	cmp	r3, #0
20001b70:	f000 80d1 	beq.w	20001d16 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
20001b74:	4b0e      	ldr	r3, [pc, #56]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
20001b76:	689b      	ldr	r3, [r3, #8]
20001b78:	f003 030c 	and.w	r3, r3, #12
20001b7c:	2b0c      	cmp	r3, #12
20001b7e:	f000 808b 	beq.w	20001c98 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
20001b82:	687b      	ldr	r3, [r7, #4]
20001b84:	69db      	ldr	r3, [r3, #28]
20001b86:	2b02      	cmp	r3, #2
20001b88:	d15e      	bne.n	20001c48 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20001b8a:	4b09      	ldr	r3, [pc, #36]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
20001b8c:	681b      	ldr	r3, [r3, #0]
20001b8e:	4a08      	ldr	r2, [pc, #32]	; (20001bb0 <HAL_RCC_OscConfig+0x4b8>)
20001b90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
20001b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20001b96:	f7ff fa71 	bl	2000107c <HAL_GetTick>
20001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
20001b9c:	e00c      	b.n	20001bb8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
20001b9e:	f7ff fa6d 	bl	2000107c <HAL_GetTick>
20001ba2:	4602      	mov	r2, r0
20001ba4:	693b      	ldr	r3, [r7, #16]
20001ba6:	1ad3      	subs	r3, r2, r3
20001ba8:	2b02      	cmp	r3, #2
20001baa:	d905      	bls.n	20001bb8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
20001bac:	2303      	movs	r3, #3
20001bae:	e0b3      	b.n	20001d18 <HAL_RCC_OscConfig+0x620>
20001bb0:	40021000 	.word	0x40021000
20001bb4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
20001bb8:	4b59      	ldr	r3, [pc, #356]	; (20001d20 <HAL_RCC_OscConfig+0x628>)
20001bba:	681b      	ldr	r3, [r3, #0]
20001bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20001bc0:	2b00      	cmp	r3, #0
20001bc2:	d1ec      	bne.n	20001b9e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
20001bc4:	4b56      	ldr	r3, [pc, #344]	; (20001d20 <HAL_RCC_OscConfig+0x628>)
20001bc6:	68da      	ldr	r2, [r3, #12]
20001bc8:	4b56      	ldr	r3, [pc, #344]	; (20001d24 <HAL_RCC_OscConfig+0x62c>)
20001bca:	4013      	ands	r3, r2
20001bcc:	687a      	ldr	r2, [r7, #4]
20001bce:	6a11      	ldr	r1, [r2, #32]
20001bd0:	687a      	ldr	r2, [r7, #4]
20001bd2:	6a52      	ldr	r2, [r2, #36]	; 0x24
20001bd4:	3a01      	subs	r2, #1
20001bd6:	0112      	lsls	r2, r2, #4
20001bd8:	4311      	orrs	r1, r2
20001bda:	687a      	ldr	r2, [r7, #4]
20001bdc:	6a92      	ldr	r2, [r2, #40]	; 0x28
20001bde:	0212      	lsls	r2, r2, #8
20001be0:	4311      	orrs	r1, r2
20001be2:	687a      	ldr	r2, [r7, #4]
20001be4:	6b12      	ldr	r2, [r2, #48]	; 0x30
20001be6:	0852      	lsrs	r2, r2, #1
20001be8:	3a01      	subs	r2, #1
20001bea:	0552      	lsls	r2, r2, #21
20001bec:	4311      	orrs	r1, r2
20001bee:	687a      	ldr	r2, [r7, #4]
20001bf0:	6b52      	ldr	r2, [r2, #52]	; 0x34
20001bf2:	0852      	lsrs	r2, r2, #1
20001bf4:	3a01      	subs	r2, #1
20001bf6:	0652      	lsls	r2, r2, #25
20001bf8:	4311      	orrs	r1, r2
20001bfa:	687a      	ldr	r2, [r7, #4]
20001bfc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
20001bfe:	06d2      	lsls	r2, r2, #27
20001c00:	430a      	orrs	r2, r1
20001c02:	4947      	ldr	r1, [pc, #284]	; (20001d20 <HAL_RCC_OscConfig+0x628>)
20001c04:	4313      	orrs	r3, r2
20001c06:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
20001c08:	4b45      	ldr	r3, [pc, #276]	; (20001d20 <HAL_RCC_OscConfig+0x628>)
20001c0a:	681b      	ldr	r3, [r3, #0]
20001c0c:	4a44      	ldr	r2, [pc, #272]	; (20001d20 <HAL_RCC_OscConfig+0x628>)
20001c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
20001c12:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
20001c14:	4b42      	ldr	r3, [pc, #264]	; (20001d20 <HAL_RCC_OscConfig+0x628>)
20001c16:	68db      	ldr	r3, [r3, #12]
20001c18:	4a41      	ldr	r2, [pc, #260]	; (20001d20 <HAL_RCC_OscConfig+0x628>)
20001c1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
20001c1e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20001c20:	f7ff fa2c 	bl	2000107c <HAL_GetTick>
20001c24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
20001c26:	e008      	b.n	20001c3a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
20001c28:	f7ff fa28 	bl	2000107c <HAL_GetTick>
20001c2c:	4602      	mov	r2, r0
20001c2e:	693b      	ldr	r3, [r7, #16]
20001c30:	1ad3      	subs	r3, r2, r3
20001c32:	2b02      	cmp	r3, #2
20001c34:	d901      	bls.n	20001c3a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
20001c36:	2303      	movs	r3, #3
20001c38:	e06e      	b.n	20001d18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
20001c3a:	4b39      	ldr	r3, [pc, #228]	; (20001d20 <HAL_RCC_OscConfig+0x628>)
20001c3c:	681b      	ldr	r3, [r3, #0]
20001c3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20001c42:	2b00      	cmp	r3, #0
20001c44:	d0f0      	beq.n	20001c28 <HAL_RCC_OscConfig+0x530>
20001c46:	e066      	b.n	20001d16 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
20001c48:	4b35      	ldr	r3, [pc, #212]	; (20001d20 <HAL_RCC_OscConfig+0x628>)
20001c4a:	681b      	ldr	r3, [r3, #0]
20001c4c:	4a34      	ldr	r2, [pc, #208]	; (20001d20 <HAL_RCC_OscConfig+0x628>)
20001c4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
20001c52:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
20001c54:	4b32      	ldr	r3, [pc, #200]	; (20001d20 <HAL_RCC_OscConfig+0x628>)
20001c56:	68db      	ldr	r3, [r3, #12]
20001c58:	4a31      	ldr	r2, [pc, #196]	; (20001d20 <HAL_RCC_OscConfig+0x628>)
20001c5a:	f023 0303 	bic.w	r3, r3, #3
20001c5e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
20001c60:	4b2f      	ldr	r3, [pc, #188]	; (20001d20 <HAL_RCC_OscConfig+0x628>)
20001c62:	68db      	ldr	r3, [r3, #12]
20001c64:	4a2e      	ldr	r2, [pc, #184]	; (20001d20 <HAL_RCC_OscConfig+0x628>)
20001c66:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
20001c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20001c6e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
20001c70:	f7ff fa04 	bl	2000107c <HAL_GetTick>
20001c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
20001c76:	e008      	b.n	20001c8a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
20001c78:	f7ff fa00 	bl	2000107c <HAL_GetTick>
20001c7c:	4602      	mov	r2, r0
20001c7e:	693b      	ldr	r3, [r7, #16]
20001c80:	1ad3      	subs	r3, r2, r3
20001c82:	2b02      	cmp	r3, #2
20001c84:	d901      	bls.n	20001c8a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
20001c86:	2303      	movs	r3, #3
20001c88:	e046      	b.n	20001d18 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
20001c8a:	4b25      	ldr	r3, [pc, #148]	; (20001d20 <HAL_RCC_OscConfig+0x628>)
20001c8c:	681b      	ldr	r3, [r3, #0]
20001c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20001c92:	2b00      	cmp	r3, #0
20001c94:	d1f0      	bne.n	20001c78 <HAL_RCC_OscConfig+0x580>
20001c96:	e03e      	b.n	20001d16 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
20001c98:	687b      	ldr	r3, [r7, #4]
20001c9a:	69db      	ldr	r3, [r3, #28]
20001c9c:	2b01      	cmp	r3, #1
20001c9e:	d101      	bne.n	20001ca4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
20001ca0:	2301      	movs	r3, #1
20001ca2:	e039      	b.n	20001d18 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
20001ca4:	4b1e      	ldr	r3, [pc, #120]	; (20001d20 <HAL_RCC_OscConfig+0x628>)
20001ca6:	68db      	ldr	r3, [r3, #12]
20001ca8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20001caa:	697b      	ldr	r3, [r7, #20]
20001cac:	f003 0203 	and.w	r2, r3, #3
20001cb0:	687b      	ldr	r3, [r7, #4]
20001cb2:	6a1b      	ldr	r3, [r3, #32]
20001cb4:	429a      	cmp	r2, r3
20001cb6:	d12c      	bne.n	20001d12 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
20001cb8:	697b      	ldr	r3, [r7, #20]
20001cba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
20001cbe:	687b      	ldr	r3, [r7, #4]
20001cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20001cc2:	3b01      	subs	r3, #1
20001cc4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
20001cc6:	429a      	cmp	r2, r3
20001cc8:	d123      	bne.n	20001d12 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
20001cca:	697b      	ldr	r3, [r7, #20]
20001ccc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
20001cd0:	687b      	ldr	r3, [r7, #4]
20001cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20001cd4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
20001cd6:	429a      	cmp	r2, r3
20001cd8:	d11b      	bne.n	20001d12 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
20001cda:	697b      	ldr	r3, [r7, #20]
20001cdc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
20001ce0:	687b      	ldr	r3, [r7, #4]
20001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
20001ce4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
20001ce6:	429a      	cmp	r2, r3
20001ce8:	d113      	bne.n	20001d12 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
20001cea:	697b      	ldr	r3, [r7, #20]
20001cec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
20001cf0:	687b      	ldr	r3, [r7, #4]
20001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20001cf4:	085b      	lsrs	r3, r3, #1
20001cf6:	3b01      	subs	r3, #1
20001cf8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
20001cfa:	429a      	cmp	r2, r3
20001cfc:	d109      	bne.n	20001d12 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
20001cfe:	697b      	ldr	r3, [r7, #20]
20001d00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
20001d04:	687b      	ldr	r3, [r7, #4]
20001d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
20001d08:	085b      	lsrs	r3, r3, #1
20001d0a:	3b01      	subs	r3, #1
20001d0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
20001d0e:	429a      	cmp	r2, r3
20001d10:	d001      	beq.n	20001d16 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
20001d12:	2301      	movs	r3, #1
20001d14:	e000      	b.n	20001d18 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
20001d16:	2300      	movs	r3, #0
}
20001d18:	4618      	mov	r0, r3
20001d1a:	3720      	adds	r7, #32
20001d1c:	46bd      	mov	sp, r7
20001d1e:	bd80      	pop	{r7, pc}
20001d20:	40021000 	.word	0x40021000
20001d24:	019f800c 	.word	0x019f800c

20001d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
20001d28:	b580      	push	{r7, lr}
20001d2a:	b086      	sub	sp, #24
20001d2c:	af00      	add	r7, sp, #0
20001d2e:	6078      	str	r0, [r7, #4]
20001d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
20001d32:	2300      	movs	r3, #0
20001d34:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
20001d36:	687b      	ldr	r3, [r7, #4]
20001d38:	2b00      	cmp	r3, #0
20001d3a:	d101      	bne.n	20001d40 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
20001d3c:	2301      	movs	r3, #1
20001d3e:	e11e      	b.n	20001f7e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
20001d40:	4b91      	ldr	r3, [pc, #580]	; (20001f88 <HAL_RCC_ClockConfig+0x260>)
20001d42:	681b      	ldr	r3, [r3, #0]
20001d44:	f003 030f 	and.w	r3, r3, #15
20001d48:	683a      	ldr	r2, [r7, #0]
20001d4a:	429a      	cmp	r2, r3
20001d4c:	d910      	bls.n	20001d70 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
20001d4e:	4b8e      	ldr	r3, [pc, #568]	; (20001f88 <HAL_RCC_ClockConfig+0x260>)
20001d50:	681b      	ldr	r3, [r3, #0]
20001d52:	f023 020f 	bic.w	r2, r3, #15
20001d56:	498c      	ldr	r1, [pc, #560]	; (20001f88 <HAL_RCC_ClockConfig+0x260>)
20001d58:	683b      	ldr	r3, [r7, #0]
20001d5a:	4313      	orrs	r3, r2
20001d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
20001d5e:	4b8a      	ldr	r3, [pc, #552]	; (20001f88 <HAL_RCC_ClockConfig+0x260>)
20001d60:	681b      	ldr	r3, [r3, #0]
20001d62:	f003 030f 	and.w	r3, r3, #15
20001d66:	683a      	ldr	r2, [r7, #0]
20001d68:	429a      	cmp	r2, r3
20001d6a:	d001      	beq.n	20001d70 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
20001d6c:	2301      	movs	r3, #1
20001d6e:	e106      	b.n	20001f7e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
20001d70:	687b      	ldr	r3, [r7, #4]
20001d72:	681b      	ldr	r3, [r3, #0]
20001d74:	f003 0301 	and.w	r3, r3, #1
20001d78:	2b00      	cmp	r3, #0
20001d7a:	d073      	beq.n	20001e64 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
20001d7c:	687b      	ldr	r3, [r7, #4]
20001d7e:	685b      	ldr	r3, [r3, #4]
20001d80:	2b03      	cmp	r3, #3
20001d82:	d129      	bne.n	20001dd8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
20001d84:	4b81      	ldr	r3, [pc, #516]	; (20001f8c <HAL_RCC_ClockConfig+0x264>)
20001d86:	681b      	ldr	r3, [r3, #0]
20001d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
20001d8c:	2b00      	cmp	r3, #0
20001d8e:	d101      	bne.n	20001d94 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
20001d90:	2301      	movs	r3, #1
20001d92:	e0f4      	b.n	20001f7e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
20001d94:	f000 f966 	bl	20002064 <RCC_GetSysClockFreqFromPLLSource>
20001d98:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
20001d9a:	693b      	ldr	r3, [r7, #16]
20001d9c:	4a7c      	ldr	r2, [pc, #496]	; (20001f90 <HAL_RCC_ClockConfig+0x268>)
20001d9e:	4293      	cmp	r3, r2
20001da0:	d93f      	bls.n	20001e22 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
20001da2:	4b7a      	ldr	r3, [pc, #488]	; (20001f8c <HAL_RCC_ClockConfig+0x264>)
20001da4:	689b      	ldr	r3, [r3, #8]
20001da6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
20001daa:	2b00      	cmp	r3, #0
20001dac:	d009      	beq.n	20001dc2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
20001dae:	687b      	ldr	r3, [r7, #4]
20001db0:	681b      	ldr	r3, [r3, #0]
20001db2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
20001db6:	2b00      	cmp	r3, #0
20001db8:	d033      	beq.n	20001e22 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
20001dba:	687b      	ldr	r3, [r7, #4]
20001dbc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
20001dbe:	2b00      	cmp	r3, #0
20001dc0:	d12f      	bne.n	20001e22 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
20001dc2:	4b72      	ldr	r3, [pc, #456]	; (20001f8c <HAL_RCC_ClockConfig+0x264>)
20001dc4:	689b      	ldr	r3, [r3, #8]
20001dc6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
20001dca:	4a70      	ldr	r2, [pc, #448]	; (20001f8c <HAL_RCC_ClockConfig+0x264>)
20001dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
20001dd0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
20001dd2:	2380      	movs	r3, #128	; 0x80
20001dd4:	617b      	str	r3, [r7, #20]
20001dd6:	e024      	b.n	20001e22 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
20001dd8:	687b      	ldr	r3, [r7, #4]
20001dda:	685b      	ldr	r3, [r3, #4]
20001ddc:	2b02      	cmp	r3, #2
20001dde:	d107      	bne.n	20001df0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
20001de0:	4b6a      	ldr	r3, [pc, #424]	; (20001f8c <HAL_RCC_ClockConfig+0x264>)
20001de2:	681b      	ldr	r3, [r3, #0]
20001de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
20001de8:	2b00      	cmp	r3, #0
20001dea:	d109      	bne.n	20001e00 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
20001dec:	2301      	movs	r3, #1
20001dee:	e0c6      	b.n	20001f7e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
20001df0:	4b66      	ldr	r3, [pc, #408]	; (20001f8c <HAL_RCC_ClockConfig+0x264>)
20001df2:	681b      	ldr	r3, [r3, #0]
20001df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
20001df8:	2b00      	cmp	r3, #0
20001dfa:	d101      	bne.n	20001e00 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
20001dfc:	2301      	movs	r3, #1
20001dfe:	e0be      	b.n	20001f7e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
20001e00:	f000 f8ce 	bl	20001fa0 <HAL_RCC_GetSysClockFreq>
20001e04:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
20001e06:	693b      	ldr	r3, [r7, #16]
20001e08:	4a61      	ldr	r2, [pc, #388]	; (20001f90 <HAL_RCC_ClockConfig+0x268>)
20001e0a:	4293      	cmp	r3, r2
20001e0c:	d909      	bls.n	20001e22 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
20001e0e:	4b5f      	ldr	r3, [pc, #380]	; (20001f8c <HAL_RCC_ClockConfig+0x264>)
20001e10:	689b      	ldr	r3, [r3, #8]
20001e12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
20001e16:	4a5d      	ldr	r2, [pc, #372]	; (20001f8c <HAL_RCC_ClockConfig+0x264>)
20001e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
20001e1c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
20001e1e:	2380      	movs	r3, #128	; 0x80
20001e20:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
20001e22:	4b5a      	ldr	r3, [pc, #360]	; (20001f8c <HAL_RCC_ClockConfig+0x264>)
20001e24:	689b      	ldr	r3, [r3, #8]
20001e26:	f023 0203 	bic.w	r2, r3, #3
20001e2a:	687b      	ldr	r3, [r7, #4]
20001e2c:	685b      	ldr	r3, [r3, #4]
20001e2e:	4957      	ldr	r1, [pc, #348]	; (20001f8c <HAL_RCC_ClockConfig+0x264>)
20001e30:	4313      	orrs	r3, r2
20001e32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
20001e34:	f7ff f922 	bl	2000107c <HAL_GetTick>
20001e38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20001e3a:	e00a      	b.n	20001e52 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20001e3c:	f7ff f91e 	bl	2000107c <HAL_GetTick>
20001e40:	4602      	mov	r2, r0
20001e42:	68fb      	ldr	r3, [r7, #12]
20001e44:	1ad3      	subs	r3, r2, r3
20001e46:	f241 3288 	movw	r2, #5000	; 0x1388
20001e4a:	4293      	cmp	r3, r2
20001e4c:	d901      	bls.n	20001e52 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
20001e4e:	2303      	movs	r3, #3
20001e50:	e095      	b.n	20001f7e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
20001e52:	4b4e      	ldr	r3, [pc, #312]	; (20001f8c <HAL_RCC_ClockConfig+0x264>)
20001e54:	689b      	ldr	r3, [r3, #8]
20001e56:	f003 020c 	and.w	r2, r3, #12
20001e5a:	687b      	ldr	r3, [r7, #4]
20001e5c:	685b      	ldr	r3, [r3, #4]
20001e5e:	009b      	lsls	r3, r3, #2
20001e60:	429a      	cmp	r2, r3
20001e62:	d1eb      	bne.n	20001e3c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
20001e64:	687b      	ldr	r3, [r7, #4]
20001e66:	681b      	ldr	r3, [r3, #0]
20001e68:	f003 0302 	and.w	r3, r3, #2
20001e6c:	2b00      	cmp	r3, #0
20001e6e:	d023      	beq.n	20001eb8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20001e70:	687b      	ldr	r3, [r7, #4]
20001e72:	681b      	ldr	r3, [r3, #0]
20001e74:	f003 0304 	and.w	r3, r3, #4
20001e78:	2b00      	cmp	r3, #0
20001e7a:	d005      	beq.n	20001e88 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
20001e7c:	4b43      	ldr	r3, [pc, #268]	; (20001f8c <HAL_RCC_ClockConfig+0x264>)
20001e7e:	689b      	ldr	r3, [r3, #8]
20001e80:	4a42      	ldr	r2, [pc, #264]	; (20001f8c <HAL_RCC_ClockConfig+0x264>)
20001e82:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
20001e86:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20001e88:	687b      	ldr	r3, [r7, #4]
20001e8a:	681b      	ldr	r3, [r3, #0]
20001e8c:	f003 0308 	and.w	r3, r3, #8
20001e90:	2b00      	cmp	r3, #0
20001e92:	d007      	beq.n	20001ea4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
20001e94:	4b3d      	ldr	r3, [pc, #244]	; (20001f8c <HAL_RCC_ClockConfig+0x264>)
20001e96:	689b      	ldr	r3, [r3, #8]
20001e98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
20001e9c:	4a3b      	ldr	r2, [pc, #236]	; (20001f8c <HAL_RCC_ClockConfig+0x264>)
20001e9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
20001ea2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
20001ea4:	4b39      	ldr	r3, [pc, #228]	; (20001f8c <HAL_RCC_ClockConfig+0x264>)
20001ea6:	689b      	ldr	r3, [r3, #8]
20001ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
20001eac:	687b      	ldr	r3, [r7, #4]
20001eae:	689b      	ldr	r3, [r3, #8]
20001eb0:	4936      	ldr	r1, [pc, #216]	; (20001f8c <HAL_RCC_ClockConfig+0x264>)
20001eb2:	4313      	orrs	r3, r2
20001eb4:	608b      	str	r3, [r1, #8]
20001eb6:	e008      	b.n	20001eca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
20001eb8:	697b      	ldr	r3, [r7, #20]
20001eba:	2b80      	cmp	r3, #128	; 0x80
20001ebc:	d105      	bne.n	20001eca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
20001ebe:	4b33      	ldr	r3, [pc, #204]	; (20001f8c <HAL_RCC_ClockConfig+0x264>)
20001ec0:	689b      	ldr	r3, [r3, #8]
20001ec2:	4a32      	ldr	r2, [pc, #200]	; (20001f8c <HAL_RCC_ClockConfig+0x264>)
20001ec4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
20001ec8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
20001eca:	4b2f      	ldr	r3, [pc, #188]	; (20001f88 <HAL_RCC_ClockConfig+0x260>)
20001ecc:	681b      	ldr	r3, [r3, #0]
20001ece:	f003 030f 	and.w	r3, r3, #15
20001ed2:	683a      	ldr	r2, [r7, #0]
20001ed4:	429a      	cmp	r2, r3
20001ed6:	d21d      	bcs.n	20001f14 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
20001ed8:	4b2b      	ldr	r3, [pc, #172]	; (20001f88 <HAL_RCC_ClockConfig+0x260>)
20001eda:	681b      	ldr	r3, [r3, #0]
20001edc:	f023 020f 	bic.w	r2, r3, #15
20001ee0:	4929      	ldr	r1, [pc, #164]	; (20001f88 <HAL_RCC_ClockConfig+0x260>)
20001ee2:	683b      	ldr	r3, [r7, #0]
20001ee4:	4313      	orrs	r3, r2
20001ee6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
20001ee8:	f7ff f8c8 	bl	2000107c <HAL_GetTick>
20001eec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
20001eee:	e00a      	b.n	20001f06 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
20001ef0:	f7ff f8c4 	bl	2000107c <HAL_GetTick>
20001ef4:	4602      	mov	r2, r0
20001ef6:	68fb      	ldr	r3, [r7, #12]
20001ef8:	1ad3      	subs	r3, r2, r3
20001efa:	f241 3288 	movw	r2, #5000	; 0x1388
20001efe:	4293      	cmp	r3, r2
20001f00:	d901      	bls.n	20001f06 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
20001f02:	2303      	movs	r3, #3
20001f04:	e03b      	b.n	20001f7e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
20001f06:	4b20      	ldr	r3, [pc, #128]	; (20001f88 <HAL_RCC_ClockConfig+0x260>)
20001f08:	681b      	ldr	r3, [r3, #0]
20001f0a:	f003 030f 	and.w	r3, r3, #15
20001f0e:	683a      	ldr	r2, [r7, #0]
20001f10:	429a      	cmp	r2, r3
20001f12:	d1ed      	bne.n	20001ef0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
20001f14:	687b      	ldr	r3, [r7, #4]
20001f16:	681b      	ldr	r3, [r3, #0]
20001f18:	f003 0304 	and.w	r3, r3, #4
20001f1c:	2b00      	cmp	r3, #0
20001f1e:	d008      	beq.n	20001f32 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
20001f20:	4b1a      	ldr	r3, [pc, #104]	; (20001f8c <HAL_RCC_ClockConfig+0x264>)
20001f22:	689b      	ldr	r3, [r3, #8]
20001f24:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
20001f28:	687b      	ldr	r3, [r7, #4]
20001f2a:	68db      	ldr	r3, [r3, #12]
20001f2c:	4917      	ldr	r1, [pc, #92]	; (20001f8c <HAL_RCC_ClockConfig+0x264>)
20001f2e:	4313      	orrs	r3, r2
20001f30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
20001f32:	687b      	ldr	r3, [r7, #4]
20001f34:	681b      	ldr	r3, [r3, #0]
20001f36:	f003 0308 	and.w	r3, r3, #8
20001f3a:	2b00      	cmp	r3, #0
20001f3c:	d009      	beq.n	20001f52 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
20001f3e:	4b13      	ldr	r3, [pc, #76]	; (20001f8c <HAL_RCC_ClockConfig+0x264>)
20001f40:	689b      	ldr	r3, [r3, #8]
20001f42:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
20001f46:	687b      	ldr	r3, [r7, #4]
20001f48:	691b      	ldr	r3, [r3, #16]
20001f4a:	00db      	lsls	r3, r3, #3
20001f4c:	490f      	ldr	r1, [pc, #60]	; (20001f8c <HAL_RCC_ClockConfig+0x264>)
20001f4e:	4313      	orrs	r3, r2
20001f50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
20001f52:	f000 f825 	bl	20001fa0 <HAL_RCC_GetSysClockFreq>
20001f56:	4602      	mov	r2, r0
20001f58:	4b0c      	ldr	r3, [pc, #48]	; (20001f8c <HAL_RCC_ClockConfig+0x264>)
20001f5a:	689b      	ldr	r3, [r3, #8]
20001f5c:	091b      	lsrs	r3, r3, #4
20001f5e:	f003 030f 	and.w	r3, r3, #15
20001f62:	490c      	ldr	r1, [pc, #48]	; (20001f94 <HAL_RCC_ClockConfig+0x26c>)
20001f64:	5ccb      	ldrb	r3, [r1, r3]
20001f66:	f003 031f 	and.w	r3, r3, #31
20001f6a:	fa22 f303 	lsr.w	r3, r2, r3
20001f6e:	4a0a      	ldr	r2, [pc, #40]	; (20001f98 <HAL_RCC_ClockConfig+0x270>)
20001f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
20001f72:	4b0a      	ldr	r3, [pc, #40]	; (20001f9c <HAL_RCC_ClockConfig+0x274>)
20001f74:	681b      	ldr	r3, [r3, #0]
20001f76:	4618      	mov	r0, r3
20001f78:	f7ff f834 	bl	20000fe4 <HAL_InitTick>
20001f7c:	4603      	mov	r3, r0
}
20001f7e:	4618      	mov	r0, r3
20001f80:	3718      	adds	r7, #24
20001f82:	46bd      	mov	sp, r7
20001f84:	bd80      	pop	{r7, pc}
20001f86:	bf00      	nop
20001f88:	40022000 	.word	0x40022000
20001f8c:	40021000 	.word	0x40021000
20001f90:	04c4b400 	.word	0x04c4b400
20001f94:	20003058 	.word	0x20003058
20001f98:	200003e0 	.word	0x200003e0
20001f9c:	200003e4 	.word	0x200003e4

20001fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
20001fa0:	b480      	push	{r7}
20001fa2:	b087      	sub	sp, #28
20001fa4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
20001fa6:	4b2c      	ldr	r3, [pc, #176]	; (20002058 <HAL_RCC_GetSysClockFreq+0xb8>)
20001fa8:	689b      	ldr	r3, [r3, #8]
20001faa:	f003 030c 	and.w	r3, r3, #12
20001fae:	2b04      	cmp	r3, #4
20001fb0:	d102      	bne.n	20001fb8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
20001fb2:	4b2a      	ldr	r3, [pc, #168]	; (2000205c <HAL_RCC_GetSysClockFreq+0xbc>)
20001fb4:	613b      	str	r3, [r7, #16]
20001fb6:	e047      	b.n	20002048 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
20001fb8:	4b27      	ldr	r3, [pc, #156]	; (20002058 <HAL_RCC_GetSysClockFreq+0xb8>)
20001fba:	689b      	ldr	r3, [r3, #8]
20001fbc:	f003 030c 	and.w	r3, r3, #12
20001fc0:	2b08      	cmp	r3, #8
20001fc2:	d102      	bne.n	20001fca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
20001fc4:	4b26      	ldr	r3, [pc, #152]	; (20002060 <HAL_RCC_GetSysClockFreq+0xc0>)
20001fc6:	613b      	str	r3, [r7, #16]
20001fc8:	e03e      	b.n	20002048 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
20001fca:	4b23      	ldr	r3, [pc, #140]	; (20002058 <HAL_RCC_GetSysClockFreq+0xb8>)
20001fcc:	689b      	ldr	r3, [r3, #8]
20001fce:	f003 030c 	and.w	r3, r3, #12
20001fd2:	2b0c      	cmp	r3, #12
20001fd4:	d136      	bne.n	20002044 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
20001fd6:	4b20      	ldr	r3, [pc, #128]	; (20002058 <HAL_RCC_GetSysClockFreq+0xb8>)
20001fd8:	68db      	ldr	r3, [r3, #12]
20001fda:	f003 0303 	and.w	r3, r3, #3
20001fde:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
20001fe0:	4b1d      	ldr	r3, [pc, #116]	; (20002058 <HAL_RCC_GetSysClockFreq+0xb8>)
20001fe2:	68db      	ldr	r3, [r3, #12]
20001fe4:	091b      	lsrs	r3, r3, #4
20001fe6:	f003 030f 	and.w	r3, r3, #15
20001fea:	3301      	adds	r3, #1
20001fec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
20001fee:	68fb      	ldr	r3, [r7, #12]
20001ff0:	2b03      	cmp	r3, #3
20001ff2:	d10c      	bne.n	2000200e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
20001ff4:	4a1a      	ldr	r2, [pc, #104]	; (20002060 <HAL_RCC_GetSysClockFreq+0xc0>)
20001ff6:	68bb      	ldr	r3, [r7, #8]
20001ff8:	fbb2 f3f3 	udiv	r3, r2, r3
20001ffc:	4a16      	ldr	r2, [pc, #88]	; (20002058 <HAL_RCC_GetSysClockFreq+0xb8>)
20001ffe:	68d2      	ldr	r2, [r2, #12]
20002000:	0a12      	lsrs	r2, r2, #8
20002002:	f002 027f 	and.w	r2, r2, #127	; 0x7f
20002006:	fb02 f303 	mul.w	r3, r2, r3
2000200a:	617b      	str	r3, [r7, #20]
      break;
2000200c:	e00c      	b.n	20002028 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
2000200e:	4a13      	ldr	r2, [pc, #76]	; (2000205c <HAL_RCC_GetSysClockFreq+0xbc>)
20002010:	68bb      	ldr	r3, [r7, #8]
20002012:	fbb2 f3f3 	udiv	r3, r2, r3
20002016:	4a10      	ldr	r2, [pc, #64]	; (20002058 <HAL_RCC_GetSysClockFreq+0xb8>)
20002018:	68d2      	ldr	r2, [r2, #12]
2000201a:	0a12      	lsrs	r2, r2, #8
2000201c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
20002020:	fb02 f303 	mul.w	r3, r2, r3
20002024:	617b      	str	r3, [r7, #20]
      break;
20002026:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
20002028:	4b0b      	ldr	r3, [pc, #44]	; (20002058 <HAL_RCC_GetSysClockFreq+0xb8>)
2000202a:	68db      	ldr	r3, [r3, #12]
2000202c:	0e5b      	lsrs	r3, r3, #25
2000202e:	f003 0303 	and.w	r3, r3, #3
20002032:	3301      	adds	r3, #1
20002034:	005b      	lsls	r3, r3, #1
20002036:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
20002038:	697a      	ldr	r2, [r7, #20]
2000203a:	687b      	ldr	r3, [r7, #4]
2000203c:	fbb2 f3f3 	udiv	r3, r2, r3
20002040:	613b      	str	r3, [r7, #16]
20002042:	e001      	b.n	20002048 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
20002044:	2300      	movs	r3, #0
20002046:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
20002048:	693b      	ldr	r3, [r7, #16]
}
2000204a:	4618      	mov	r0, r3
2000204c:	371c      	adds	r7, #28
2000204e:	46bd      	mov	sp, r7
20002050:	f85d 7b04 	ldr.w	r7, [sp], #4
20002054:	4770      	bx	lr
20002056:	bf00      	nop
20002058:	40021000 	.word	0x40021000
2000205c:	00f42400 	.word	0x00f42400
20002060:	016e3600 	.word	0x016e3600

20002064 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
20002064:	b480      	push	{r7}
20002066:	b087      	sub	sp, #28
20002068:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
2000206a:	4b1e      	ldr	r3, [pc, #120]	; (200020e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
2000206c:	68db      	ldr	r3, [r3, #12]
2000206e:	f003 0303 	and.w	r3, r3, #3
20002072:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
20002074:	4b1b      	ldr	r3, [pc, #108]	; (200020e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
20002076:	68db      	ldr	r3, [r3, #12]
20002078:	091b      	lsrs	r3, r3, #4
2000207a:	f003 030f 	and.w	r3, r3, #15
2000207e:	3301      	adds	r3, #1
20002080:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
20002082:	693b      	ldr	r3, [r7, #16]
20002084:	2b03      	cmp	r3, #3
20002086:	d10c      	bne.n	200020a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
20002088:	4a17      	ldr	r2, [pc, #92]	; (200020e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
2000208a:	68fb      	ldr	r3, [r7, #12]
2000208c:	fbb2 f3f3 	udiv	r3, r2, r3
20002090:	4a14      	ldr	r2, [pc, #80]	; (200020e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
20002092:	68d2      	ldr	r2, [r2, #12]
20002094:	0a12      	lsrs	r2, r2, #8
20002096:	f002 027f 	and.w	r2, r2, #127	; 0x7f
2000209a:	fb02 f303 	mul.w	r3, r2, r3
2000209e:	617b      	str	r3, [r7, #20]
    break;
200020a0:	e00c      	b.n	200020bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
200020a2:	4a12      	ldr	r2, [pc, #72]	; (200020ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
200020a4:	68fb      	ldr	r3, [r7, #12]
200020a6:	fbb2 f3f3 	udiv	r3, r2, r3
200020aa:	4a0e      	ldr	r2, [pc, #56]	; (200020e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
200020ac:	68d2      	ldr	r2, [r2, #12]
200020ae:	0a12      	lsrs	r2, r2, #8
200020b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
200020b4:	fb02 f303 	mul.w	r3, r2, r3
200020b8:	617b      	str	r3, [r7, #20]
    break;
200020ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
200020bc:	4b09      	ldr	r3, [pc, #36]	; (200020e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
200020be:	68db      	ldr	r3, [r3, #12]
200020c0:	0e5b      	lsrs	r3, r3, #25
200020c2:	f003 0303 	and.w	r3, r3, #3
200020c6:	3301      	adds	r3, #1
200020c8:	005b      	lsls	r3, r3, #1
200020ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
200020cc:	697a      	ldr	r2, [r7, #20]
200020ce:	68bb      	ldr	r3, [r7, #8]
200020d0:	fbb2 f3f3 	udiv	r3, r2, r3
200020d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
200020d6:	687b      	ldr	r3, [r7, #4]
}
200020d8:	4618      	mov	r0, r3
200020da:	371c      	adds	r7, #28
200020dc:	46bd      	mov	sp, r7
200020de:	f85d 7b04 	ldr.w	r7, [sp], #4
200020e2:	4770      	bx	lr
200020e4:	40021000 	.word	0x40021000
200020e8:	016e3600 	.word	0x016e3600
200020ec:	00f42400 	.word	0x00f42400

200020f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
200020f0:	b580      	push	{r7, lr}
200020f2:	b084      	sub	sp, #16
200020f4:	af00      	add	r7, sp, #0
200020f6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
200020f8:	687b      	ldr	r3, [r7, #4]
200020fa:	2b00      	cmp	r3, #0
200020fc:	d101      	bne.n	20002102 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
200020fe:	2301      	movs	r3, #1
20002100:	e09d      	b.n	2000223e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
20002102:	687b      	ldr	r3, [r7, #4]
20002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
20002106:	2b00      	cmp	r3, #0
20002108:	d108      	bne.n	2000211c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
2000210a:	687b      	ldr	r3, [r7, #4]
2000210c:	685b      	ldr	r3, [r3, #4]
2000210e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20002112:	d009      	beq.n	20002128 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
20002114:	687b      	ldr	r3, [r7, #4]
20002116:	2200      	movs	r2, #0
20002118:	61da      	str	r2, [r3, #28]
2000211a:	e005      	b.n	20002128 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
2000211c:	687b      	ldr	r3, [r7, #4]
2000211e:	2200      	movs	r2, #0
20002120:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
20002122:	687b      	ldr	r3, [r7, #4]
20002124:	2200      	movs	r2, #0
20002126:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
20002128:	687b      	ldr	r3, [r7, #4]
2000212a:	2200      	movs	r2, #0
2000212c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
2000212e:	687b      	ldr	r3, [r7, #4]
20002130:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
20002134:	b2db      	uxtb	r3, r3
20002136:	2b00      	cmp	r3, #0
20002138:	d106      	bne.n	20002148 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
2000213a:	687b      	ldr	r3, [r7, #4]
2000213c:	2200      	movs	r2, #0
2000213e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
20002142:	6878      	ldr	r0, [r7, #4]
20002144:	f7fe fc80 	bl	20000a48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
20002148:	687b      	ldr	r3, [r7, #4]
2000214a:	2202      	movs	r2, #2
2000214c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
20002150:	687b      	ldr	r3, [r7, #4]
20002152:	681b      	ldr	r3, [r3, #0]
20002154:	681a      	ldr	r2, [r3, #0]
20002156:	687b      	ldr	r3, [r7, #4]
20002158:	681b      	ldr	r3, [r3, #0]
2000215a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
2000215e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
20002160:	687b      	ldr	r3, [r7, #4]
20002162:	68db      	ldr	r3, [r3, #12]
20002164:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
20002168:	d902      	bls.n	20002170 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
2000216a:	2300      	movs	r3, #0
2000216c:	60fb      	str	r3, [r7, #12]
2000216e:	e002      	b.n	20002176 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
20002170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
20002174:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
20002176:	687b      	ldr	r3, [r7, #4]
20002178:	68db      	ldr	r3, [r3, #12]
2000217a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
2000217e:	d007      	beq.n	20002190 <HAL_SPI_Init+0xa0>
20002180:	687b      	ldr	r3, [r7, #4]
20002182:	68db      	ldr	r3, [r3, #12]
20002184:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
20002188:	d002      	beq.n	20002190 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
2000218a:	687b      	ldr	r3, [r7, #4]
2000218c:	2200      	movs	r2, #0
2000218e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
20002190:	687b      	ldr	r3, [r7, #4]
20002192:	685b      	ldr	r3, [r3, #4]
20002194:	f403 7282 	and.w	r2, r3, #260	; 0x104
20002198:	687b      	ldr	r3, [r7, #4]
2000219a:	689b      	ldr	r3, [r3, #8]
2000219c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
200021a0:	431a      	orrs	r2, r3
200021a2:	687b      	ldr	r3, [r7, #4]
200021a4:	691b      	ldr	r3, [r3, #16]
200021a6:	f003 0302 	and.w	r3, r3, #2
200021aa:	431a      	orrs	r2, r3
200021ac:	687b      	ldr	r3, [r7, #4]
200021ae:	695b      	ldr	r3, [r3, #20]
200021b0:	f003 0301 	and.w	r3, r3, #1
200021b4:	431a      	orrs	r2, r3
200021b6:	687b      	ldr	r3, [r7, #4]
200021b8:	699b      	ldr	r3, [r3, #24]
200021ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
200021be:	431a      	orrs	r2, r3
200021c0:	687b      	ldr	r3, [r7, #4]
200021c2:	69db      	ldr	r3, [r3, #28]
200021c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
200021c8:	431a      	orrs	r2, r3
200021ca:	687b      	ldr	r3, [r7, #4]
200021cc:	6a1b      	ldr	r3, [r3, #32]
200021ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
200021d2:	ea42 0103 	orr.w	r1, r2, r3
200021d6:	687b      	ldr	r3, [r7, #4]
200021d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
200021da:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
200021de:	687b      	ldr	r3, [r7, #4]
200021e0:	681b      	ldr	r3, [r3, #0]
200021e2:	430a      	orrs	r2, r1
200021e4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
200021e6:	687b      	ldr	r3, [r7, #4]
200021e8:	699b      	ldr	r3, [r3, #24]
200021ea:	0c1b      	lsrs	r3, r3, #16
200021ec:	f003 0204 	and.w	r2, r3, #4
200021f0:	687b      	ldr	r3, [r7, #4]
200021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
200021f4:	f003 0310 	and.w	r3, r3, #16
200021f8:	431a      	orrs	r2, r3
200021fa:	687b      	ldr	r3, [r7, #4]
200021fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
200021fe:	f003 0308 	and.w	r3, r3, #8
20002202:	431a      	orrs	r2, r3
20002204:	687b      	ldr	r3, [r7, #4]
20002206:	68db      	ldr	r3, [r3, #12]
20002208:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
2000220c:	ea42 0103 	orr.w	r1, r2, r3
20002210:	68fb      	ldr	r3, [r7, #12]
20002212:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
20002216:	687b      	ldr	r3, [r7, #4]
20002218:	681b      	ldr	r3, [r3, #0]
2000221a:	430a      	orrs	r2, r1
2000221c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
2000221e:	687b      	ldr	r3, [r7, #4]
20002220:	681b      	ldr	r3, [r3, #0]
20002222:	69da      	ldr	r2, [r3, #28]
20002224:	687b      	ldr	r3, [r7, #4]
20002226:	681b      	ldr	r3, [r3, #0]
20002228:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
2000222c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
2000222e:	687b      	ldr	r3, [r7, #4]
20002230:	2200      	movs	r2, #0
20002232:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
20002234:	687b      	ldr	r3, [r7, #4]
20002236:	2201      	movs	r2, #1
20002238:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
2000223c:	2300      	movs	r3, #0
}
2000223e:	4618      	mov	r0, r3
20002240:	3710      	adds	r7, #16
20002242:	46bd      	mov	sp, r7
20002244:	bd80      	pop	{r7, pc}

20002246 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
20002246:	b580      	push	{r7, lr}
20002248:	b088      	sub	sp, #32
2000224a:	af00      	add	r7, sp, #0
2000224c:	60f8      	str	r0, [r7, #12]
2000224e:	60b9      	str	r1, [r7, #8]
20002250:	603b      	str	r3, [r7, #0]
20002252:	4613      	mov	r3, r2
20002254:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
20002256:	2300      	movs	r3, #0
20002258:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
2000225a:	68fb      	ldr	r3, [r7, #12]
2000225c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
20002260:	2b01      	cmp	r3, #1
20002262:	d101      	bne.n	20002268 <HAL_SPI_Transmit+0x22>
20002264:	2302      	movs	r3, #2
20002266:	e158      	b.n	2000251a <HAL_SPI_Transmit+0x2d4>
20002268:	68fb      	ldr	r3, [r7, #12]
2000226a:	2201      	movs	r2, #1
2000226c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
20002270:	f7fe ff04 	bl	2000107c <HAL_GetTick>
20002274:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
20002276:	88fb      	ldrh	r3, [r7, #6]
20002278:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
2000227a:	68fb      	ldr	r3, [r7, #12]
2000227c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
20002280:	b2db      	uxtb	r3, r3
20002282:	2b01      	cmp	r3, #1
20002284:	d002      	beq.n	2000228c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
20002286:	2302      	movs	r3, #2
20002288:	77fb      	strb	r3, [r7, #31]
    goto error;
2000228a:	e13d      	b.n	20002508 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
2000228c:	68bb      	ldr	r3, [r7, #8]
2000228e:	2b00      	cmp	r3, #0
20002290:	d002      	beq.n	20002298 <HAL_SPI_Transmit+0x52>
20002292:	88fb      	ldrh	r3, [r7, #6]
20002294:	2b00      	cmp	r3, #0
20002296:	d102      	bne.n	2000229e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
20002298:	2301      	movs	r3, #1
2000229a:	77fb      	strb	r3, [r7, #31]
    goto error;
2000229c:	e134      	b.n	20002508 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
2000229e:	68fb      	ldr	r3, [r7, #12]
200022a0:	2203      	movs	r2, #3
200022a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
200022a6:	68fb      	ldr	r3, [r7, #12]
200022a8:	2200      	movs	r2, #0
200022aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
200022ac:	68fb      	ldr	r3, [r7, #12]
200022ae:	68ba      	ldr	r2, [r7, #8]
200022b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
200022b2:	68fb      	ldr	r3, [r7, #12]
200022b4:	88fa      	ldrh	r2, [r7, #6]
200022b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
200022b8:	68fb      	ldr	r3, [r7, #12]
200022ba:	88fa      	ldrh	r2, [r7, #6]
200022bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
200022be:	68fb      	ldr	r3, [r7, #12]
200022c0:	2200      	movs	r2, #0
200022c2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
200022c4:	68fb      	ldr	r3, [r7, #12]
200022c6:	2200      	movs	r2, #0
200022c8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
200022cc:	68fb      	ldr	r3, [r7, #12]
200022ce:	2200      	movs	r2, #0
200022d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
200022d4:	68fb      	ldr	r3, [r7, #12]
200022d6:	2200      	movs	r2, #0
200022d8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
200022da:	68fb      	ldr	r3, [r7, #12]
200022dc:	2200      	movs	r2, #0
200022de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
200022e0:	68fb      	ldr	r3, [r7, #12]
200022e2:	689b      	ldr	r3, [r3, #8]
200022e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
200022e8:	d10f      	bne.n	2000230a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
200022ea:	68fb      	ldr	r3, [r7, #12]
200022ec:	681b      	ldr	r3, [r3, #0]
200022ee:	681a      	ldr	r2, [r3, #0]
200022f0:	68fb      	ldr	r3, [r7, #12]
200022f2:	681b      	ldr	r3, [r3, #0]
200022f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
200022f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
200022fa:	68fb      	ldr	r3, [r7, #12]
200022fc:	681b      	ldr	r3, [r3, #0]
200022fe:	681a      	ldr	r2, [r3, #0]
20002300:	68fb      	ldr	r3, [r7, #12]
20002302:	681b      	ldr	r3, [r3, #0]
20002304:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
20002308:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
2000230a:	68fb      	ldr	r3, [r7, #12]
2000230c:	681b      	ldr	r3, [r3, #0]
2000230e:	681b      	ldr	r3, [r3, #0]
20002310:	f003 0340 	and.w	r3, r3, #64	; 0x40
20002314:	2b40      	cmp	r3, #64	; 0x40
20002316:	d007      	beq.n	20002328 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20002318:	68fb      	ldr	r3, [r7, #12]
2000231a:	681b      	ldr	r3, [r3, #0]
2000231c:	681a      	ldr	r2, [r3, #0]
2000231e:	68fb      	ldr	r3, [r7, #12]
20002320:	681b      	ldr	r3, [r3, #0]
20002322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
20002326:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
20002328:	68fb      	ldr	r3, [r7, #12]
2000232a:	68db      	ldr	r3, [r3, #12]
2000232c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
20002330:	d94b      	bls.n	200023ca <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
20002332:	68fb      	ldr	r3, [r7, #12]
20002334:	685b      	ldr	r3, [r3, #4]
20002336:	2b00      	cmp	r3, #0
20002338:	d002      	beq.n	20002340 <HAL_SPI_Transmit+0xfa>
2000233a:	8afb      	ldrh	r3, [r7, #22]
2000233c:	2b01      	cmp	r3, #1
2000233e:	d13e      	bne.n	200023be <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20002340:	68fb      	ldr	r3, [r7, #12]
20002342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20002344:	881a      	ldrh	r2, [r3, #0]
20002346:	68fb      	ldr	r3, [r7, #12]
20002348:	681b      	ldr	r3, [r3, #0]
2000234a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
2000234c:	68fb      	ldr	r3, [r7, #12]
2000234e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20002350:	1c9a      	adds	r2, r3, #2
20002352:	68fb      	ldr	r3, [r7, #12]
20002354:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
20002356:	68fb      	ldr	r3, [r7, #12]
20002358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2000235a:	b29b      	uxth	r3, r3
2000235c:	3b01      	subs	r3, #1
2000235e:	b29a      	uxth	r2, r3
20002360:	68fb      	ldr	r3, [r7, #12]
20002362:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
20002364:	e02b      	b.n	200023be <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
20002366:	68fb      	ldr	r3, [r7, #12]
20002368:	681b      	ldr	r3, [r3, #0]
2000236a:	689b      	ldr	r3, [r3, #8]
2000236c:	f003 0302 	and.w	r3, r3, #2
20002370:	2b02      	cmp	r3, #2
20002372:	d112      	bne.n	2000239a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20002374:	68fb      	ldr	r3, [r7, #12]
20002376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20002378:	881a      	ldrh	r2, [r3, #0]
2000237a:	68fb      	ldr	r3, [r7, #12]
2000237c:	681b      	ldr	r3, [r3, #0]
2000237e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
20002380:	68fb      	ldr	r3, [r7, #12]
20002382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20002384:	1c9a      	adds	r2, r3, #2
20002386:	68fb      	ldr	r3, [r7, #12]
20002388:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
2000238a:	68fb      	ldr	r3, [r7, #12]
2000238c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2000238e:	b29b      	uxth	r3, r3
20002390:	3b01      	subs	r3, #1
20002392:	b29a      	uxth	r2, r3
20002394:	68fb      	ldr	r3, [r7, #12]
20002396:	87da      	strh	r2, [r3, #62]	; 0x3e
20002398:	e011      	b.n	200023be <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
2000239a:	f7fe fe6f 	bl	2000107c <HAL_GetTick>
2000239e:	4602      	mov	r2, r0
200023a0:	69bb      	ldr	r3, [r7, #24]
200023a2:	1ad3      	subs	r3, r2, r3
200023a4:	683a      	ldr	r2, [r7, #0]
200023a6:	429a      	cmp	r2, r3
200023a8:	d803      	bhi.n	200023b2 <HAL_SPI_Transmit+0x16c>
200023aa:	683b      	ldr	r3, [r7, #0]
200023ac:	f1b3 3fff 	cmp.w	r3, #4294967295
200023b0:	d102      	bne.n	200023b8 <HAL_SPI_Transmit+0x172>
200023b2:	683b      	ldr	r3, [r7, #0]
200023b4:	2b00      	cmp	r3, #0
200023b6:	d102      	bne.n	200023be <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
200023b8:	2303      	movs	r3, #3
200023ba:	77fb      	strb	r3, [r7, #31]
          goto error;
200023bc:	e0a4      	b.n	20002508 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
200023be:	68fb      	ldr	r3, [r7, #12]
200023c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200023c2:	b29b      	uxth	r3, r3
200023c4:	2b00      	cmp	r3, #0
200023c6:	d1ce      	bne.n	20002366 <HAL_SPI_Transmit+0x120>
200023c8:	e07c      	b.n	200024c4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
200023ca:	68fb      	ldr	r3, [r7, #12]
200023cc:	685b      	ldr	r3, [r3, #4]
200023ce:	2b00      	cmp	r3, #0
200023d0:	d002      	beq.n	200023d8 <HAL_SPI_Transmit+0x192>
200023d2:	8afb      	ldrh	r3, [r7, #22]
200023d4:	2b01      	cmp	r3, #1
200023d6:	d170      	bne.n	200024ba <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
200023d8:	68fb      	ldr	r3, [r7, #12]
200023da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200023dc:	b29b      	uxth	r3, r3
200023de:	2b01      	cmp	r3, #1
200023e0:	d912      	bls.n	20002408 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
200023e2:	68fb      	ldr	r3, [r7, #12]
200023e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200023e6:	881a      	ldrh	r2, [r3, #0]
200023e8:	68fb      	ldr	r3, [r7, #12]
200023ea:	681b      	ldr	r3, [r3, #0]
200023ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
200023ee:	68fb      	ldr	r3, [r7, #12]
200023f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200023f2:	1c9a      	adds	r2, r3, #2
200023f4:	68fb      	ldr	r3, [r7, #12]
200023f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
200023f8:	68fb      	ldr	r3, [r7, #12]
200023fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200023fc:	b29b      	uxth	r3, r3
200023fe:	3b02      	subs	r3, #2
20002400:	b29a      	uxth	r2, r3
20002402:	68fb      	ldr	r3, [r7, #12]
20002404:	87da      	strh	r2, [r3, #62]	; 0x3e
20002406:	e058      	b.n	200024ba <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
20002408:	68fb      	ldr	r3, [r7, #12]
2000240a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
2000240c:	68fb      	ldr	r3, [r7, #12]
2000240e:	681b      	ldr	r3, [r3, #0]
20002410:	330c      	adds	r3, #12
20002412:	7812      	ldrb	r2, [r2, #0]
20002414:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
20002416:	68fb      	ldr	r3, [r7, #12]
20002418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000241a:	1c5a      	adds	r2, r3, #1
2000241c:	68fb      	ldr	r3, [r7, #12]
2000241e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
20002420:	68fb      	ldr	r3, [r7, #12]
20002422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20002424:	b29b      	uxth	r3, r3
20002426:	3b01      	subs	r3, #1
20002428:	b29a      	uxth	r2, r3
2000242a:	68fb      	ldr	r3, [r7, #12]
2000242c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
2000242e:	e044      	b.n	200024ba <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
20002430:	68fb      	ldr	r3, [r7, #12]
20002432:	681b      	ldr	r3, [r3, #0]
20002434:	689b      	ldr	r3, [r3, #8]
20002436:	f003 0302 	and.w	r3, r3, #2
2000243a:	2b02      	cmp	r3, #2
2000243c:	d12b      	bne.n	20002496 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
2000243e:	68fb      	ldr	r3, [r7, #12]
20002440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20002442:	b29b      	uxth	r3, r3
20002444:	2b01      	cmp	r3, #1
20002446:	d912      	bls.n	2000246e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20002448:	68fb      	ldr	r3, [r7, #12]
2000244a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
2000244c:	881a      	ldrh	r2, [r3, #0]
2000244e:	68fb      	ldr	r3, [r7, #12]
20002450:	681b      	ldr	r3, [r3, #0]
20002452:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
20002454:	68fb      	ldr	r3, [r7, #12]
20002456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20002458:	1c9a      	adds	r2, r3, #2
2000245a:	68fb      	ldr	r3, [r7, #12]
2000245c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
2000245e:	68fb      	ldr	r3, [r7, #12]
20002460:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20002462:	b29b      	uxth	r3, r3
20002464:	3b02      	subs	r3, #2
20002466:	b29a      	uxth	r2, r3
20002468:	68fb      	ldr	r3, [r7, #12]
2000246a:	87da      	strh	r2, [r3, #62]	; 0x3e
2000246c:	e025      	b.n	200024ba <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
2000246e:	68fb      	ldr	r3, [r7, #12]
20002470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20002472:	68fb      	ldr	r3, [r7, #12]
20002474:	681b      	ldr	r3, [r3, #0]
20002476:	330c      	adds	r3, #12
20002478:	7812      	ldrb	r2, [r2, #0]
2000247a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
2000247c:	68fb      	ldr	r3, [r7, #12]
2000247e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20002480:	1c5a      	adds	r2, r3, #1
20002482:	68fb      	ldr	r3, [r7, #12]
20002484:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
20002486:	68fb      	ldr	r3, [r7, #12]
20002488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2000248a:	b29b      	uxth	r3, r3
2000248c:	3b01      	subs	r3, #1
2000248e:	b29a      	uxth	r2, r3
20002490:	68fb      	ldr	r3, [r7, #12]
20002492:	87da      	strh	r2, [r3, #62]	; 0x3e
20002494:	e011      	b.n	200024ba <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
20002496:	f7fe fdf1 	bl	2000107c <HAL_GetTick>
2000249a:	4602      	mov	r2, r0
2000249c:	69bb      	ldr	r3, [r7, #24]
2000249e:	1ad3      	subs	r3, r2, r3
200024a0:	683a      	ldr	r2, [r7, #0]
200024a2:	429a      	cmp	r2, r3
200024a4:	d803      	bhi.n	200024ae <HAL_SPI_Transmit+0x268>
200024a6:	683b      	ldr	r3, [r7, #0]
200024a8:	f1b3 3fff 	cmp.w	r3, #4294967295
200024ac:	d102      	bne.n	200024b4 <HAL_SPI_Transmit+0x26e>
200024ae:	683b      	ldr	r3, [r7, #0]
200024b0:	2b00      	cmp	r3, #0
200024b2:	d102      	bne.n	200024ba <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
200024b4:	2303      	movs	r3, #3
200024b6:	77fb      	strb	r3, [r7, #31]
          goto error;
200024b8:	e026      	b.n	20002508 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
200024ba:	68fb      	ldr	r3, [r7, #12]
200024bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200024be:	b29b      	uxth	r3, r3
200024c0:	2b00      	cmp	r3, #0
200024c2:	d1b5      	bne.n	20002430 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
200024c4:	69ba      	ldr	r2, [r7, #24]
200024c6:	6839      	ldr	r1, [r7, #0]
200024c8:	68f8      	ldr	r0, [r7, #12]
200024ca:	f000 fce3 	bl	20002e94 <SPI_EndRxTxTransaction>
200024ce:	4603      	mov	r3, r0
200024d0:	2b00      	cmp	r3, #0
200024d2:	d002      	beq.n	200024da <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
200024d4:	68fb      	ldr	r3, [r7, #12]
200024d6:	2220      	movs	r2, #32
200024d8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
200024da:	68fb      	ldr	r3, [r7, #12]
200024dc:	689b      	ldr	r3, [r3, #8]
200024de:	2b00      	cmp	r3, #0
200024e0:	d10a      	bne.n	200024f8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
200024e2:	2300      	movs	r3, #0
200024e4:	613b      	str	r3, [r7, #16]
200024e6:	68fb      	ldr	r3, [r7, #12]
200024e8:	681b      	ldr	r3, [r3, #0]
200024ea:	68db      	ldr	r3, [r3, #12]
200024ec:	613b      	str	r3, [r7, #16]
200024ee:	68fb      	ldr	r3, [r7, #12]
200024f0:	681b      	ldr	r3, [r3, #0]
200024f2:	689b      	ldr	r3, [r3, #8]
200024f4:	613b      	str	r3, [r7, #16]
200024f6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
200024f8:	68fb      	ldr	r3, [r7, #12]
200024fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
200024fc:	2b00      	cmp	r3, #0
200024fe:	d002      	beq.n	20002506 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
20002500:	2301      	movs	r3, #1
20002502:	77fb      	strb	r3, [r7, #31]
20002504:	e000      	b.n	20002508 <HAL_SPI_Transmit+0x2c2>
  }

error:
20002506:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
20002508:	68fb      	ldr	r3, [r7, #12]
2000250a:	2201      	movs	r2, #1
2000250c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
20002510:	68fb      	ldr	r3, [r7, #12]
20002512:	2200      	movs	r2, #0
20002514:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
20002518:	7ffb      	ldrb	r3, [r7, #31]
}
2000251a:	4618      	mov	r0, r3
2000251c:	3720      	adds	r7, #32
2000251e:	46bd      	mov	sp, r7
20002520:	bd80      	pop	{r7, pc}

20002522 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
20002522:	b580      	push	{r7, lr}
20002524:	b088      	sub	sp, #32
20002526:	af02      	add	r7, sp, #8
20002528:	60f8      	str	r0, [r7, #12]
2000252a:	60b9      	str	r1, [r7, #8]
2000252c:	603b      	str	r3, [r7, #0]
2000252e:	4613      	mov	r3, r2
20002530:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
20002532:	2300      	movs	r3, #0
20002534:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
20002536:	68fb      	ldr	r3, [r7, #12]
20002538:	685b      	ldr	r3, [r3, #4]
2000253a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
2000253e:	d112      	bne.n	20002566 <HAL_SPI_Receive+0x44>
20002540:	68fb      	ldr	r3, [r7, #12]
20002542:	689b      	ldr	r3, [r3, #8]
20002544:	2b00      	cmp	r3, #0
20002546:	d10e      	bne.n	20002566 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
20002548:	68fb      	ldr	r3, [r7, #12]
2000254a:	2204      	movs	r2, #4
2000254c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
20002550:	88fa      	ldrh	r2, [r7, #6]
20002552:	683b      	ldr	r3, [r7, #0]
20002554:	9300      	str	r3, [sp, #0]
20002556:	4613      	mov	r3, r2
20002558:	68ba      	ldr	r2, [r7, #8]
2000255a:	68b9      	ldr	r1, [r7, #8]
2000255c:	68f8      	ldr	r0, [r7, #12]
2000255e:	f000 f910 	bl	20002782 <HAL_SPI_TransmitReceive>
20002562:	4603      	mov	r3, r0
20002564:	e109      	b.n	2000277a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
20002566:	68fb      	ldr	r3, [r7, #12]
20002568:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
2000256c:	2b01      	cmp	r3, #1
2000256e:	d101      	bne.n	20002574 <HAL_SPI_Receive+0x52>
20002570:	2302      	movs	r3, #2
20002572:	e102      	b.n	2000277a <HAL_SPI_Receive+0x258>
20002574:	68fb      	ldr	r3, [r7, #12]
20002576:	2201      	movs	r2, #1
20002578:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
2000257c:	f7fe fd7e 	bl	2000107c <HAL_GetTick>
20002580:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
20002582:	68fb      	ldr	r3, [r7, #12]
20002584:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
20002588:	b2db      	uxtb	r3, r3
2000258a:	2b01      	cmp	r3, #1
2000258c:	d002      	beq.n	20002594 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
2000258e:	2302      	movs	r3, #2
20002590:	75fb      	strb	r3, [r7, #23]
    goto error;
20002592:	e0e9      	b.n	20002768 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
20002594:	68bb      	ldr	r3, [r7, #8]
20002596:	2b00      	cmp	r3, #0
20002598:	d002      	beq.n	200025a0 <HAL_SPI_Receive+0x7e>
2000259a:	88fb      	ldrh	r3, [r7, #6]
2000259c:	2b00      	cmp	r3, #0
2000259e:	d102      	bne.n	200025a6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
200025a0:	2301      	movs	r3, #1
200025a2:	75fb      	strb	r3, [r7, #23]
    goto error;
200025a4:	e0e0      	b.n	20002768 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
200025a6:	68fb      	ldr	r3, [r7, #12]
200025a8:	2204      	movs	r2, #4
200025aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
200025ae:	68fb      	ldr	r3, [r7, #12]
200025b0:	2200      	movs	r2, #0
200025b2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
200025b4:	68fb      	ldr	r3, [r7, #12]
200025b6:	68ba      	ldr	r2, [r7, #8]
200025b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
200025ba:	68fb      	ldr	r3, [r7, #12]
200025bc:	88fa      	ldrh	r2, [r7, #6]
200025be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
200025c2:	68fb      	ldr	r3, [r7, #12]
200025c4:	88fa      	ldrh	r2, [r7, #6]
200025c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
200025ca:	68fb      	ldr	r3, [r7, #12]
200025cc:	2200      	movs	r2, #0
200025ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
200025d0:	68fb      	ldr	r3, [r7, #12]
200025d2:	2200      	movs	r2, #0
200025d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
200025d6:	68fb      	ldr	r3, [r7, #12]
200025d8:	2200      	movs	r2, #0
200025da:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
200025dc:	68fb      	ldr	r3, [r7, #12]
200025de:	2200      	movs	r2, #0
200025e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
200025e2:	68fb      	ldr	r3, [r7, #12]
200025e4:	2200      	movs	r2, #0
200025e6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
200025e8:	68fb      	ldr	r3, [r7, #12]
200025ea:	68db      	ldr	r3, [r3, #12]
200025ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
200025f0:	d908      	bls.n	20002604 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
200025f2:	68fb      	ldr	r3, [r7, #12]
200025f4:	681b      	ldr	r3, [r3, #0]
200025f6:	685a      	ldr	r2, [r3, #4]
200025f8:	68fb      	ldr	r3, [r7, #12]
200025fa:	681b      	ldr	r3, [r3, #0]
200025fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
20002600:	605a      	str	r2, [r3, #4]
20002602:	e007      	b.n	20002614 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
20002604:	68fb      	ldr	r3, [r7, #12]
20002606:	681b      	ldr	r3, [r3, #0]
20002608:	685a      	ldr	r2, [r3, #4]
2000260a:	68fb      	ldr	r3, [r7, #12]
2000260c:	681b      	ldr	r3, [r3, #0]
2000260e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
20002612:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
20002614:	68fb      	ldr	r3, [r7, #12]
20002616:	689b      	ldr	r3, [r3, #8]
20002618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
2000261c:	d10f      	bne.n	2000263e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
2000261e:	68fb      	ldr	r3, [r7, #12]
20002620:	681b      	ldr	r3, [r3, #0]
20002622:	681a      	ldr	r2, [r3, #0]
20002624:	68fb      	ldr	r3, [r7, #12]
20002626:	681b      	ldr	r3, [r3, #0]
20002628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
2000262c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
2000262e:	68fb      	ldr	r3, [r7, #12]
20002630:	681b      	ldr	r3, [r3, #0]
20002632:	681a      	ldr	r2, [r3, #0]
20002634:	68fb      	ldr	r3, [r7, #12]
20002636:	681b      	ldr	r3, [r3, #0]
20002638:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
2000263c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
2000263e:	68fb      	ldr	r3, [r7, #12]
20002640:	681b      	ldr	r3, [r3, #0]
20002642:	681b      	ldr	r3, [r3, #0]
20002644:	f003 0340 	and.w	r3, r3, #64	; 0x40
20002648:	2b40      	cmp	r3, #64	; 0x40
2000264a:	d007      	beq.n	2000265c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
2000264c:	68fb      	ldr	r3, [r7, #12]
2000264e:	681b      	ldr	r3, [r3, #0]
20002650:	681a      	ldr	r2, [r3, #0]
20002652:	68fb      	ldr	r3, [r7, #12]
20002654:	681b      	ldr	r3, [r3, #0]
20002656:	f042 0240 	orr.w	r2, r2, #64	; 0x40
2000265a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
2000265c:	68fb      	ldr	r3, [r7, #12]
2000265e:	68db      	ldr	r3, [r3, #12]
20002660:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
20002664:	d867      	bhi.n	20002736 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
20002666:	e030      	b.n	200026ca <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
20002668:	68fb      	ldr	r3, [r7, #12]
2000266a:	681b      	ldr	r3, [r3, #0]
2000266c:	689b      	ldr	r3, [r3, #8]
2000266e:	f003 0301 	and.w	r3, r3, #1
20002672:	2b01      	cmp	r3, #1
20002674:	d117      	bne.n	200026a6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
20002676:	68fb      	ldr	r3, [r7, #12]
20002678:	681b      	ldr	r3, [r3, #0]
2000267a:	f103 020c 	add.w	r2, r3, #12
2000267e:	68fb      	ldr	r3, [r7, #12]
20002680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002682:	7812      	ldrb	r2, [r2, #0]
20002684:	b2d2      	uxtb	r2, r2
20002686:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
20002688:	68fb      	ldr	r3, [r7, #12]
2000268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
2000268c:	1c5a      	adds	r2, r3, #1
2000268e:	68fb      	ldr	r3, [r7, #12]
20002690:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
20002692:	68fb      	ldr	r3, [r7, #12]
20002694:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
20002698:	b29b      	uxth	r3, r3
2000269a:	3b01      	subs	r3, #1
2000269c:	b29a      	uxth	r2, r3
2000269e:	68fb      	ldr	r3, [r7, #12]
200026a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
200026a4:	e011      	b.n	200026ca <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
200026a6:	f7fe fce9 	bl	2000107c <HAL_GetTick>
200026aa:	4602      	mov	r2, r0
200026ac:	693b      	ldr	r3, [r7, #16]
200026ae:	1ad3      	subs	r3, r2, r3
200026b0:	683a      	ldr	r2, [r7, #0]
200026b2:	429a      	cmp	r2, r3
200026b4:	d803      	bhi.n	200026be <HAL_SPI_Receive+0x19c>
200026b6:	683b      	ldr	r3, [r7, #0]
200026b8:	f1b3 3fff 	cmp.w	r3, #4294967295
200026bc:	d102      	bne.n	200026c4 <HAL_SPI_Receive+0x1a2>
200026be:	683b      	ldr	r3, [r7, #0]
200026c0:	2b00      	cmp	r3, #0
200026c2:	d102      	bne.n	200026ca <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
200026c4:	2303      	movs	r3, #3
200026c6:	75fb      	strb	r3, [r7, #23]
          goto error;
200026c8:	e04e      	b.n	20002768 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
200026ca:	68fb      	ldr	r3, [r7, #12]
200026cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
200026d0:	b29b      	uxth	r3, r3
200026d2:	2b00      	cmp	r3, #0
200026d4:	d1c8      	bne.n	20002668 <HAL_SPI_Receive+0x146>
200026d6:	e034      	b.n	20002742 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
200026d8:	68fb      	ldr	r3, [r7, #12]
200026da:	681b      	ldr	r3, [r3, #0]
200026dc:	689b      	ldr	r3, [r3, #8]
200026de:	f003 0301 	and.w	r3, r3, #1
200026e2:	2b01      	cmp	r3, #1
200026e4:	d115      	bne.n	20002712 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
200026e6:	68fb      	ldr	r3, [r7, #12]
200026e8:	681b      	ldr	r3, [r3, #0]
200026ea:	68da      	ldr	r2, [r3, #12]
200026ec:	68fb      	ldr	r3, [r7, #12]
200026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200026f0:	b292      	uxth	r2, r2
200026f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
200026f4:	68fb      	ldr	r3, [r7, #12]
200026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
200026f8:	1c9a      	adds	r2, r3, #2
200026fa:	68fb      	ldr	r3, [r7, #12]
200026fc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
200026fe:	68fb      	ldr	r3, [r7, #12]
20002700:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
20002704:	b29b      	uxth	r3, r3
20002706:	3b01      	subs	r3, #1
20002708:	b29a      	uxth	r2, r3
2000270a:	68fb      	ldr	r3, [r7, #12]
2000270c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
20002710:	e011      	b.n	20002736 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
20002712:	f7fe fcb3 	bl	2000107c <HAL_GetTick>
20002716:	4602      	mov	r2, r0
20002718:	693b      	ldr	r3, [r7, #16]
2000271a:	1ad3      	subs	r3, r2, r3
2000271c:	683a      	ldr	r2, [r7, #0]
2000271e:	429a      	cmp	r2, r3
20002720:	d803      	bhi.n	2000272a <HAL_SPI_Receive+0x208>
20002722:	683b      	ldr	r3, [r7, #0]
20002724:	f1b3 3fff 	cmp.w	r3, #4294967295
20002728:	d102      	bne.n	20002730 <HAL_SPI_Receive+0x20e>
2000272a:	683b      	ldr	r3, [r7, #0]
2000272c:	2b00      	cmp	r3, #0
2000272e:	d102      	bne.n	20002736 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
20002730:	2303      	movs	r3, #3
20002732:	75fb      	strb	r3, [r7, #23]
          goto error;
20002734:	e018      	b.n	20002768 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
20002736:	68fb      	ldr	r3, [r7, #12]
20002738:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
2000273c:	b29b      	uxth	r3, r3
2000273e:	2b00      	cmp	r3, #0
20002740:	d1ca      	bne.n	200026d8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
20002742:	693a      	ldr	r2, [r7, #16]
20002744:	6839      	ldr	r1, [r7, #0]
20002746:	68f8      	ldr	r0, [r7, #12]
20002748:	f000 fb4c 	bl	20002de4 <SPI_EndRxTransaction>
2000274c:	4603      	mov	r3, r0
2000274e:	2b00      	cmp	r3, #0
20002750:	d002      	beq.n	20002758 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
20002752:	68fb      	ldr	r3, [r7, #12]
20002754:	2220      	movs	r2, #32
20002756:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
20002758:	68fb      	ldr	r3, [r7, #12]
2000275a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
2000275c:	2b00      	cmp	r3, #0
2000275e:	d002      	beq.n	20002766 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
20002760:	2301      	movs	r3, #1
20002762:	75fb      	strb	r3, [r7, #23]
20002764:	e000      	b.n	20002768 <HAL_SPI_Receive+0x246>
  }

error :
20002766:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
20002768:	68fb      	ldr	r3, [r7, #12]
2000276a:	2201      	movs	r2, #1
2000276c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
20002770:	68fb      	ldr	r3, [r7, #12]
20002772:	2200      	movs	r2, #0
20002774:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
20002778:	7dfb      	ldrb	r3, [r7, #23]
}
2000277a:	4618      	mov	r0, r3
2000277c:	3718      	adds	r7, #24
2000277e:	46bd      	mov	sp, r7
20002780:	bd80      	pop	{r7, pc}

20002782 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
20002782:	b580      	push	{r7, lr}
20002784:	b08a      	sub	sp, #40	; 0x28
20002786:	af00      	add	r7, sp, #0
20002788:	60f8      	str	r0, [r7, #12]
2000278a:	60b9      	str	r1, [r7, #8]
2000278c:	607a      	str	r2, [r7, #4]
2000278e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
20002790:	2301      	movs	r3, #1
20002792:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
20002794:	2300      	movs	r3, #0
20002796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
2000279a:	68fb      	ldr	r3, [r7, #12]
2000279c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
200027a0:	2b01      	cmp	r3, #1
200027a2:	d101      	bne.n	200027a8 <HAL_SPI_TransmitReceive+0x26>
200027a4:	2302      	movs	r3, #2
200027a6:	e1fb      	b.n	20002ba0 <HAL_SPI_TransmitReceive+0x41e>
200027a8:	68fb      	ldr	r3, [r7, #12]
200027aa:	2201      	movs	r2, #1
200027ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
200027b0:	f7fe fc64 	bl	2000107c <HAL_GetTick>
200027b4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
200027b6:	68fb      	ldr	r3, [r7, #12]
200027b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
200027bc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
200027be:	68fb      	ldr	r3, [r7, #12]
200027c0:	685b      	ldr	r3, [r3, #4]
200027c2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
200027c4:	887b      	ldrh	r3, [r7, #2]
200027c6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
200027c8:	887b      	ldrh	r3, [r7, #2]
200027ca:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
200027cc:	7efb      	ldrb	r3, [r7, #27]
200027ce:	2b01      	cmp	r3, #1
200027d0:	d00e      	beq.n	200027f0 <HAL_SPI_TransmitReceive+0x6e>
200027d2:	697b      	ldr	r3, [r7, #20]
200027d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
200027d8:	d106      	bne.n	200027e8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
200027da:	68fb      	ldr	r3, [r7, #12]
200027dc:	689b      	ldr	r3, [r3, #8]
200027de:	2b00      	cmp	r3, #0
200027e0:	d102      	bne.n	200027e8 <HAL_SPI_TransmitReceive+0x66>
200027e2:	7efb      	ldrb	r3, [r7, #27]
200027e4:	2b04      	cmp	r3, #4
200027e6:	d003      	beq.n	200027f0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
200027e8:	2302      	movs	r3, #2
200027ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
200027ee:	e1cd      	b.n	20002b8c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
200027f0:	68bb      	ldr	r3, [r7, #8]
200027f2:	2b00      	cmp	r3, #0
200027f4:	d005      	beq.n	20002802 <HAL_SPI_TransmitReceive+0x80>
200027f6:	687b      	ldr	r3, [r7, #4]
200027f8:	2b00      	cmp	r3, #0
200027fa:	d002      	beq.n	20002802 <HAL_SPI_TransmitReceive+0x80>
200027fc:	887b      	ldrh	r3, [r7, #2]
200027fe:	2b00      	cmp	r3, #0
20002800:	d103      	bne.n	2000280a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
20002802:	2301      	movs	r3, #1
20002804:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
20002808:	e1c0      	b.n	20002b8c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
2000280a:	68fb      	ldr	r3, [r7, #12]
2000280c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
20002810:	b2db      	uxtb	r3, r3
20002812:	2b04      	cmp	r3, #4
20002814:	d003      	beq.n	2000281e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
20002816:	68fb      	ldr	r3, [r7, #12]
20002818:	2205      	movs	r2, #5
2000281a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
2000281e:	68fb      	ldr	r3, [r7, #12]
20002820:	2200      	movs	r2, #0
20002822:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
20002824:	68fb      	ldr	r3, [r7, #12]
20002826:	687a      	ldr	r2, [r7, #4]
20002828:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
2000282a:	68fb      	ldr	r3, [r7, #12]
2000282c:	887a      	ldrh	r2, [r7, #2]
2000282e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
20002832:	68fb      	ldr	r3, [r7, #12]
20002834:	887a      	ldrh	r2, [r7, #2]
20002836:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
2000283a:	68fb      	ldr	r3, [r7, #12]
2000283c:	68ba      	ldr	r2, [r7, #8]
2000283e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
20002840:	68fb      	ldr	r3, [r7, #12]
20002842:	887a      	ldrh	r2, [r7, #2]
20002844:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
20002846:	68fb      	ldr	r3, [r7, #12]
20002848:	887a      	ldrh	r2, [r7, #2]
2000284a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
2000284c:	68fb      	ldr	r3, [r7, #12]
2000284e:	2200      	movs	r2, #0
20002850:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
20002852:	68fb      	ldr	r3, [r7, #12]
20002854:	2200      	movs	r2, #0
20002856:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
20002858:	68fb      	ldr	r3, [r7, #12]
2000285a:	68db      	ldr	r3, [r3, #12]
2000285c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
20002860:	d802      	bhi.n	20002868 <HAL_SPI_TransmitReceive+0xe6>
20002862:	8a3b      	ldrh	r3, [r7, #16]
20002864:	2b01      	cmp	r3, #1
20002866:	d908      	bls.n	2000287a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
20002868:	68fb      	ldr	r3, [r7, #12]
2000286a:	681b      	ldr	r3, [r3, #0]
2000286c:	685a      	ldr	r2, [r3, #4]
2000286e:	68fb      	ldr	r3, [r7, #12]
20002870:	681b      	ldr	r3, [r3, #0]
20002872:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
20002876:	605a      	str	r2, [r3, #4]
20002878:	e007      	b.n	2000288a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
2000287a:	68fb      	ldr	r3, [r7, #12]
2000287c:	681b      	ldr	r3, [r3, #0]
2000287e:	685a      	ldr	r2, [r3, #4]
20002880:	68fb      	ldr	r3, [r7, #12]
20002882:	681b      	ldr	r3, [r3, #0]
20002884:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
20002888:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
2000288a:	68fb      	ldr	r3, [r7, #12]
2000288c:	681b      	ldr	r3, [r3, #0]
2000288e:	681b      	ldr	r3, [r3, #0]
20002890:	f003 0340 	and.w	r3, r3, #64	; 0x40
20002894:	2b40      	cmp	r3, #64	; 0x40
20002896:	d007      	beq.n	200028a8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
20002898:	68fb      	ldr	r3, [r7, #12]
2000289a:	681b      	ldr	r3, [r3, #0]
2000289c:	681a      	ldr	r2, [r3, #0]
2000289e:	68fb      	ldr	r3, [r7, #12]
200028a0:	681b      	ldr	r3, [r3, #0]
200028a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
200028a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
200028a8:	68fb      	ldr	r3, [r7, #12]
200028aa:	68db      	ldr	r3, [r3, #12]
200028ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
200028b0:	d97c      	bls.n	200029ac <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
200028b2:	68fb      	ldr	r3, [r7, #12]
200028b4:	685b      	ldr	r3, [r3, #4]
200028b6:	2b00      	cmp	r3, #0
200028b8:	d002      	beq.n	200028c0 <HAL_SPI_TransmitReceive+0x13e>
200028ba:	8a7b      	ldrh	r3, [r7, #18]
200028bc:	2b01      	cmp	r3, #1
200028be:	d169      	bne.n	20002994 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
200028c0:	68fb      	ldr	r3, [r7, #12]
200028c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200028c4:	881a      	ldrh	r2, [r3, #0]
200028c6:	68fb      	ldr	r3, [r7, #12]
200028c8:	681b      	ldr	r3, [r3, #0]
200028ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
200028cc:	68fb      	ldr	r3, [r7, #12]
200028ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200028d0:	1c9a      	adds	r2, r3, #2
200028d2:	68fb      	ldr	r3, [r7, #12]
200028d4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
200028d6:	68fb      	ldr	r3, [r7, #12]
200028d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200028da:	b29b      	uxth	r3, r3
200028dc:	3b01      	subs	r3, #1
200028de:	b29a      	uxth	r2, r3
200028e0:	68fb      	ldr	r3, [r7, #12]
200028e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
200028e4:	e056      	b.n	20002994 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
200028e6:	68fb      	ldr	r3, [r7, #12]
200028e8:	681b      	ldr	r3, [r3, #0]
200028ea:	689b      	ldr	r3, [r3, #8]
200028ec:	f003 0302 	and.w	r3, r3, #2
200028f0:	2b02      	cmp	r3, #2
200028f2:	d11b      	bne.n	2000292c <HAL_SPI_TransmitReceive+0x1aa>
200028f4:	68fb      	ldr	r3, [r7, #12]
200028f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200028f8:	b29b      	uxth	r3, r3
200028fa:	2b00      	cmp	r3, #0
200028fc:	d016      	beq.n	2000292c <HAL_SPI_TransmitReceive+0x1aa>
200028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002900:	2b01      	cmp	r3, #1
20002902:	d113      	bne.n	2000292c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20002904:	68fb      	ldr	r3, [r7, #12]
20002906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20002908:	881a      	ldrh	r2, [r3, #0]
2000290a:	68fb      	ldr	r3, [r7, #12]
2000290c:	681b      	ldr	r3, [r3, #0]
2000290e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
20002910:	68fb      	ldr	r3, [r7, #12]
20002912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20002914:	1c9a      	adds	r2, r3, #2
20002916:	68fb      	ldr	r3, [r7, #12]
20002918:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
2000291a:	68fb      	ldr	r3, [r7, #12]
2000291c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
2000291e:	b29b      	uxth	r3, r3
20002920:	3b01      	subs	r3, #1
20002922:	b29a      	uxth	r2, r3
20002924:	68fb      	ldr	r3, [r7, #12]
20002926:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
20002928:	2300      	movs	r3, #0
2000292a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
2000292c:	68fb      	ldr	r3, [r7, #12]
2000292e:	681b      	ldr	r3, [r3, #0]
20002930:	689b      	ldr	r3, [r3, #8]
20002932:	f003 0301 	and.w	r3, r3, #1
20002936:	2b01      	cmp	r3, #1
20002938:	d11c      	bne.n	20002974 <HAL_SPI_TransmitReceive+0x1f2>
2000293a:	68fb      	ldr	r3, [r7, #12]
2000293c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
20002940:	b29b      	uxth	r3, r3
20002942:	2b00      	cmp	r3, #0
20002944:	d016      	beq.n	20002974 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
20002946:	68fb      	ldr	r3, [r7, #12]
20002948:	681b      	ldr	r3, [r3, #0]
2000294a:	68da      	ldr	r2, [r3, #12]
2000294c:	68fb      	ldr	r3, [r7, #12]
2000294e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002950:	b292      	uxth	r2, r2
20002952:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
20002954:	68fb      	ldr	r3, [r7, #12]
20002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002958:	1c9a      	adds	r2, r3, #2
2000295a:	68fb      	ldr	r3, [r7, #12]
2000295c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
2000295e:	68fb      	ldr	r3, [r7, #12]
20002960:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
20002964:	b29b      	uxth	r3, r3
20002966:	3b01      	subs	r3, #1
20002968:	b29a      	uxth	r2, r3
2000296a:	68fb      	ldr	r3, [r7, #12]
2000296c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
20002970:	2301      	movs	r3, #1
20002972:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
20002974:	f7fe fb82 	bl	2000107c <HAL_GetTick>
20002978:	4602      	mov	r2, r0
2000297a:	69fb      	ldr	r3, [r7, #28]
2000297c:	1ad3      	subs	r3, r2, r3
2000297e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20002980:	429a      	cmp	r2, r3
20002982:	d807      	bhi.n	20002994 <HAL_SPI_TransmitReceive+0x212>
20002984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002986:	f1b3 3fff 	cmp.w	r3, #4294967295
2000298a:	d003      	beq.n	20002994 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
2000298c:	2303      	movs	r3, #3
2000298e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
20002992:	e0fb      	b.n	20002b8c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
20002994:	68fb      	ldr	r3, [r7, #12]
20002996:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20002998:	b29b      	uxth	r3, r3
2000299a:	2b00      	cmp	r3, #0
2000299c:	d1a3      	bne.n	200028e6 <HAL_SPI_TransmitReceive+0x164>
2000299e:	68fb      	ldr	r3, [r7, #12]
200029a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
200029a4:	b29b      	uxth	r3, r3
200029a6:	2b00      	cmp	r3, #0
200029a8:	d19d      	bne.n	200028e6 <HAL_SPI_TransmitReceive+0x164>
200029aa:	e0df      	b.n	20002b6c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
200029ac:	68fb      	ldr	r3, [r7, #12]
200029ae:	685b      	ldr	r3, [r3, #4]
200029b0:	2b00      	cmp	r3, #0
200029b2:	d003      	beq.n	200029bc <HAL_SPI_TransmitReceive+0x23a>
200029b4:	8a7b      	ldrh	r3, [r7, #18]
200029b6:	2b01      	cmp	r3, #1
200029b8:	f040 80cb 	bne.w	20002b52 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
200029bc:	68fb      	ldr	r3, [r7, #12]
200029be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200029c0:	b29b      	uxth	r3, r3
200029c2:	2b01      	cmp	r3, #1
200029c4:	d912      	bls.n	200029ec <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
200029c6:	68fb      	ldr	r3, [r7, #12]
200029c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200029ca:	881a      	ldrh	r2, [r3, #0]
200029cc:	68fb      	ldr	r3, [r7, #12]
200029ce:	681b      	ldr	r3, [r3, #0]
200029d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
200029d2:	68fb      	ldr	r3, [r7, #12]
200029d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200029d6:	1c9a      	adds	r2, r3, #2
200029d8:	68fb      	ldr	r3, [r7, #12]
200029da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
200029dc:	68fb      	ldr	r3, [r7, #12]
200029de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
200029e0:	b29b      	uxth	r3, r3
200029e2:	3b02      	subs	r3, #2
200029e4:	b29a      	uxth	r2, r3
200029e6:	68fb      	ldr	r3, [r7, #12]
200029e8:	87da      	strh	r2, [r3, #62]	; 0x3e
200029ea:	e0b2      	b.n	20002b52 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
200029ec:	68fb      	ldr	r3, [r7, #12]
200029ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
200029f0:	68fb      	ldr	r3, [r7, #12]
200029f2:	681b      	ldr	r3, [r3, #0]
200029f4:	330c      	adds	r3, #12
200029f6:	7812      	ldrb	r2, [r2, #0]
200029f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
200029fa:	68fb      	ldr	r3, [r7, #12]
200029fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
200029fe:	1c5a      	adds	r2, r3, #1
20002a00:	68fb      	ldr	r3, [r7, #12]
20002a02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
20002a04:	68fb      	ldr	r3, [r7, #12]
20002a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20002a08:	b29b      	uxth	r3, r3
20002a0a:	3b01      	subs	r3, #1
20002a0c:	b29a      	uxth	r2, r3
20002a0e:	68fb      	ldr	r3, [r7, #12]
20002a10:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
20002a12:	e09e      	b.n	20002b52 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
20002a14:	68fb      	ldr	r3, [r7, #12]
20002a16:	681b      	ldr	r3, [r3, #0]
20002a18:	689b      	ldr	r3, [r3, #8]
20002a1a:	f003 0302 	and.w	r3, r3, #2
20002a1e:	2b02      	cmp	r3, #2
20002a20:	d134      	bne.n	20002a8c <HAL_SPI_TransmitReceive+0x30a>
20002a22:	68fb      	ldr	r3, [r7, #12]
20002a24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20002a26:	b29b      	uxth	r3, r3
20002a28:	2b00      	cmp	r3, #0
20002a2a:	d02f      	beq.n	20002a8c <HAL_SPI_TransmitReceive+0x30a>
20002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002a2e:	2b01      	cmp	r3, #1
20002a30:	d12c      	bne.n	20002a8c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
20002a32:	68fb      	ldr	r3, [r7, #12]
20002a34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20002a36:	b29b      	uxth	r3, r3
20002a38:	2b01      	cmp	r3, #1
20002a3a:	d912      	bls.n	20002a62 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
20002a3c:	68fb      	ldr	r3, [r7, #12]
20002a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20002a40:	881a      	ldrh	r2, [r3, #0]
20002a42:	68fb      	ldr	r3, [r7, #12]
20002a44:	681b      	ldr	r3, [r3, #0]
20002a46:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
20002a48:	68fb      	ldr	r3, [r7, #12]
20002a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20002a4c:	1c9a      	adds	r2, r3, #2
20002a4e:	68fb      	ldr	r3, [r7, #12]
20002a50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
20002a52:	68fb      	ldr	r3, [r7, #12]
20002a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20002a56:	b29b      	uxth	r3, r3
20002a58:	3b02      	subs	r3, #2
20002a5a:	b29a      	uxth	r2, r3
20002a5c:	68fb      	ldr	r3, [r7, #12]
20002a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
20002a60:	e012      	b.n	20002a88 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
20002a62:	68fb      	ldr	r3, [r7, #12]
20002a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
20002a66:	68fb      	ldr	r3, [r7, #12]
20002a68:	681b      	ldr	r3, [r3, #0]
20002a6a:	330c      	adds	r3, #12
20002a6c:	7812      	ldrb	r2, [r2, #0]
20002a6e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
20002a70:	68fb      	ldr	r3, [r7, #12]
20002a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
20002a74:	1c5a      	adds	r2, r3, #1
20002a76:	68fb      	ldr	r3, [r7, #12]
20002a78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
20002a7a:	68fb      	ldr	r3, [r7, #12]
20002a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20002a7e:	b29b      	uxth	r3, r3
20002a80:	3b01      	subs	r3, #1
20002a82:	b29a      	uxth	r2, r3
20002a84:	68fb      	ldr	r3, [r7, #12]
20002a86:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
20002a88:	2300      	movs	r3, #0
20002a8a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
20002a8c:	68fb      	ldr	r3, [r7, #12]
20002a8e:	681b      	ldr	r3, [r3, #0]
20002a90:	689b      	ldr	r3, [r3, #8]
20002a92:	f003 0301 	and.w	r3, r3, #1
20002a96:	2b01      	cmp	r3, #1
20002a98:	d148      	bne.n	20002b2c <HAL_SPI_TransmitReceive+0x3aa>
20002a9a:	68fb      	ldr	r3, [r7, #12]
20002a9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
20002aa0:	b29b      	uxth	r3, r3
20002aa2:	2b00      	cmp	r3, #0
20002aa4:	d042      	beq.n	20002b2c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
20002aa6:	68fb      	ldr	r3, [r7, #12]
20002aa8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
20002aac:	b29b      	uxth	r3, r3
20002aae:	2b01      	cmp	r3, #1
20002ab0:	d923      	bls.n	20002afa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
20002ab2:	68fb      	ldr	r3, [r7, #12]
20002ab4:	681b      	ldr	r3, [r3, #0]
20002ab6:	68da      	ldr	r2, [r3, #12]
20002ab8:	68fb      	ldr	r3, [r7, #12]
20002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002abc:	b292      	uxth	r2, r2
20002abe:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
20002ac0:	68fb      	ldr	r3, [r7, #12]
20002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002ac4:	1c9a      	adds	r2, r3, #2
20002ac6:	68fb      	ldr	r3, [r7, #12]
20002ac8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
20002aca:	68fb      	ldr	r3, [r7, #12]
20002acc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
20002ad0:	b29b      	uxth	r3, r3
20002ad2:	3b02      	subs	r3, #2
20002ad4:	b29a      	uxth	r2, r3
20002ad6:	68fb      	ldr	r3, [r7, #12]
20002ad8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
20002adc:	68fb      	ldr	r3, [r7, #12]
20002ade:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
20002ae2:	b29b      	uxth	r3, r3
20002ae4:	2b01      	cmp	r3, #1
20002ae6:	d81f      	bhi.n	20002b28 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
20002ae8:	68fb      	ldr	r3, [r7, #12]
20002aea:	681b      	ldr	r3, [r3, #0]
20002aec:	685a      	ldr	r2, [r3, #4]
20002aee:	68fb      	ldr	r3, [r7, #12]
20002af0:	681b      	ldr	r3, [r3, #0]
20002af2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
20002af6:	605a      	str	r2, [r3, #4]
20002af8:	e016      	b.n	20002b28 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
20002afa:	68fb      	ldr	r3, [r7, #12]
20002afc:	681b      	ldr	r3, [r3, #0]
20002afe:	f103 020c 	add.w	r2, r3, #12
20002b02:	68fb      	ldr	r3, [r7, #12]
20002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002b06:	7812      	ldrb	r2, [r2, #0]
20002b08:	b2d2      	uxtb	r2, r2
20002b0a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
20002b0c:	68fb      	ldr	r3, [r7, #12]
20002b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
20002b10:	1c5a      	adds	r2, r3, #1
20002b12:	68fb      	ldr	r3, [r7, #12]
20002b14:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
20002b16:	68fb      	ldr	r3, [r7, #12]
20002b18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
20002b1c:	b29b      	uxth	r3, r3
20002b1e:	3b01      	subs	r3, #1
20002b20:	b29a      	uxth	r2, r3
20002b22:	68fb      	ldr	r3, [r7, #12]
20002b24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
20002b28:	2301      	movs	r3, #1
20002b2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
20002b2c:	f7fe faa6 	bl	2000107c <HAL_GetTick>
20002b30:	4602      	mov	r2, r0
20002b32:	69fb      	ldr	r3, [r7, #28]
20002b34:	1ad3      	subs	r3, r2, r3
20002b36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
20002b38:	429a      	cmp	r2, r3
20002b3a:	d803      	bhi.n	20002b44 <HAL_SPI_TransmitReceive+0x3c2>
20002b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
20002b42:	d102      	bne.n	20002b4a <HAL_SPI_TransmitReceive+0x3c8>
20002b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002b46:	2b00      	cmp	r3, #0
20002b48:	d103      	bne.n	20002b52 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
20002b4a:	2303      	movs	r3, #3
20002b4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
20002b50:	e01c      	b.n	20002b8c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
20002b52:	68fb      	ldr	r3, [r7, #12]
20002b54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
20002b56:	b29b      	uxth	r3, r3
20002b58:	2b00      	cmp	r3, #0
20002b5a:	f47f af5b 	bne.w	20002a14 <HAL_SPI_TransmitReceive+0x292>
20002b5e:	68fb      	ldr	r3, [r7, #12]
20002b60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
20002b64:	b29b      	uxth	r3, r3
20002b66:	2b00      	cmp	r3, #0
20002b68:	f47f af54 	bne.w	20002a14 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
20002b6c:	69fa      	ldr	r2, [r7, #28]
20002b6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
20002b70:	68f8      	ldr	r0, [r7, #12]
20002b72:	f000 f98f 	bl	20002e94 <SPI_EndRxTxTransaction>
20002b76:	4603      	mov	r3, r0
20002b78:	2b00      	cmp	r3, #0
20002b7a:	d006      	beq.n	20002b8a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
20002b7c:	2301      	movs	r3, #1
20002b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
20002b82:	68fb      	ldr	r3, [r7, #12]
20002b84:	2220      	movs	r2, #32
20002b86:	661a      	str	r2, [r3, #96]	; 0x60
20002b88:	e000      	b.n	20002b8c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
20002b8a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
20002b8c:	68fb      	ldr	r3, [r7, #12]
20002b8e:	2201      	movs	r2, #1
20002b90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
20002b94:	68fb      	ldr	r3, [r7, #12]
20002b96:	2200      	movs	r2, #0
20002b98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
20002b9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
20002ba0:	4618      	mov	r0, r3
20002ba2:	3728      	adds	r7, #40	; 0x28
20002ba4:	46bd      	mov	sp, r7
20002ba6:	bd80      	pop	{r7, pc}

20002ba8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
20002ba8:	b580      	push	{r7, lr}
20002baa:	b088      	sub	sp, #32
20002bac:	af00      	add	r7, sp, #0
20002bae:	60f8      	str	r0, [r7, #12]
20002bb0:	60b9      	str	r1, [r7, #8]
20002bb2:	603b      	str	r3, [r7, #0]
20002bb4:	4613      	mov	r3, r2
20002bb6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
20002bb8:	f7fe fa60 	bl	2000107c <HAL_GetTick>
20002bbc:	4602      	mov	r2, r0
20002bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
20002bc0:	1a9b      	subs	r3, r3, r2
20002bc2:	683a      	ldr	r2, [r7, #0]
20002bc4:	4413      	add	r3, r2
20002bc6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
20002bc8:	f7fe fa58 	bl	2000107c <HAL_GetTick>
20002bcc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
20002bce:	4b39      	ldr	r3, [pc, #228]	; (20002cb4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
20002bd0:	681b      	ldr	r3, [r3, #0]
20002bd2:	015b      	lsls	r3, r3, #5
20002bd4:	0d1b      	lsrs	r3, r3, #20
20002bd6:	69fa      	ldr	r2, [r7, #28]
20002bd8:	fb02 f303 	mul.w	r3, r2, r3
20002bdc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
20002bde:	e054      	b.n	20002c8a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
20002be0:	683b      	ldr	r3, [r7, #0]
20002be2:	f1b3 3fff 	cmp.w	r3, #4294967295
20002be6:	d050      	beq.n	20002c8a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
20002be8:	f7fe fa48 	bl	2000107c <HAL_GetTick>
20002bec:	4602      	mov	r2, r0
20002bee:	69bb      	ldr	r3, [r7, #24]
20002bf0:	1ad3      	subs	r3, r2, r3
20002bf2:	69fa      	ldr	r2, [r7, #28]
20002bf4:	429a      	cmp	r2, r3
20002bf6:	d902      	bls.n	20002bfe <SPI_WaitFlagStateUntilTimeout+0x56>
20002bf8:	69fb      	ldr	r3, [r7, #28]
20002bfa:	2b00      	cmp	r3, #0
20002bfc:	d13d      	bne.n	20002c7a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
20002bfe:	68fb      	ldr	r3, [r7, #12]
20002c00:	681b      	ldr	r3, [r3, #0]
20002c02:	685a      	ldr	r2, [r3, #4]
20002c04:	68fb      	ldr	r3, [r7, #12]
20002c06:	681b      	ldr	r3, [r3, #0]
20002c08:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
20002c0c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
20002c0e:	68fb      	ldr	r3, [r7, #12]
20002c10:	685b      	ldr	r3, [r3, #4]
20002c12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20002c16:	d111      	bne.n	20002c3c <SPI_WaitFlagStateUntilTimeout+0x94>
20002c18:	68fb      	ldr	r3, [r7, #12]
20002c1a:	689b      	ldr	r3, [r3, #8]
20002c1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20002c20:	d004      	beq.n	20002c2c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
20002c22:	68fb      	ldr	r3, [r7, #12]
20002c24:	689b      	ldr	r3, [r3, #8]
20002c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
20002c2a:	d107      	bne.n	20002c3c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
20002c2c:	68fb      	ldr	r3, [r7, #12]
20002c2e:	681b      	ldr	r3, [r3, #0]
20002c30:	681a      	ldr	r2, [r3, #0]
20002c32:	68fb      	ldr	r3, [r7, #12]
20002c34:	681b      	ldr	r3, [r3, #0]
20002c36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20002c3a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
20002c3c:	68fb      	ldr	r3, [r7, #12]
20002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20002c40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
20002c44:	d10f      	bne.n	20002c66 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
20002c46:	68fb      	ldr	r3, [r7, #12]
20002c48:	681b      	ldr	r3, [r3, #0]
20002c4a:	681a      	ldr	r2, [r3, #0]
20002c4c:	68fb      	ldr	r3, [r7, #12]
20002c4e:	681b      	ldr	r3, [r3, #0]
20002c50:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
20002c54:	601a      	str	r2, [r3, #0]
20002c56:	68fb      	ldr	r3, [r7, #12]
20002c58:	681b      	ldr	r3, [r3, #0]
20002c5a:	681a      	ldr	r2, [r3, #0]
20002c5c:	68fb      	ldr	r3, [r7, #12]
20002c5e:	681b      	ldr	r3, [r3, #0]
20002c60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
20002c64:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
20002c66:	68fb      	ldr	r3, [r7, #12]
20002c68:	2201      	movs	r2, #1
20002c6a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
20002c6e:	68fb      	ldr	r3, [r7, #12]
20002c70:	2200      	movs	r2, #0
20002c72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
20002c76:	2303      	movs	r3, #3
20002c78:	e017      	b.n	20002caa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
20002c7a:	697b      	ldr	r3, [r7, #20]
20002c7c:	2b00      	cmp	r3, #0
20002c7e:	d101      	bne.n	20002c84 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
20002c80:	2300      	movs	r3, #0
20002c82:	61fb      	str	r3, [r7, #28]
      }
      count--;
20002c84:	697b      	ldr	r3, [r7, #20]
20002c86:	3b01      	subs	r3, #1
20002c88:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
20002c8a:	68fb      	ldr	r3, [r7, #12]
20002c8c:	681b      	ldr	r3, [r3, #0]
20002c8e:	689a      	ldr	r2, [r3, #8]
20002c90:	68bb      	ldr	r3, [r7, #8]
20002c92:	4013      	ands	r3, r2
20002c94:	68ba      	ldr	r2, [r7, #8]
20002c96:	429a      	cmp	r2, r3
20002c98:	bf0c      	ite	eq
20002c9a:	2301      	moveq	r3, #1
20002c9c:	2300      	movne	r3, #0
20002c9e:	b2db      	uxtb	r3, r3
20002ca0:	461a      	mov	r2, r3
20002ca2:	79fb      	ldrb	r3, [r7, #7]
20002ca4:	429a      	cmp	r2, r3
20002ca6:	d19b      	bne.n	20002be0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
20002ca8:	2300      	movs	r3, #0
}
20002caa:	4618      	mov	r0, r3
20002cac:	3720      	adds	r7, #32
20002cae:	46bd      	mov	sp, r7
20002cb0:	bd80      	pop	{r7, pc}
20002cb2:	bf00      	nop
20002cb4:	200003e0 	.word	0x200003e0

20002cb8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
20002cb8:	b580      	push	{r7, lr}
20002cba:	b08a      	sub	sp, #40	; 0x28
20002cbc:	af00      	add	r7, sp, #0
20002cbe:	60f8      	str	r0, [r7, #12]
20002cc0:	60b9      	str	r1, [r7, #8]
20002cc2:	607a      	str	r2, [r7, #4]
20002cc4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
20002cc6:	2300      	movs	r3, #0
20002cc8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
20002cca:	f7fe f9d7 	bl	2000107c <HAL_GetTick>
20002cce:	4602      	mov	r2, r0
20002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
20002cd2:	1a9b      	subs	r3, r3, r2
20002cd4:	683a      	ldr	r2, [r7, #0]
20002cd6:	4413      	add	r3, r2
20002cd8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
20002cda:	f7fe f9cf 	bl	2000107c <HAL_GetTick>
20002cde:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
20002ce0:	68fb      	ldr	r3, [r7, #12]
20002ce2:	681b      	ldr	r3, [r3, #0]
20002ce4:	330c      	adds	r3, #12
20002ce6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
20002ce8:	4b3d      	ldr	r3, [pc, #244]	; (20002de0 <SPI_WaitFifoStateUntilTimeout+0x128>)
20002cea:	681a      	ldr	r2, [r3, #0]
20002cec:	4613      	mov	r3, r2
20002cee:	009b      	lsls	r3, r3, #2
20002cf0:	4413      	add	r3, r2
20002cf2:	00da      	lsls	r2, r3, #3
20002cf4:	1ad3      	subs	r3, r2, r3
20002cf6:	0d1b      	lsrs	r3, r3, #20
20002cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002cfa:	fb02 f303 	mul.w	r3, r2, r3
20002cfe:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
20002d00:	e060      	b.n	20002dc4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
20002d02:	68bb      	ldr	r3, [r7, #8]
20002d04:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
20002d08:	d107      	bne.n	20002d1a <SPI_WaitFifoStateUntilTimeout+0x62>
20002d0a:	687b      	ldr	r3, [r7, #4]
20002d0c:	2b00      	cmp	r3, #0
20002d0e:	d104      	bne.n	20002d1a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
20002d10:	69fb      	ldr	r3, [r7, #28]
20002d12:	781b      	ldrb	r3, [r3, #0]
20002d14:	b2db      	uxtb	r3, r3
20002d16:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
20002d18:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
20002d1a:	683b      	ldr	r3, [r7, #0]
20002d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
20002d20:	d050      	beq.n	20002dc4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
20002d22:	f7fe f9ab 	bl	2000107c <HAL_GetTick>
20002d26:	4602      	mov	r2, r0
20002d28:	6a3b      	ldr	r3, [r7, #32]
20002d2a:	1ad3      	subs	r3, r2, r3
20002d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
20002d2e:	429a      	cmp	r2, r3
20002d30:	d902      	bls.n	20002d38 <SPI_WaitFifoStateUntilTimeout+0x80>
20002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
20002d34:	2b00      	cmp	r3, #0
20002d36:	d13d      	bne.n	20002db4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
20002d38:	68fb      	ldr	r3, [r7, #12]
20002d3a:	681b      	ldr	r3, [r3, #0]
20002d3c:	685a      	ldr	r2, [r3, #4]
20002d3e:	68fb      	ldr	r3, [r7, #12]
20002d40:	681b      	ldr	r3, [r3, #0]
20002d42:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
20002d46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
20002d48:	68fb      	ldr	r3, [r7, #12]
20002d4a:	685b      	ldr	r3, [r3, #4]
20002d4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20002d50:	d111      	bne.n	20002d76 <SPI_WaitFifoStateUntilTimeout+0xbe>
20002d52:	68fb      	ldr	r3, [r7, #12]
20002d54:	689b      	ldr	r3, [r3, #8]
20002d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20002d5a:	d004      	beq.n	20002d66 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
20002d5c:	68fb      	ldr	r3, [r7, #12]
20002d5e:	689b      	ldr	r3, [r3, #8]
20002d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
20002d64:	d107      	bne.n	20002d76 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
20002d66:	68fb      	ldr	r3, [r7, #12]
20002d68:	681b      	ldr	r3, [r3, #0]
20002d6a:	681a      	ldr	r2, [r3, #0]
20002d6c:	68fb      	ldr	r3, [r7, #12]
20002d6e:	681b      	ldr	r3, [r3, #0]
20002d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20002d74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
20002d76:	68fb      	ldr	r3, [r7, #12]
20002d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
20002d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
20002d7e:	d10f      	bne.n	20002da0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
20002d80:	68fb      	ldr	r3, [r7, #12]
20002d82:	681b      	ldr	r3, [r3, #0]
20002d84:	681a      	ldr	r2, [r3, #0]
20002d86:	68fb      	ldr	r3, [r7, #12]
20002d88:	681b      	ldr	r3, [r3, #0]
20002d8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
20002d8e:	601a      	str	r2, [r3, #0]
20002d90:	68fb      	ldr	r3, [r7, #12]
20002d92:	681b      	ldr	r3, [r3, #0]
20002d94:	681a      	ldr	r2, [r3, #0]
20002d96:	68fb      	ldr	r3, [r7, #12]
20002d98:	681b      	ldr	r3, [r3, #0]
20002d9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
20002d9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
20002da0:	68fb      	ldr	r3, [r7, #12]
20002da2:	2201      	movs	r2, #1
20002da4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
20002da8:	68fb      	ldr	r3, [r7, #12]
20002daa:	2200      	movs	r2, #0
20002dac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
20002db0:	2303      	movs	r3, #3
20002db2:	e010      	b.n	20002dd6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
20002db4:	69bb      	ldr	r3, [r7, #24]
20002db6:	2b00      	cmp	r3, #0
20002db8:	d101      	bne.n	20002dbe <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
20002dba:	2300      	movs	r3, #0
20002dbc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
20002dbe:	69bb      	ldr	r3, [r7, #24]
20002dc0:	3b01      	subs	r3, #1
20002dc2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
20002dc4:	68fb      	ldr	r3, [r7, #12]
20002dc6:	681b      	ldr	r3, [r3, #0]
20002dc8:	689a      	ldr	r2, [r3, #8]
20002dca:	68bb      	ldr	r3, [r7, #8]
20002dcc:	4013      	ands	r3, r2
20002dce:	687a      	ldr	r2, [r7, #4]
20002dd0:	429a      	cmp	r2, r3
20002dd2:	d196      	bne.n	20002d02 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
20002dd4:	2300      	movs	r3, #0
}
20002dd6:	4618      	mov	r0, r3
20002dd8:	3728      	adds	r7, #40	; 0x28
20002dda:	46bd      	mov	sp, r7
20002ddc:	bd80      	pop	{r7, pc}
20002dde:	bf00      	nop
20002de0:	200003e0 	.word	0x200003e0

20002de4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
20002de4:	b580      	push	{r7, lr}
20002de6:	b086      	sub	sp, #24
20002de8:	af02      	add	r7, sp, #8
20002dea:	60f8      	str	r0, [r7, #12]
20002dec:	60b9      	str	r1, [r7, #8]
20002dee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
20002df0:	68fb      	ldr	r3, [r7, #12]
20002df2:	685b      	ldr	r3, [r3, #4]
20002df4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20002df8:	d111      	bne.n	20002e1e <SPI_EndRxTransaction+0x3a>
20002dfa:	68fb      	ldr	r3, [r7, #12]
20002dfc:	689b      	ldr	r3, [r3, #8]
20002dfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20002e02:	d004      	beq.n	20002e0e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
20002e04:	68fb      	ldr	r3, [r7, #12]
20002e06:	689b      	ldr	r3, [r3, #8]
20002e08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
20002e0c:	d107      	bne.n	20002e1e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
20002e0e:	68fb      	ldr	r3, [r7, #12]
20002e10:	681b      	ldr	r3, [r3, #0]
20002e12:	681a      	ldr	r2, [r3, #0]
20002e14:	68fb      	ldr	r3, [r7, #12]
20002e16:	681b      	ldr	r3, [r3, #0]
20002e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
20002e1c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
20002e1e:	687b      	ldr	r3, [r7, #4]
20002e20:	9300      	str	r3, [sp, #0]
20002e22:	68bb      	ldr	r3, [r7, #8]
20002e24:	2200      	movs	r2, #0
20002e26:	2180      	movs	r1, #128	; 0x80
20002e28:	68f8      	ldr	r0, [r7, #12]
20002e2a:	f7ff febd 	bl	20002ba8 <SPI_WaitFlagStateUntilTimeout>
20002e2e:	4603      	mov	r3, r0
20002e30:	2b00      	cmp	r3, #0
20002e32:	d007      	beq.n	20002e44 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20002e34:	68fb      	ldr	r3, [r7, #12]
20002e36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
20002e38:	f043 0220 	orr.w	r2, r3, #32
20002e3c:	68fb      	ldr	r3, [r7, #12]
20002e3e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
20002e40:	2303      	movs	r3, #3
20002e42:	e023      	b.n	20002e8c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
20002e44:	68fb      	ldr	r3, [r7, #12]
20002e46:	685b      	ldr	r3, [r3, #4]
20002e48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
20002e4c:	d11d      	bne.n	20002e8a <SPI_EndRxTransaction+0xa6>
20002e4e:	68fb      	ldr	r3, [r7, #12]
20002e50:	689b      	ldr	r3, [r3, #8]
20002e52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
20002e56:	d004      	beq.n	20002e62 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
20002e58:	68fb      	ldr	r3, [r7, #12]
20002e5a:	689b      	ldr	r3, [r3, #8]
20002e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
20002e60:	d113      	bne.n	20002e8a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
20002e62:	687b      	ldr	r3, [r7, #4]
20002e64:	9300      	str	r3, [sp, #0]
20002e66:	68bb      	ldr	r3, [r7, #8]
20002e68:	2200      	movs	r2, #0
20002e6a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
20002e6e:	68f8      	ldr	r0, [r7, #12]
20002e70:	f7ff ff22 	bl	20002cb8 <SPI_WaitFifoStateUntilTimeout>
20002e74:	4603      	mov	r3, r0
20002e76:	2b00      	cmp	r3, #0
20002e78:	d007      	beq.n	20002e8a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20002e7a:	68fb      	ldr	r3, [r7, #12]
20002e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
20002e7e:	f043 0220 	orr.w	r2, r3, #32
20002e82:	68fb      	ldr	r3, [r7, #12]
20002e84:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
20002e86:	2303      	movs	r3, #3
20002e88:	e000      	b.n	20002e8c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
20002e8a:	2300      	movs	r3, #0
}
20002e8c:	4618      	mov	r0, r3
20002e8e:	3710      	adds	r7, #16
20002e90:	46bd      	mov	sp, r7
20002e92:	bd80      	pop	{r7, pc}

20002e94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
20002e94:	b580      	push	{r7, lr}
20002e96:	b086      	sub	sp, #24
20002e98:	af02      	add	r7, sp, #8
20002e9a:	60f8      	str	r0, [r7, #12]
20002e9c:	60b9      	str	r1, [r7, #8]
20002e9e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
20002ea0:	687b      	ldr	r3, [r7, #4]
20002ea2:	9300      	str	r3, [sp, #0]
20002ea4:	68bb      	ldr	r3, [r7, #8]
20002ea6:	2200      	movs	r2, #0
20002ea8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
20002eac:	68f8      	ldr	r0, [r7, #12]
20002eae:	f7ff ff03 	bl	20002cb8 <SPI_WaitFifoStateUntilTimeout>
20002eb2:	4603      	mov	r3, r0
20002eb4:	2b00      	cmp	r3, #0
20002eb6:	d007      	beq.n	20002ec8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20002eb8:	68fb      	ldr	r3, [r7, #12]
20002eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
20002ebc:	f043 0220 	orr.w	r2, r3, #32
20002ec0:	68fb      	ldr	r3, [r7, #12]
20002ec2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
20002ec4:	2303      	movs	r3, #3
20002ec6:	e027      	b.n	20002f18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
20002ec8:	687b      	ldr	r3, [r7, #4]
20002eca:	9300      	str	r3, [sp, #0]
20002ecc:	68bb      	ldr	r3, [r7, #8]
20002ece:	2200      	movs	r2, #0
20002ed0:	2180      	movs	r1, #128	; 0x80
20002ed2:	68f8      	ldr	r0, [r7, #12]
20002ed4:	f7ff fe68 	bl	20002ba8 <SPI_WaitFlagStateUntilTimeout>
20002ed8:	4603      	mov	r3, r0
20002eda:	2b00      	cmp	r3, #0
20002edc:	d007      	beq.n	20002eee <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20002ede:	68fb      	ldr	r3, [r7, #12]
20002ee0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
20002ee2:	f043 0220 	orr.w	r2, r3, #32
20002ee6:	68fb      	ldr	r3, [r7, #12]
20002ee8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
20002eea:	2303      	movs	r3, #3
20002eec:	e014      	b.n	20002f18 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
20002eee:	687b      	ldr	r3, [r7, #4]
20002ef0:	9300      	str	r3, [sp, #0]
20002ef2:	68bb      	ldr	r3, [r7, #8]
20002ef4:	2200      	movs	r2, #0
20002ef6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
20002efa:	68f8      	ldr	r0, [r7, #12]
20002efc:	f7ff fedc 	bl	20002cb8 <SPI_WaitFifoStateUntilTimeout>
20002f00:	4603      	mov	r3, r0
20002f02:	2b00      	cmp	r3, #0
20002f04:	d007      	beq.n	20002f16 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
20002f06:	68fb      	ldr	r3, [r7, #12]
20002f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
20002f0a:	f043 0220 	orr.w	r2, r3, #32
20002f0e:	68fb      	ldr	r3, [r7, #12]
20002f10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
20002f12:	2303      	movs	r3, #3
20002f14:	e000      	b.n	20002f18 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
20002f16:	2300      	movs	r3, #0
}
20002f18:	4618      	mov	r0, r3
20002f1a:	3710      	adds	r7, #16
20002f1c:	46bd      	mov	sp, r7
20002f1e:	bd80      	pop	{r7, pc}

20002f20 <__libc_init_array>:
20002f20:	b570      	push	{r4, r5, r6, lr}
20002f22:	4d0d      	ldr	r5, [pc, #52]	; (20002f58 <__libc_init_array+0x38>)
20002f24:	4c0d      	ldr	r4, [pc, #52]	; (20002f5c <__libc_init_array+0x3c>)
20002f26:	1b64      	subs	r4, r4, r5
20002f28:	10a4      	asrs	r4, r4, #2
20002f2a:	2600      	movs	r6, #0
20002f2c:	42a6      	cmp	r6, r4
20002f2e:	d109      	bne.n	20002f44 <__libc_init_array+0x24>
20002f30:	4d0b      	ldr	r5, [pc, #44]	; (20002f60 <__libc_init_array+0x40>)
20002f32:	4c0c      	ldr	r4, [pc, #48]	; (20002f64 <__libc_init_array+0x44>)
20002f34:	f000 f820 	bl	20002f78 <_init>
20002f38:	1b64      	subs	r4, r4, r5
20002f3a:	10a4      	asrs	r4, r4, #2
20002f3c:	2600      	movs	r6, #0
20002f3e:	42a6      	cmp	r6, r4
20002f40:	d105      	bne.n	20002f4e <__libc_init_array+0x2e>
20002f42:	bd70      	pop	{r4, r5, r6, pc}
20002f44:	f855 3b04 	ldr.w	r3, [r5], #4
20002f48:	4798      	blx	r3
20002f4a:	3601      	adds	r6, #1
20002f4c:	e7ee      	b.n	20002f2c <__libc_init_array+0xc>
20002f4e:	f855 3b04 	ldr.w	r3, [r5], #4
20002f52:	4798      	blx	r3
20002f54:	3601      	adds	r6, #1
20002f56:	e7f2      	b.n	20002f3e <__libc_init_array+0x1e>
20002f58:	200003d8 	.word	0x200003d8
20002f5c:	200003d8 	.word	0x200003d8
20002f60:	200003d8 	.word	0x200003d8
20002f64:	200003dc 	.word	0x200003dc

20002f68 <memset>:
20002f68:	4402      	add	r2, r0
20002f6a:	4603      	mov	r3, r0
20002f6c:	4293      	cmp	r3, r2
20002f6e:	d100      	bne.n	20002f72 <memset+0xa>
20002f70:	4770      	bx	lr
20002f72:	f803 1b01 	strb.w	r1, [r3], #1
20002f76:	e7f9      	b.n	20002f6c <memset+0x4>

20002f78 <_init>:
20002f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20002f7a:	bf00      	nop
20002f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
20002f7e:	bc08      	pop	{r3}
20002f80:	469e      	mov	lr, r3
20002f82:	4770      	bx	lr

20002f84 <_fini>:
20002f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
20002f86:	bf00      	nop
20002f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
20002f8a:	bc08      	pop	{r3}
20002f8c:	469e      	mov	lr, r3
20002f8e:	4770      	bx	lr
